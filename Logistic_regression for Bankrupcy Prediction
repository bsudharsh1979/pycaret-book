{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "70893d05",
      "metadata": {
        "id": "70893d05"
      },
      "source": [
        "# Classification"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9bff294c-9f2a-4c15-954e-ca14b030c862",
      "metadata": {
        "id": "9bff294c-9f2a-4c15-954e-ca14b030c862"
      },
      "source": [
        "### Importing the Necessary Libraries"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pycaret"
      ],
      "metadata": {
        "id": "P-xTcsHaU1KK",
        "outputId": "cb17233a-01a4-4f00-fc48-86ebd8a05c2d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "id": "P-xTcsHaU1KK",
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pycaret in /usr/local/lib/python3.10/dist-packages (3.0.4)\n",
            "Requirement already satisfied: ipython>=5.5.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (7.34.0)\n",
            "Requirement already satisfied: ipywidgets>=7.6.5 in /usr/local/lib/python3.10/dist-packages (from pycaret) (7.7.1)\n",
            "Requirement already satisfied: tqdm>=4.62.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (4.65.0)\n",
            "Requirement already satisfied: numpy<1.24,>=1.21 in /usr/local/lib/python3.10/dist-packages (from pycaret) (1.23.5)\n",
            "Requirement already satisfied: pandas<2.0.0,>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (1.5.3)\n",
            "Requirement already satisfied: jinja2>=1.2 in /usr/local/lib/python3.10/dist-packages (from pycaret) (3.1.2)\n",
            "Requirement already satisfied: scipy<2.0.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (1.11.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (1.2.0)\n",
            "Requirement already satisfied: scikit-learn<1.3.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (1.2.2)\n",
            "Requirement already satisfied: pyod>=1.0.8 in /usr/local/lib/python3.10/dist-packages (from pycaret) (1.1.0)\n",
            "Requirement already satisfied: imbalanced-learn>=0.8.1 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.10.1)\n",
            "Requirement already satisfied: category-encoders>=2.4.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (2.6.1)\n",
            "Requirement already satisfied: lightgbm>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (3.3.5)\n",
            "Requirement already satisfied: numba>=0.55.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.56.4)\n",
            "Requirement already satisfied: requests>=2.27.1 in /usr/local/lib/python3.10/dist-packages (from pycaret) (2.27.1)\n",
            "Requirement already satisfied: psutil>=5.9.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (5.9.5)\n",
            "Requirement already satisfied: markupsafe>=2.0.1 in /usr/local/lib/python3.10/dist-packages (from pycaret) (2.1.3)\n",
            "Requirement already satisfied: importlib-metadata>=4.12.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (6.8.0)\n",
            "Requirement already satisfied: nbformat>=4.2.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (5.9.0)\n",
            "Requirement already satisfied: cloudpickle in /usr/local/lib/python3.10/dist-packages (from pycaret) (2.2.1)\n",
            "Requirement already satisfied: deprecation>=2.1.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (2.1.0)\n",
            "Requirement already satisfied: xxhash in /usr/local/lib/python3.10/dist-packages (from pycaret) (3.2.0)\n",
            "Requirement already satisfied: matplotlib>=3.3.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (3.7.1)\n",
            "Requirement already satisfied: scikit-plot>=0.3.7 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.3.7)\n",
            "Requirement already satisfied: yellowbrick>=1.4 in /usr/local/lib/python3.10/dist-packages (from pycaret) (1.5)\n",
            "Requirement already satisfied: plotly>=5.0.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (5.13.1)\n",
            "Requirement already satisfied: kaleido>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.2.1)\n",
            "Requirement already satisfied: schemdraw==0.15 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.15)\n",
            "Requirement already satisfied: plotly-resampler>=0.8.3.1 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.8.3.2)\n",
            "Requirement already satisfied: statsmodels>=0.12.1 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.13.5)\n",
            "Requirement already satisfied: sktime!=0.17.1,!=0.17.2,!=0.18.0,>=0.16.1 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.20.0)\n",
            "Requirement already satisfied: tbats>=1.1.3 in /usr/local/lib/python3.10/dist-packages (from pycaret) (1.1.3)\n",
            "Requirement already satisfied: pmdarima!=1.8.1,<3.0.0,>=1.8.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (2.0.3)\n",
            "Requirement already satisfied: wurlitzer in /usr/local/lib/python3.10/dist-packages (from pycaret) (3.0.3)\n",
            "Requirement already satisfied: patsy>=0.5.1 in /usr/local/lib/python3.10/dist-packages (from category-encoders>=2.4.0->pycaret) (0.5.3)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from deprecation>=2.1.0->pycaret) (23.1)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn>=0.8.1->pycaret) (3.1.0)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.10/dist-packages (from importlib-metadata>=4.12.0->pycaret) (3.15.0)\n",
            "Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (67.7.2)\n",
            "Requirement already satisfied: jedi>=0.16 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (0.18.2)\n",
            "Requirement already satisfied: decorator in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (4.4.2)\n",
            "Requirement already satisfied: pickleshare in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (0.7.5)\n",
            "Requirement already satisfied: traitlets>=4.2 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (5.7.1)\n",
            "Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (3.0.38)\n",
            "Requirement already satisfied: pygments in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (2.14.0)\n",
            "Requirement already satisfied: backcall in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (0.2.0)\n",
            "Requirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (0.1.6)\n",
            "Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (4.8.0)\n",
            "Requirement already satisfied: ipykernel>=4.5.1 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.6.5->pycaret) (5.5.6)\n",
            "Requirement already satisfied: ipython-genutils~=0.2.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.6.5->pycaret) (0.2.0)\n",
            "Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.6.5->pycaret) (3.6.4)\n",
            "Requirement already satisfied: jupyterlab-widgets>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.6.5->pycaret) (3.0.7)\n",
            "Requirement already satisfied: wheel in /usr/local/lib/python3.10/dist-packages (from lightgbm>=3.0.0->pycaret) (0.40.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->pycaret) (1.1.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->pycaret) (0.11.0)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->pycaret) (4.40.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->pycaret) (1.4.4)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->pycaret) (8.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->pycaret) (3.1.0)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->pycaret) (2.8.2)\n",
            "Requirement already satisfied: fastjsonschema in /usr/local/lib/python3.10/dist-packages (from nbformat>=4.2.0->pycaret) (2.17.1)\n",
            "Requirement already satisfied: jsonschema>=2.6 in /usr/local/lib/python3.10/dist-packages (from nbformat>=4.2.0->pycaret) (4.3.3)\n",
            "Requirement already satisfied: jupyter-core in /usr/local/lib/python3.10/dist-packages (from nbformat>=4.2.0->pycaret) (5.3.1)\n",
            "Requirement already satisfied: llvmlite<0.40,>=0.39.0dev0 in /usr/local/lib/python3.10/dist-packages (from numba>=0.55.0->pycaret) (0.39.1)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas<2.0.0,>=1.3.0->pycaret) (2022.7.1)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly>=5.0.0->pycaret) (8.2.2)\n",
            "Requirement already satisfied: dash<3.0.0,>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly-resampler>=0.8.3.1->pycaret) (2.11.1)\n",
            "Requirement already satisfied: jupyter-dash>=0.4.2 in /usr/local/lib/python3.10/dist-packages (from plotly-resampler>=0.8.3.1->pycaret) (0.4.2)\n",
            "Requirement already satisfied: orjson<4.0.0,>=3.8.0 in /usr/local/lib/python3.10/dist-packages (from plotly-resampler>=0.8.3.1->pycaret) (3.9.2)\n",
            "Requirement already satisfied: trace-updater>=0.0.8 in /usr/local/lib/python3.10/dist-packages (from plotly-resampler>=0.8.3.1->pycaret) (0.0.9.1)\n",
            "Requirement already satisfied: Cython!=0.29.18,!=0.29.31,>=0.29 in /usr/local/lib/python3.10/dist-packages (from pmdarima!=1.8.1,<3.0.0,>=1.8.0->pycaret) (0.29.35)\n",
            "Requirement already satisfied: urllib3 in /usr/local/lib/python3.10/dist-packages (from pmdarima!=1.8.1,<3.0.0,>=1.8.0->pycaret) (1.26.16)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from pyod>=1.0.8->pycaret) (1.16.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.27.1->pycaret) (2023.5.7)\n",
            "Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.10/dist-packages (from requests>=2.27.1->pycaret) (2.0.12)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.27.1->pycaret) (3.4)\n",
            "Requirement already satisfied: deprecated>=1.2.13 in /usr/local/lib/python3.10/dist-packages (from sktime!=0.17.1,!=0.17.2,!=0.18.0,>=0.16.1->pycaret) (1.2.14)\n",
            "Requirement already satisfied: scikit-base<0.6.0 in /usr/local/lib/python3.10/dist-packages (from sktime!=0.17.1,!=0.17.2,!=0.18.0,>=0.16.1->pycaret) (0.5.0)\n",
            "Requirement already satisfied: Flask<2.3.0,>=1.0.4 in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.2.0->plotly-resampler>=0.8.3.1->pycaret) (2.2.5)\n",
            "Requirement already satisfied: Werkzeug<2.3.0 in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.2.0->plotly-resampler>=0.8.3.1->pycaret) (2.2.3)\n",
            "Requirement already satisfied: dash-html-components==2.0.0 in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.2.0->plotly-resampler>=0.8.3.1->pycaret) (2.0.0)\n",
            "Requirement already satisfied: dash-core-components==2.0.0 in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.2.0->plotly-resampler>=0.8.3.1->pycaret) (2.0.0)\n",
            "Requirement already satisfied: dash-table==5.0.0 in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.2.0->plotly-resampler>=0.8.3.1->pycaret) (5.0.0)\n",
            "Requirement already satisfied: typing-extensions>=4.1.1 in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.2.0->plotly-resampler>=0.8.3.1->pycaret) (4.7.1)\n",
            "Requirement already satisfied: retrying in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.2.0->plotly-resampler>=0.8.3.1->pycaret) (1.3.4)\n",
            "Requirement already satisfied: ansi2html in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.2.0->plotly-resampler>=0.8.3.1->pycaret) (1.8.0)\n",
            "Requirement already satisfied: nest-asyncio in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.2.0->plotly-resampler>=0.8.3.1->pycaret) (1.5.6)\n",
            "Requirement already satisfied: wrapt<2,>=1.10 in /usr/local/lib/python3.10/dist-packages (from deprecated>=1.2.13->sktime!=0.17.1,!=0.17.2,!=0.18.0,>=0.16.1->pycaret) (1.14.1)\n",
            "Requirement already satisfied: jupyter-client in /usr/local/lib/python3.10/dist-packages (from ipykernel>=4.5.1->ipywidgets>=7.6.5->pycaret) (6.1.12)\n",
            "Requirement already satisfied: tornado>=4.2 in /usr/local/lib/python3.10/dist-packages (from ipykernel>=4.5.1->ipywidgets>=7.6.5->pycaret) (6.3.1)\n",
            "Requirement already satisfied: parso<0.9.0,>=0.8.0 in /usr/local/lib/python3.10/dist-packages (from jedi>=0.16->ipython>=5.5.0->pycaret) (0.8.3)\n",
            "Requirement already satisfied: attrs>=17.4.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat>=4.2.0->pycaret) (23.1.0)\n",
            "Requirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat>=4.2.0->pycaret) (0.19.3)\n",
            "Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.10/dist-packages (from pexpect>4.3->ipython>=5.5.0->pycaret) (0.7.0)\n",
            "Requirement already satisfied: wcwidth in /usr/local/lib/python3.10/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=5.5.0->pycaret) (0.2.6)\n",
            "Requirement already satisfied: notebook>=4.4.1 in /usr/local/lib/python3.10/dist-packages (from widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (6.4.8)\n",
            "Requirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.10/dist-packages (from jupyter-core->nbformat>=4.2.0->pycaret) (3.7.0)\n",
            "Requirement already satisfied: itsdangerous>=2.0 in /usr/local/lib/python3.10/dist-packages (from Flask<2.3.0,>=1.0.4->dash<3.0.0,>=2.2.0->plotly-resampler>=0.8.3.1->pycaret) (2.1.2)\n",
            "Requirement already satisfied: click>=8.0 in /usr/local/lib/python3.10/dist-packages (from Flask<2.3.0,>=1.0.4->dash<3.0.0,>=2.2.0->plotly-resampler>=0.8.3.1->pycaret) (8.1.3)\n",
            "Requirement already satisfied: pyzmq>=17 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (23.2.1)\n",
            "Requirement already satisfied: argon2-cffi in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (21.3.0)\n",
            "Requirement already satisfied: nbconvert in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (6.5.4)\n",
            "Requirement already satisfied: Send2Trash>=1.8.0 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.8.2)\n",
            "Requirement already satisfied: terminado>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.17.1)\n",
            "Requirement already satisfied: prometheus-client in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.17.0)\n",
            "Requirement already satisfied: argon2-cffi-bindings in /usr/local/lib/python3.10/dist-packages (from argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (21.2.0)\n",
            "Requirement already satisfied: lxml in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (4.9.2)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (4.11.2)\n",
            "Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (6.0.0)\n",
            "Requirement already satisfied: defusedxml in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.7.1)\n",
            "Requirement already satisfied: entrypoints>=0.2.2 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.4)\n",
            "Requirement already satisfied: jupyterlab-pygments in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.2.2)\n",
            "Requirement already satisfied: mistune<2,>=0.8.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.8.4)\n",
            "Requirement already satisfied: nbclient>=0.5.0 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.8.0)\n",
            "Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.5.0)\n",
            "Requirement already satisfied: tinycss2 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.2.1)\n",
            "Requirement already satisfied: cffi>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.15.1)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4->nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (2.4.1)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach->nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.5.1)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (2.21)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "id": "8ef53722",
      "metadata": {
        "id": "8ef53722"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib as mpl\n",
        "import seaborn as sns\n",
        "from pycaret.datasets import get_data\n",
        "from pycaret.classification import *\n",
        "mpl.rcParams['figure.dpi'] = 300"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "35e6c2aa",
      "metadata": {
        "id": "35e6c2aa"
      },
      "source": [
        "### Loading the Dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "id": "bb833c85",
      "metadata": {
        "id": "bb833c85"
      },
      "outputs": [],
      "source": [
        "data = pd.read_csv('BRP.csv')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "id": "215520e3",
      "metadata": {
        "id": "215520e3",
        "outputId": "5cf3b14e-3c96-4c9f-c61b-63141b680917",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 29896 entries, 0 to 29895\n",
            "Data columns (total 43 columns):\n",
            " #   Column                                 Non-Null Count  Dtype  \n",
            "---  ------                                 --------------  -----  \n",
            " 0   Company                                29896 non-null  int64  \n",
            " 1   Return on Assets %                     29896 non-null  float64\n",
            " 2   Return on Capital %                    29896 non-null  float64\n",
            " 3   Return on Equity %                     29896 non-null  float64\n",
            " 4   Return on Common Equity %              29896 non-null  float64\n",
            " 5   Gross Margin %                         29896 non-null  float64\n",
            " 6   SG&A Margin %                          29896 non-null  float64\n",
            " 7   EBITDA Margin %                        29896 non-null  float64\n",
            " 8   EBITA Margin %                         29896 non-null  float64\n",
            " 9   EBIT Margin %                          29896 non-null  float64\n",
            " 10  Earnings from Cont. Ops Margin %       29896 non-null  float64\n",
            " 11  Net Income Margin %                    29896 non-null  float64\n",
            " 12  Net Income Avail. for Common Margin %  29896 non-null  float64\n",
            " 13  Normalized Net Income Margin %         29896 non-null  float64\n",
            " 14  Levered Free Cash Flow Margin %        29896 non-null  float64\n",
            " 15  Unlevered Free Cash Flow Margin %      29896 non-null  float64\n",
            " 16  Total Asset Turnover                   29896 non-null  float64\n",
            " 17  Fied Asset Turnover                    29896 non-null  float64\n",
            " 18  Accounts Receivable Turnover           29896 non-null  float64\n",
            " 19  Inventory Turnover                     29896 non-null  float64\n",
            " 20  Current Ratio                          29896 non-null  float64\n",
            " 21  Quick Ratio                            29896 non-null  float64\n",
            " 22  Cash from Ops. to Curr. Liab.          29896 non-null  float64\n",
            " 23  Avg. Days Sales Out.                   29896 non-null  float64\n",
            " 24  Avg. Days Inventory Out.               29896 non-null  float64\n",
            " 25  Avg. Days Payable Out.                 29896 non-null  float64\n",
            " 26  Avg. Cash Conversion Cycle             29896 non-null  float64\n",
            " 27  Total Debt/Equity                      29896 non-null  float64\n",
            " 28  Total Debt/Capital                     29896 non-null  float64\n",
            " 29  LT Debt/Equity                         29896 non-null  float64\n",
            " 30  LT Debt/Capital                        29896 non-null  float64\n",
            " 31  Total Liabilities/Total Assets         29896 non-null  float64\n",
            " 32  EBIT / Interest Ep.                    29896 non-null  float64\n",
            " 33  EBITDA / Interest Ep.                  29896 non-null  float64\n",
            " 34  (EBITDA-CAPE) / Interest Ep.           29896 non-null  float64\n",
            " 35  Total Debt/EBITDA                      29896 non-null  float64\n",
            " 36  Net Debt/EBITDA                        29896 non-null  float64\n",
            " 37  Total Debt/(EBITDA-CAPE)               29896 non-null  float64\n",
            " 38  Net Debt/(EBITDA-CAPE)                 29896 non-null  float64\n",
            " 39  Altman Z Score                         29896 non-null  float64\n",
            " 40  Cash flow to Net Debt                  29896 non-null  float64\n",
            " 41  Total Debt to Total Assets             29896 non-null  float64\n",
            " 42  BR                                     29896 non-null  int64  \n",
            "dtypes: float64(41), int64(2)\n",
            "memory usage: 9.8 MB\n"
          ]
        }
      ],
      "source": [
        "data.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d79a72db",
      "metadata": {
        "id": "d79a72db"
      },
      "source": [
        "### Exploratory Data Analysis"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "b0894ddd",
      "metadata": {
        "id": "b0894ddd"
      },
      "outputs": [],
      "source": [
        "# sns.pairplot(data, hue='BR')\n",
        "# plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_final = data.drop(columns=\"Company\", inplace=False)"
      ],
      "metadata": {
        "id": "FMB-11gTb0FW"
      },
      "id": "FMB-11gTb0FW",
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_final.head()"
      ],
      "metadata": {
        "id": "UrObztmodem0",
        "outputId": "08dc760e-d948-452f-ea59-c094e5cac28d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        }
      },
      "id": "UrObztmodem0",
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Return on Assets %  Return on Capital %  Return on Equity %  \\\n",
              "0              -0.005               -0.020               0.000   \n",
              "1               0.039                0.047               0.121   \n",
              "2              -0.135               -0.176              -0.621   \n",
              "3              -0.043               -0.043              -0.059   \n",
              "4               0.119                0.141               0.200   \n",
              "\n",
              "   Return on Common Equity %  Gross Margin %  SG&A Margin %  EBITDA Margin %  \\\n",
              "0                      0.000           0.152          0.155            0.023   \n",
              "1                      0.121           0.135          0.059            0.154   \n",
              "2                     -0.618           0.186          0.716           -0.350   \n",
              "3                     -0.059           0.000          0.000            0.000   \n",
              "4                      0.200           0.300          0.056            0.273   \n",
              "\n",
              "   EBITA Margin %  EBIT Margin %  Earnings from Cont. Ops Margin %  ...  \\\n",
              "0          -0.003         -0.003                            -0.020  ...   \n",
              "1           0.080          0.071                             0.016  ...   \n",
              "2          -0.499         -0.559                            -0.969  ...   \n",
              "3           0.000          0.000                             0.000  ...   \n",
              "4           0.231          0.231                             0.196  ...   \n",
              "\n",
              "   EBITDA / Interest Ep.  (EBITDA-CAPE) / Interest Ep.  Total Debt/EBITDA  \\\n",
              "0                    2.3                           1.6                4.4   \n",
              "1                    3.3                           2.5                5.3   \n",
              "2                    0.0                           0.0                0.0   \n",
              "3                    0.0                           0.0                0.0   \n",
              "4                   54.1                           0.0                0.1   \n",
              "\n",
              "   Net Debt/EBITDA  Total Debt/(EBITDA-CAPE)  Net Debt/(EBITDA-CAPE)  \\\n",
              "0              4.0                       6.5                     5.9   \n",
              "1              5.3                       6.8                     6.8   \n",
              "2              0.0                       0.0                     0.0   \n",
              "3              0.0                       0.0                     0.0   \n",
              "4              0.0                       0.0                     0.0   \n",
              "\n",
              "   Altman Z Score  Cash flow to Net Debt  Total Debt to Total Assets  BR  \n",
              "0           -3.82               0.880435                     -0.0220   0  \n",
              "1            0.00               0.004901                      0.2067   0  \n",
              "2           -2.90               0.000000                      0.0000   0  \n",
              "3            0.00               0.000000                      0.0000   0  \n",
              "4            6.53               0.000000                      0.0119   0  \n",
              "\n",
              "[5 rows x 42 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3f9bb14f-9f5d-4f2a-a733-74fd859adba5\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Return on Assets %</th>\n",
              "      <th>Return on Capital %</th>\n",
              "      <th>Return on Equity %</th>\n",
              "      <th>Return on Common Equity %</th>\n",
              "      <th>Gross Margin %</th>\n",
              "      <th>SG&amp;A Margin %</th>\n",
              "      <th>EBITDA Margin %</th>\n",
              "      <th>EBITA Margin %</th>\n",
              "      <th>EBIT Margin %</th>\n",
              "      <th>Earnings from Cont. Ops Margin %</th>\n",
              "      <th>...</th>\n",
              "      <th>EBITDA / Interest Ep.</th>\n",
              "      <th>(EBITDA-CAPE) / Interest Ep.</th>\n",
              "      <th>Total Debt/EBITDA</th>\n",
              "      <th>Net Debt/EBITDA</th>\n",
              "      <th>Total Debt/(EBITDA-CAPE)</th>\n",
              "      <th>Net Debt/(EBITDA-CAPE)</th>\n",
              "      <th>Altman Z Score</th>\n",
              "      <th>Cash flow to Net Debt</th>\n",
              "      <th>Total Debt to Total Assets</th>\n",
              "      <th>BR</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.005</td>\n",
              "      <td>-0.020</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.152</td>\n",
              "      <td>0.155</td>\n",
              "      <td>0.023</td>\n",
              "      <td>-0.003</td>\n",
              "      <td>-0.003</td>\n",
              "      <td>-0.020</td>\n",
              "      <td>...</td>\n",
              "      <td>2.3</td>\n",
              "      <td>1.6</td>\n",
              "      <td>4.4</td>\n",
              "      <td>4.0</td>\n",
              "      <td>6.5</td>\n",
              "      <td>5.9</td>\n",
              "      <td>-3.82</td>\n",
              "      <td>0.880435</td>\n",
              "      <td>-0.0220</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.039</td>\n",
              "      <td>0.047</td>\n",
              "      <td>0.121</td>\n",
              "      <td>0.121</td>\n",
              "      <td>0.135</td>\n",
              "      <td>0.059</td>\n",
              "      <td>0.154</td>\n",
              "      <td>0.080</td>\n",
              "      <td>0.071</td>\n",
              "      <td>0.016</td>\n",
              "      <td>...</td>\n",
              "      <td>3.3</td>\n",
              "      <td>2.5</td>\n",
              "      <td>5.3</td>\n",
              "      <td>5.3</td>\n",
              "      <td>6.8</td>\n",
              "      <td>6.8</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.004901</td>\n",
              "      <td>0.2067</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.135</td>\n",
              "      <td>-0.176</td>\n",
              "      <td>-0.621</td>\n",
              "      <td>-0.618</td>\n",
              "      <td>0.186</td>\n",
              "      <td>0.716</td>\n",
              "      <td>-0.350</td>\n",
              "      <td>-0.499</td>\n",
              "      <td>-0.559</td>\n",
              "      <td>-0.969</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-2.90</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.043</td>\n",
              "      <td>-0.043</td>\n",
              "      <td>-0.059</td>\n",
              "      <td>-0.059</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>0.000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.119</td>\n",
              "      <td>0.141</td>\n",
              "      <td>0.200</td>\n",
              "      <td>0.200</td>\n",
              "      <td>0.300</td>\n",
              "      <td>0.056</td>\n",
              "      <td>0.273</td>\n",
              "      <td>0.231</td>\n",
              "      <td>0.231</td>\n",
              "      <td>0.196</td>\n",
              "      <td>...</td>\n",
              "      <td>54.1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.53</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0119</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 42 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3f9bb14f-9f5d-4f2a-a733-74fd859adba5')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3f9bb14f-9f5d-4f2a-a733-74fd859adba5 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3f9bb14f-9f5d-4f2a-a733-74fd859adba5');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b53ccdb4",
      "metadata": {
        "id": "b53ccdb4"
      },
      "source": [
        "### Initializing the PyCaret Environment"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "id": "49685940",
      "metadata": {
        "tags": [],
        "id": "49685940",
        "outputId": "8f3ad21e-4320-4d77-e03b-9be9b846e82a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 708
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7f3450bc9750>"
            ],
            "text/html": [
              "<style type=\"text/css\">\n",
              "#T_ebdaf_row8_col1, #T_ebdaf_row12_col1 {\n",
              "  background-color: lightgreen;\n",
              "}\n",
              "</style>\n",
              "<table id=\"T_ebdaf\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th class=\"blank level0\" >&nbsp;</th>\n",
              "      <th id=\"T_ebdaf_level0_col0\" class=\"col_heading level0 col0\" >Description</th>\n",
              "      <th id=\"T_ebdaf_level0_col1\" class=\"col_heading level0 col1\" >Value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th id=\"T_ebdaf_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
              "      <td id=\"T_ebdaf_row0_col0\" class=\"data row0 col0\" >Session id</td>\n",
              "      <td id=\"T_ebdaf_row0_col1\" class=\"data row0 col1\" >1234</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_ebdaf_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
              "      <td id=\"T_ebdaf_row1_col0\" class=\"data row1 col0\" >Target</td>\n",
              "      <td id=\"T_ebdaf_row1_col1\" class=\"data row1 col1\" >BR</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_ebdaf_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
              "      <td id=\"T_ebdaf_row2_col0\" class=\"data row2 col0\" >Target type</td>\n",
              "      <td id=\"T_ebdaf_row2_col1\" class=\"data row2 col1\" >Binary</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_ebdaf_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
              "      <td id=\"T_ebdaf_row3_col0\" class=\"data row3 col0\" >Original data shape</td>\n",
              "      <td id=\"T_ebdaf_row3_col1\" class=\"data row3 col1\" >(29896, 42)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_ebdaf_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
              "      <td id=\"T_ebdaf_row4_col0\" class=\"data row4 col0\" >Transformed data shape</td>\n",
              "      <td id=\"T_ebdaf_row4_col1\" class=\"data row4 col1\" >(29896, 42)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_ebdaf_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
              "      <td id=\"T_ebdaf_row5_col0\" class=\"data row5 col0\" >Transformed train set shape</td>\n",
              "      <td id=\"T_ebdaf_row5_col1\" class=\"data row5 col1\" >(23916, 42)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_ebdaf_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
              "      <td id=\"T_ebdaf_row6_col0\" class=\"data row6 col0\" >Transformed test set shape</td>\n",
              "      <td id=\"T_ebdaf_row6_col1\" class=\"data row6 col1\" >(5980, 42)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_ebdaf_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
              "      <td id=\"T_ebdaf_row7_col0\" class=\"data row7 col0\" >Numeric features</td>\n",
              "      <td id=\"T_ebdaf_row7_col1\" class=\"data row7 col1\" >41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_ebdaf_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
              "      <td id=\"T_ebdaf_row8_col0\" class=\"data row8 col0\" >Preprocess</td>\n",
              "      <td id=\"T_ebdaf_row8_col1\" class=\"data row8 col1\" >True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_ebdaf_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
              "      <td id=\"T_ebdaf_row9_col0\" class=\"data row9 col0\" >Imputation type</td>\n",
              "      <td id=\"T_ebdaf_row9_col1\" class=\"data row9 col1\" >simple</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_ebdaf_level0_row10\" class=\"row_heading level0 row10\" >10</th>\n",
              "      <td id=\"T_ebdaf_row10_col0\" class=\"data row10 col0\" >Numeric imputation</td>\n",
              "      <td id=\"T_ebdaf_row10_col1\" class=\"data row10 col1\" >mean</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_ebdaf_level0_row11\" class=\"row_heading level0 row11\" >11</th>\n",
              "      <td id=\"T_ebdaf_row11_col0\" class=\"data row11 col0\" >Categorical imputation</td>\n",
              "      <td id=\"T_ebdaf_row11_col1\" class=\"data row11 col1\" >mode</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_ebdaf_level0_row12\" class=\"row_heading level0 row12\" >12</th>\n",
              "      <td id=\"T_ebdaf_row12_col0\" class=\"data row12 col0\" >Normalize</td>\n",
              "      <td id=\"T_ebdaf_row12_col1\" class=\"data row12 col1\" >True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_ebdaf_level0_row13\" class=\"row_heading level0 row13\" >13</th>\n",
              "      <td id=\"T_ebdaf_row13_col0\" class=\"data row13 col0\" >Normalize method</td>\n",
              "      <td id=\"T_ebdaf_row13_col1\" class=\"data row13 col1\" >zscore</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_ebdaf_level0_row14\" class=\"row_heading level0 row14\" >14</th>\n",
              "      <td id=\"T_ebdaf_row14_col0\" class=\"data row14 col0\" >Fold Generator</td>\n",
              "      <td id=\"T_ebdaf_row14_col1\" class=\"data row14 col1\" >StratifiedKFold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_ebdaf_level0_row15\" class=\"row_heading level0 row15\" >15</th>\n",
              "      <td id=\"T_ebdaf_row15_col0\" class=\"data row15 col0\" >Fold Number</td>\n",
              "      <td id=\"T_ebdaf_row15_col1\" class=\"data row15 col1\" >10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_ebdaf_level0_row16\" class=\"row_heading level0 row16\" >16</th>\n",
              "      <td id=\"T_ebdaf_row16_col0\" class=\"data row16 col0\" >CPU Jobs</td>\n",
              "      <td id=\"T_ebdaf_row16_col1\" class=\"data row16 col1\" >-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_ebdaf_level0_row17\" class=\"row_heading level0 row17\" >17</th>\n",
              "      <td id=\"T_ebdaf_row17_col0\" class=\"data row17 col0\" >Use GPU</td>\n",
              "      <td id=\"T_ebdaf_row17_col1\" class=\"data row17 col1\" >False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_ebdaf_level0_row18\" class=\"row_heading level0 row18\" >18</th>\n",
              "      <td id=\"T_ebdaf_row18_col0\" class=\"data row18 col0\" >Log Experiment</td>\n",
              "      <td id=\"T_ebdaf_row18_col1\" class=\"data row18 col1\" >False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_ebdaf_level0_row19\" class=\"row_heading level0 row19\" >19</th>\n",
              "      <td id=\"T_ebdaf_row19_col0\" class=\"data row19 col0\" >Experiment Name</td>\n",
              "      <td id=\"T_ebdaf_row19_col1\" class=\"data row19 col1\" >clf-default-name</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_ebdaf_level0_row20\" class=\"row_heading level0 row20\" >20</th>\n",
              "      <td id=\"T_ebdaf_row20_col0\" class=\"data row20 col0\" >USI</td>\n",
              "      <td id=\"T_ebdaf_row20_col1\" class=\"data row20 col1\" >f3c2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "classf = setup(data = data_final, target = 'BR', train_size = 0.8,\n",
        "               normalize = True, session_id = 1234)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b26f88b5",
      "metadata": {
        "id": "b26f88b5"
      },
      "source": [
        "### Comparing Classification Models"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "id": "03ce6525",
      "metadata": {
        "tags": [],
        "id": "03ce6525",
        "outputId": "32dae363-d2b8-44ac-aea5-e26b1834443c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 681,
          "referenced_widgets": [
            "9ab3aeda749046dc973ffa5c2947eac6",
            "fd546bf054ea440da4b0a91910cafca4",
            "4feaa63e0a1b4a79bd01078918eebd86",
            "4cb7a3db95fa417fb1328f765a5d3548",
            "65b9a8cf3f5549f6bb1848994dc2b228",
            "1b1716eda31349c7bd7ad4fd86902e19",
            "6f220b9166a344deb2f1085518f38a53",
            "7c33a76c0a9c46b58a9a68bc1815798e",
            "8234009defc44aecb1f304ff4ad54b67",
            "36ebf55abc874b93bb099cb8c843636b",
            "97ca2682174549c9a936fd5aa198d5a8"
          ]
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": []
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7f34cb6bff40>"
            ],
            "text/html": [
              "<style type=\"text/css\">\n",
              "#T_d62fb th {\n",
              "  text-align: left;\n",
              "}\n",
              "#T_d62fb_row0_col0, #T_d62fb_row0_col4, #T_d62fb_row1_col0, #T_d62fb_row1_col1, #T_d62fb_row1_col2, #T_d62fb_row1_col3, #T_d62fb_row1_col5, #T_d62fb_row1_col6, #T_d62fb_row1_col7, #T_d62fb_row2_col0, #T_d62fb_row2_col1, #T_d62fb_row2_col2, #T_d62fb_row2_col3, #T_d62fb_row2_col4, #T_d62fb_row2_col5, #T_d62fb_row2_col6, #T_d62fb_row2_col7, #T_d62fb_row3_col0, #T_d62fb_row3_col1, #T_d62fb_row3_col2, #T_d62fb_row3_col3, #T_d62fb_row3_col4, #T_d62fb_row3_col5, #T_d62fb_row3_col6, #T_d62fb_row3_col7, #T_d62fb_row4_col0, #T_d62fb_row4_col1, #T_d62fb_row4_col2, #T_d62fb_row4_col3, #T_d62fb_row4_col4, #T_d62fb_row4_col5, #T_d62fb_row4_col6, #T_d62fb_row4_col7, #T_d62fb_row5_col0, #T_d62fb_row5_col1, #T_d62fb_row5_col2, #T_d62fb_row5_col3, #T_d62fb_row5_col4, #T_d62fb_row5_col5, #T_d62fb_row5_col6, #T_d62fb_row5_col7, #T_d62fb_row6_col0, #T_d62fb_row6_col1, #T_d62fb_row6_col2, #T_d62fb_row6_col3, #T_d62fb_row6_col4, #T_d62fb_row6_col5, #T_d62fb_row6_col6, #T_d62fb_row6_col7, #T_d62fb_row7_col0, #T_d62fb_row7_col1, #T_d62fb_row7_col2, #T_d62fb_row7_col3, #T_d62fb_row7_col4, #T_d62fb_row7_col5, #T_d62fb_row7_col6, #T_d62fb_row7_col7, #T_d62fb_row8_col0, #T_d62fb_row8_col1, #T_d62fb_row8_col2, #T_d62fb_row8_col3, #T_d62fb_row8_col4, #T_d62fb_row8_col5, #T_d62fb_row8_col6, #T_d62fb_row8_col7, #T_d62fb_row9_col0, #T_d62fb_row9_col1, #T_d62fb_row9_col2, #T_d62fb_row9_col3, #T_d62fb_row9_col4, #T_d62fb_row9_col5, #T_d62fb_row9_col6, #T_d62fb_row9_col7, #T_d62fb_row10_col0, #T_d62fb_row10_col1, #T_d62fb_row10_col2, #T_d62fb_row10_col3, #T_d62fb_row10_col4, #T_d62fb_row10_col5, #T_d62fb_row10_col6, #T_d62fb_row10_col7, #T_d62fb_row11_col0, #T_d62fb_row11_col1, #T_d62fb_row11_col2, #T_d62fb_row11_col3, #T_d62fb_row11_col4, #T_d62fb_row11_col5, #T_d62fb_row11_col6, #T_d62fb_row11_col7, #T_d62fb_row12_col0, #T_d62fb_row12_col1, #T_d62fb_row12_col2, #T_d62fb_row12_col3, #T_d62fb_row12_col4, #T_d62fb_row12_col5, #T_d62fb_row12_col6, #T_d62fb_row12_col7, #T_d62fb_row13_col0, #T_d62fb_row13_col1, #T_d62fb_row13_col2, #T_d62fb_row13_col3, #T_d62fb_row13_col4, #T_d62fb_row13_col5, #T_d62fb_row13_col6, #T_d62fb_row13_col7, #T_d62fb_row14_col0, #T_d62fb_row14_col1, #T_d62fb_row14_col2, #T_d62fb_row14_col3, #T_d62fb_row14_col4, #T_d62fb_row14_col5, #T_d62fb_row14_col6, #T_d62fb_row14_col7 {\n",
              "  text-align: left;\n",
              "}\n",
              "#T_d62fb_row0_col1, #T_d62fb_row0_col2, #T_d62fb_row0_col3, #T_d62fb_row0_col5, #T_d62fb_row0_col6, #T_d62fb_row0_col7, #T_d62fb_row1_col4 {\n",
              "  text-align: left;\n",
              "  background-color: yellow;\n",
              "}\n",
              "#T_d62fb_row0_col8, #T_d62fb_row1_col8, #T_d62fb_row2_col8, #T_d62fb_row3_col8, #T_d62fb_row4_col8, #T_d62fb_row5_col8, #T_d62fb_row6_col8, #T_d62fb_row7_col8, #T_d62fb_row8_col8, #T_d62fb_row9_col8, #T_d62fb_row10_col8, #T_d62fb_row12_col8, #T_d62fb_row13_col8, #T_d62fb_row14_col8 {\n",
              "  text-align: left;\n",
              "  background-color: lightgrey;\n",
              "}\n",
              "#T_d62fb_row11_col8 {\n",
              "  text-align: left;\n",
              "  background-color: yellow;\n",
              "  background-color: lightgrey;\n",
              "}\n",
              "</style>\n",
              "<table id=\"T_d62fb\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th class=\"blank level0\" >&nbsp;</th>\n",
              "      <th id=\"T_d62fb_level0_col0\" class=\"col_heading level0 col0\" >Model</th>\n",
              "      <th id=\"T_d62fb_level0_col1\" class=\"col_heading level0 col1\" >Accuracy</th>\n",
              "      <th id=\"T_d62fb_level0_col2\" class=\"col_heading level0 col2\" >AUC</th>\n",
              "      <th id=\"T_d62fb_level0_col3\" class=\"col_heading level0 col3\" >Recall</th>\n",
              "      <th id=\"T_d62fb_level0_col4\" class=\"col_heading level0 col4\" >Prec.</th>\n",
              "      <th id=\"T_d62fb_level0_col5\" class=\"col_heading level0 col5\" >F1</th>\n",
              "      <th id=\"T_d62fb_level0_col6\" class=\"col_heading level0 col6\" >Kappa</th>\n",
              "      <th id=\"T_d62fb_level0_col7\" class=\"col_heading level0 col7\" >MCC</th>\n",
              "      <th id=\"T_d62fb_level0_col8\" class=\"col_heading level0 col8\" >TT (Sec)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th id=\"T_d62fb_level0_row0\" class=\"row_heading level0 row0\" >et</th>\n",
              "      <td id=\"T_d62fb_row0_col0\" class=\"data row0 col0\" >Extra Trees Classifier</td>\n",
              "      <td id=\"T_d62fb_row0_col1\" class=\"data row0 col1\" >0.9543</td>\n",
              "      <td id=\"T_d62fb_row0_col2\" class=\"data row0 col2\" >0.9924</td>\n",
              "      <td id=\"T_d62fb_row0_col3\" class=\"data row0 col3\" >0.9775</td>\n",
              "      <td id=\"T_d62fb_row0_col4\" class=\"data row0 col4\" >0.9342</td>\n",
              "      <td id=\"T_d62fb_row0_col5\" class=\"data row0 col5\" >0.9554</td>\n",
              "      <td id=\"T_d62fb_row0_col6\" class=\"data row0 col6\" >0.9086</td>\n",
              "      <td id=\"T_d62fb_row0_col7\" class=\"data row0 col7\" >0.9096</td>\n",
              "      <td id=\"T_d62fb_row0_col8\" class=\"data row0 col8\" >0.3110</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d62fb_level0_row1\" class=\"row_heading level0 row1\" >xgboost</th>\n",
              "      <td id=\"T_d62fb_row1_col0\" class=\"data row1 col0\" >Extreme Gradient Boosting</td>\n",
              "      <td id=\"T_d62fb_row1_col1\" class=\"data row1 col1\" >0.9509</td>\n",
              "      <td id=\"T_d62fb_row1_col2\" class=\"data row1 col2\" >0.9907</td>\n",
              "      <td id=\"T_d62fb_row1_col3\" class=\"data row1 col3\" >0.9655</td>\n",
              "      <td id=\"T_d62fb_row1_col4\" class=\"data row1 col4\" >0.9382</td>\n",
              "      <td id=\"T_d62fb_row1_col5\" class=\"data row1 col5\" >0.9516</td>\n",
              "      <td id=\"T_d62fb_row1_col6\" class=\"data row1 col6\" >0.9018</td>\n",
              "      <td id=\"T_d62fb_row1_col7\" class=\"data row1 col7\" >0.9022</td>\n",
              "      <td id=\"T_d62fb_row1_col8\" class=\"data row1 col8\" >1.2620</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d62fb_level0_row2\" class=\"row_heading level0 row2\" >rf</th>\n",
              "      <td id=\"T_d62fb_row2_col0\" class=\"data row2 col0\" >Random Forest Classifier</td>\n",
              "      <td id=\"T_d62fb_row2_col1\" class=\"data row2 col1\" >0.9441</td>\n",
              "      <td id=\"T_d62fb_row2_col2\" class=\"data row2 col2\" >0.9878</td>\n",
              "      <td id=\"T_d62fb_row2_col3\" class=\"data row2 col3\" >0.9638</td>\n",
              "      <td id=\"T_d62fb_row2_col4\" class=\"data row2 col4\" >0.9274</td>\n",
              "      <td id=\"T_d62fb_row2_col5\" class=\"data row2 col5\" >0.9452</td>\n",
              "      <td id=\"T_d62fb_row2_col6\" class=\"data row2 col6\" >0.8882</td>\n",
              "      <td id=\"T_d62fb_row2_col7\" class=\"data row2 col7\" >0.8890</td>\n",
              "      <td id=\"T_d62fb_row2_col8\" class=\"data row2 col8\" >0.5120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d62fb_level0_row3\" class=\"row_heading level0 row3\" >lightgbm</th>\n",
              "      <td id=\"T_d62fb_row3_col0\" class=\"data row3 col0\" >Light Gradient Boosting Machine</td>\n",
              "      <td id=\"T_d62fb_row3_col1\" class=\"data row3 col1\" >0.9336</td>\n",
              "      <td id=\"T_d62fb_row3_col2\" class=\"data row3 col2\" >0.9846</td>\n",
              "      <td id=\"T_d62fb_row3_col3\" class=\"data row3 col3\" >0.9399</td>\n",
              "      <td id=\"T_d62fb_row3_col4\" class=\"data row3 col4\" >0.9283</td>\n",
              "      <td id=\"T_d62fb_row3_col5\" class=\"data row3 col5\" >0.9340</td>\n",
              "      <td id=\"T_d62fb_row3_col6\" class=\"data row3 col6\" >0.8671</td>\n",
              "      <td id=\"T_d62fb_row3_col7\" class=\"data row3 col7\" >0.8673</td>\n",
              "      <td id=\"T_d62fb_row3_col8\" class=\"data row3 col8\" >0.2480</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d62fb_level0_row4\" class=\"row_heading level0 row4\" >dt</th>\n",
              "      <td id=\"T_d62fb_row4_col0\" class=\"data row4 col0\" >Decision Tree Classifier</td>\n",
              "      <td id=\"T_d62fb_row4_col1\" class=\"data row4 col1\" >0.8867</td>\n",
              "      <td id=\"T_d62fb_row4_col2\" class=\"data row4 col2\" >0.8887</td>\n",
              "      <td id=\"T_d62fb_row4_col3\" class=\"data row4 col3\" >0.9018</td>\n",
              "      <td id=\"T_d62fb_row4_col4\" class=\"data row4 col4\" >0.8754</td>\n",
              "      <td id=\"T_d62fb_row4_col5\" class=\"data row4 col5\" >0.8884</td>\n",
              "      <td id=\"T_d62fb_row4_col6\" class=\"data row4 col6\" >0.7735</td>\n",
              "      <td id=\"T_d62fb_row4_col7\" class=\"data row4 col7\" >0.7739</td>\n",
              "      <td id=\"T_d62fb_row4_col8\" class=\"data row4 col8\" >0.3010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d62fb_level0_row5\" class=\"row_heading level0 row5\" >gbc</th>\n",
              "      <td id=\"T_d62fb_row5_col0\" class=\"data row5 col0\" >Gradient Boosting Classifier</td>\n",
              "      <td id=\"T_d62fb_row5_col1\" class=\"data row5 col1\" >0.8662</td>\n",
              "      <td id=\"T_d62fb_row5_col2\" class=\"data row5 col2\" >0.9464</td>\n",
              "      <td id=\"T_d62fb_row5_col3\" class=\"data row5 col3\" >0.8772</td>\n",
              "      <td id=\"T_d62fb_row5_col4\" class=\"data row5 col4\" >0.8584</td>\n",
              "      <td id=\"T_d62fb_row5_col5\" class=\"data row5 col5\" >0.8677</td>\n",
              "      <td id=\"T_d62fb_row5_col6\" class=\"data row5 col6\" >0.7325</td>\n",
              "      <td id=\"T_d62fb_row5_col7\" class=\"data row5 col7\" >0.7327</td>\n",
              "      <td id=\"T_d62fb_row5_col8\" class=\"data row5 col8\" >2.3200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d62fb_level0_row6\" class=\"row_heading level0 row6\" >knn</th>\n",
              "      <td id=\"T_d62fb_row6_col0\" class=\"data row6 col0\" >K Neighbors Classifier</td>\n",
              "      <td id=\"T_d62fb_row6_col1\" class=\"data row6 col1\" >0.8648</td>\n",
              "      <td id=\"T_d62fb_row6_col2\" class=\"data row6 col2\" >0.9408</td>\n",
              "      <td id=\"T_d62fb_row6_col3\" class=\"data row6 col3\" >0.9621</td>\n",
              "      <td id=\"T_d62fb_row6_col4\" class=\"data row6 col4\" >0.8055</td>\n",
              "      <td id=\"T_d62fb_row6_col5\" class=\"data row6 col5\" >0.8768</td>\n",
              "      <td id=\"T_d62fb_row6_col6\" class=\"data row6 col6\" >0.7296</td>\n",
              "      <td id=\"T_d62fb_row6_col7\" class=\"data row6 col7\" >0.7439</td>\n",
              "      <td id=\"T_d62fb_row6_col8\" class=\"data row6 col8\" >0.2830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d62fb_level0_row7\" class=\"row_heading level0 row7\" >ada</th>\n",
              "      <td id=\"T_d62fb_row7_col0\" class=\"data row7 col0\" >Ada Boost Classifier</td>\n",
              "      <td id=\"T_d62fb_row7_col1\" class=\"data row7 col1\" >0.8271</td>\n",
              "      <td id=\"T_d62fb_row7_col2\" class=\"data row7 col2\" >0.9120</td>\n",
              "      <td id=\"T_d62fb_row7_col3\" class=\"data row7 col3\" >0.8316</td>\n",
              "      <td id=\"T_d62fb_row7_col4\" class=\"data row7 col4\" >0.8243</td>\n",
              "      <td id=\"T_d62fb_row7_col5\" class=\"data row7 col5\" >0.8279</td>\n",
              "      <td id=\"T_d62fb_row7_col6\" class=\"data row7 col6\" >0.6542</td>\n",
              "      <td id=\"T_d62fb_row7_col7\" class=\"data row7 col7\" >0.6543</td>\n",
              "      <td id=\"T_d62fb_row7_col8\" class=\"data row7 col8\" >0.5080</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d62fb_level0_row8\" class=\"row_heading level0 row8\" >lr</th>\n",
              "      <td id=\"T_d62fb_row8_col0\" class=\"data row8 col0\" >Logistic Regression</td>\n",
              "      <td id=\"T_d62fb_row8_col1\" class=\"data row8 col1\" >0.7013</td>\n",
              "      <td id=\"T_d62fb_row8_col2\" class=\"data row8 col2\" >0.7648</td>\n",
              "      <td id=\"T_d62fb_row8_col3\" class=\"data row8 col3\" >0.8045</td>\n",
              "      <td id=\"T_d62fb_row8_col4\" class=\"data row8 col4\" >0.6670</td>\n",
              "      <td id=\"T_d62fb_row8_col5\" class=\"data row8 col5\" >0.7292</td>\n",
              "      <td id=\"T_d62fb_row8_col6\" class=\"data row8 col6\" >0.4026</td>\n",
              "      <td id=\"T_d62fb_row8_col7\" class=\"data row8 col7\" >0.4118</td>\n",
              "      <td id=\"T_d62fb_row8_col8\" class=\"data row8 col8\" >0.3140</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d62fb_level0_row9\" class=\"row_heading level0 row9\" >svm</th>\n",
              "      <td id=\"T_d62fb_row9_col0\" class=\"data row9 col0\" >SVM - Linear Kernel</td>\n",
              "      <td id=\"T_d62fb_row9_col1\" class=\"data row9 col1\" >0.6822</td>\n",
              "      <td id=\"T_d62fb_row9_col2\" class=\"data row9 col2\" >0.0000</td>\n",
              "      <td id=\"T_d62fb_row9_col3\" class=\"data row9 col3\" >0.8300</td>\n",
              "      <td id=\"T_d62fb_row9_col4\" class=\"data row9 col4\" >0.6428</td>\n",
              "      <td id=\"T_d62fb_row9_col5\" class=\"data row9 col5\" >0.7232</td>\n",
              "      <td id=\"T_d62fb_row9_col6\" class=\"data row9 col6\" >0.3644</td>\n",
              "      <td id=\"T_d62fb_row9_col7\" class=\"data row9 col7\" >0.3831</td>\n",
              "      <td id=\"T_d62fb_row9_col8\" class=\"data row9 col8\" >0.0730</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d62fb_level0_row10\" class=\"row_heading level0 row10\" >lda</th>\n",
              "      <td id=\"T_d62fb_row10_col0\" class=\"data row10 col0\" >Linear Discriminant Analysis</td>\n",
              "      <td id=\"T_d62fb_row10_col1\" class=\"data row10 col1\" >0.6727</td>\n",
              "      <td id=\"T_d62fb_row10_col2\" class=\"data row10 col2\" >0.7226</td>\n",
              "      <td id=\"T_d62fb_row10_col3\" class=\"data row10 col3\" >0.8002</td>\n",
              "      <td id=\"T_d62fb_row10_col4\" class=\"data row10 col4\" >0.6381</td>\n",
              "      <td id=\"T_d62fb_row10_col5\" class=\"data row10 col5\" >0.7096</td>\n",
              "      <td id=\"T_d62fb_row10_col6\" class=\"data row10 col6\" >0.3455</td>\n",
              "      <td id=\"T_d62fb_row10_col7\" class=\"data row10 col7\" >0.3579</td>\n",
              "      <td id=\"T_d62fb_row10_col8\" class=\"data row10 col8\" >0.0710</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d62fb_level0_row11\" class=\"row_heading level0 row11\" >ridge</th>\n",
              "      <td id=\"T_d62fb_row11_col0\" class=\"data row11 col0\" >Ridge Classifier</td>\n",
              "      <td id=\"T_d62fb_row11_col1\" class=\"data row11 col1\" >0.6715</td>\n",
              "      <td id=\"T_d62fb_row11_col2\" class=\"data row11 col2\" >0.0000</td>\n",
              "      <td id=\"T_d62fb_row11_col3\" class=\"data row11 col3\" >0.7985</td>\n",
              "      <td id=\"T_d62fb_row11_col4\" class=\"data row11 col4\" >0.6373</td>\n",
              "      <td id=\"T_d62fb_row11_col5\" class=\"data row11 col5\" >0.7084</td>\n",
              "      <td id=\"T_d62fb_row11_col6\" class=\"data row11 col6\" >0.3430</td>\n",
              "      <td id=\"T_d62fb_row11_col7\" class=\"data row11 col7\" >0.3553</td>\n",
              "      <td id=\"T_d62fb_row11_col8\" class=\"data row11 col8\" >0.0450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d62fb_level0_row12\" class=\"row_heading level0 row12\" >qda</th>\n",
              "      <td id=\"T_d62fb_row12_col0\" class=\"data row12 col0\" >Quadratic Discriminant Analysis</td>\n",
              "      <td id=\"T_d62fb_row12_col1\" class=\"data row12 col1\" >0.5374</td>\n",
              "      <td id=\"T_d62fb_row12_col2\" class=\"data row12 col2\" >0.6268</td>\n",
              "      <td id=\"T_d62fb_row12_col3\" class=\"data row12 col3\" >0.9556</td>\n",
              "      <td id=\"T_d62fb_row12_col4\" class=\"data row12 col4\" >0.5204</td>\n",
              "      <td id=\"T_d62fb_row12_col5\" class=\"data row12 col5\" >0.6738</td>\n",
              "      <td id=\"T_d62fb_row12_col6\" class=\"data row12 col6\" >0.0748</td>\n",
              "      <td id=\"T_d62fb_row12_col7\" class=\"data row12 col7\" >0.1368</td>\n",
              "      <td id=\"T_d62fb_row12_col8\" class=\"data row12 col8\" >0.0540</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d62fb_level0_row13\" class=\"row_heading level0 row13\" >nb</th>\n",
              "      <td id=\"T_d62fb_row13_col0\" class=\"data row13 col0\" >Naive Bayes</td>\n",
              "      <td id=\"T_d62fb_row13_col1\" class=\"data row13 col1\" >0.5239</td>\n",
              "      <td id=\"T_d62fb_row13_col2\" class=\"data row13 col2\" >0.5434</td>\n",
              "      <td id=\"T_d62fb_row13_col3\" class=\"data row13 col3\" >0.9747</td>\n",
              "      <td id=\"T_d62fb_row13_col4\" class=\"data row13 col4\" >0.5126</td>\n",
              "      <td id=\"T_d62fb_row13_col5\" class=\"data row13 col5\" >0.6718</td>\n",
              "      <td id=\"T_d62fb_row13_col6\" class=\"data row13 col6\" >0.0478</td>\n",
              "      <td id=\"T_d62fb_row13_col7\" class=\"data row13 col7\" >0.1111</td>\n",
              "      <td id=\"T_d62fb_row13_col8\" class=\"data row13 col8\" >0.1960</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d62fb_level0_row14\" class=\"row_heading level0 row14\" >dummy</th>\n",
              "      <td id=\"T_d62fb_row14_col0\" class=\"data row14 col0\" >Dummy Classifier</td>\n",
              "      <td id=\"T_d62fb_row14_col1\" class=\"data row14 col1\" >0.4999</td>\n",
              "      <td id=\"T_d62fb_row14_col2\" class=\"data row14 col2\" >0.5000</td>\n",
              "      <td id=\"T_d62fb_row14_col3\" class=\"data row14 col3\" >0.2000</td>\n",
              "      <td id=\"T_d62fb_row14_col4\" class=\"data row14 col4\" >0.1000</td>\n",
              "      <td id=\"T_d62fb_row14_col5\" class=\"data row14 col5\" >0.1333</td>\n",
              "      <td id=\"T_d62fb_row14_col6\" class=\"data row14 col6\" >0.0000</td>\n",
              "      <td id=\"T_d62fb_row14_col7\" class=\"data row14 col7\" >0.0000</td>\n",
              "      <td id=\"T_d62fb_row14_col8\" class=\"data row14 col8\" >0.0530</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Processing:   0%|          | 0/65 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "9ab3aeda749046dc973ffa5c2947eac6"
            }
          },
          "metadata": {
            "application/vnd.jupyter.widget-view+json": {
              "colab": {
                "custom_widget_manager": {
                  "url": "https://ssl.gstatic.com/colaboratory-static/widgets/colab-cdn-widget-manager/b3e629b1971e1542/manager.min.js"
                }
              }
            }
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": []
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,\n",
              "                     criterion='gini', max_depth=None, max_features='sqrt',\n",
              "                     max_leaf_nodes=None, max_samples=None,\n",
              "                     min_impurity_decrease=0.0, min_samples_leaf=1,\n",
              "                     min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
              "                     n_estimators=100, n_jobs=-1, oob_score=False,\n",
              "                     random_state=1234, verbose=0, warm_start=False)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,\n",
              "                     criterion=&#x27;gini&#x27;, max_depth=None, max_features=&#x27;sqrt&#x27;,\n",
              "                     max_leaf_nodes=None, max_samples=None,\n",
              "                     min_impurity_decrease=0.0, min_samples_leaf=1,\n",
              "                     min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
              "                     n_estimators=100, n_jobs=-1, oob_score=False,\n",
              "                     random_state=1234, verbose=0, warm_start=False)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ExtraTreesClassifier</label><div class=\"sk-toggleable__content\"><pre>ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,\n",
              "                     criterion=&#x27;gini&#x27;, max_depth=None, max_features=&#x27;sqrt&#x27;,\n",
              "                     max_leaf_nodes=None, max_samples=None,\n",
              "                     min_impurity_decrease=0.0, min_samples_leaf=1,\n",
              "                     min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
              "                     n_estimators=100, n_jobs=-1, oob_score=False,\n",
              "                     random_state=1234, verbose=0, warm_start=False)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "compare_models(sort = 'Accuracy')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d6ba89b3",
      "metadata": {
        "id": "d6ba89b3"
      },
      "source": [
        "### Creating the Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "id": "b1bf579f",
      "metadata": {
        "id": "b1bf579f",
        "outputId": "59ec8994-8586-457d-b1c9-9ca7a73515a2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457,
          "referenced_widgets": [
            "fa87afca38284991a24ac990c235b117",
            "638ffc85e8e34e27befd8a2038a7fc3e",
            "66a7462d34a34037b7b6a5cfcc69ac6e",
            "312fff379bb04776a2583f92a052e666",
            "f15d7ae5b71f4361969bca8ac53c2268",
            "ab70253193824142bfcd4111133be0c9",
            "320030d27abe4ab8b44a127e9260c88e",
            "c73853d15132486eb8ca3969f2d96b8f",
            "18508394b49d4cb585e6185771db353a",
            "8152b6d91d5840a5bff80836b2048870",
            "86b03347a93342b28e58aaf8c36aec4e"
          ]
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": []
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7f34c83d5360>"
            ],
            "text/html": [
              "<style type=\"text/css\">\n",
              "#T_a639a_row10_col0, #T_a639a_row10_col1, #T_a639a_row10_col2, #T_a639a_row10_col3, #T_a639a_row10_col4, #T_a639a_row10_col5, #T_a639a_row10_col6 {\n",
              "  background: yellow;\n",
              "}\n",
              "</style>\n",
              "<table id=\"T_a639a\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th class=\"blank level0\" >&nbsp;</th>\n",
              "      <th id=\"T_a639a_level0_col0\" class=\"col_heading level0 col0\" >Accuracy</th>\n",
              "      <th id=\"T_a639a_level0_col1\" class=\"col_heading level0 col1\" >AUC</th>\n",
              "      <th id=\"T_a639a_level0_col2\" class=\"col_heading level0 col2\" >Recall</th>\n",
              "      <th id=\"T_a639a_level0_col3\" class=\"col_heading level0 col3\" >Prec.</th>\n",
              "      <th id=\"T_a639a_level0_col4\" class=\"col_heading level0 col4\" >F1</th>\n",
              "      <th id=\"T_a639a_level0_col5\" class=\"col_heading level0 col5\" >Kappa</th>\n",
              "      <th id=\"T_a639a_level0_col6\" class=\"col_heading level0 col6\" >MCC</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th class=\"index_name level0\" >Fold</th>\n",
              "      <th class=\"blank col0\" >&nbsp;</th>\n",
              "      <th class=\"blank col1\" >&nbsp;</th>\n",
              "      <th class=\"blank col2\" >&nbsp;</th>\n",
              "      <th class=\"blank col3\" >&nbsp;</th>\n",
              "      <th class=\"blank col4\" >&nbsp;</th>\n",
              "      <th class=\"blank col5\" >&nbsp;</th>\n",
              "      <th class=\"blank col6\" >&nbsp;</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th id=\"T_a639a_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
              "      <td id=\"T_a639a_row0_col0\" class=\"data row0 col0\" >0.7036</td>\n",
              "      <td id=\"T_a639a_row0_col1\" class=\"data row0 col1\" >0.7759</td>\n",
              "      <td id=\"T_a639a_row0_col2\" class=\"data row0 col2\" >0.8135</td>\n",
              "      <td id=\"T_a639a_row0_col3\" class=\"data row0 col3\" >0.6669</td>\n",
              "      <td id=\"T_a639a_row0_col4\" class=\"data row0 col4\" >0.7330</td>\n",
              "      <td id=\"T_a639a_row0_col5\" class=\"data row0 col5\" >0.4072</td>\n",
              "      <td id=\"T_a639a_row0_col6\" class=\"data row0 col6\" >0.4174</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_a639a_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
              "      <td id=\"T_a639a_row1_col0\" class=\"data row1 col0\" >0.6906</td>\n",
              "      <td id=\"T_a639a_row1_col1\" class=\"data row1 col1\" >0.7564</td>\n",
              "      <td id=\"T_a639a_row1_col2\" class=\"data row1 col2\" >0.7993</td>\n",
              "      <td id=\"T_a639a_row1_col3\" class=\"data row1 col3\" >0.6566</td>\n",
              "      <td id=\"T_a639a_row1_col4\" class=\"data row1 col4\" >0.7210</td>\n",
              "      <td id=\"T_a639a_row1_col5\" class=\"data row1 col5\" >0.3813</td>\n",
              "      <td id=\"T_a639a_row1_col6\" class=\"data row1 col6\" >0.3906</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_a639a_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
              "      <td id=\"T_a639a_row2_col0\" class=\"data row2 col0\" >0.6881</td>\n",
              "      <td id=\"T_a639a_row2_col1\" class=\"data row2 col1\" >0.7546</td>\n",
              "      <td id=\"T_a639a_row2_col2\" class=\"data row2 col2\" >0.7801</td>\n",
              "      <td id=\"T_a639a_row2_col3\" class=\"data row2 col3\" >0.6589</td>\n",
              "      <td id=\"T_a639a_row2_col4\" class=\"data row2 col4\" >0.7144</td>\n",
              "      <td id=\"T_a639a_row2_col5\" class=\"data row2 col5\" >0.3763</td>\n",
              "      <td id=\"T_a639a_row2_col6\" class=\"data row2 col6\" >0.3828</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_a639a_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
              "      <td id=\"T_a639a_row3_col0\" class=\"data row3 col0\" >0.7028</td>\n",
              "      <td id=\"T_a639a_row3_col1\" class=\"data row3 col1\" >0.7682</td>\n",
              "      <td id=\"T_a639a_row3_col2\" class=\"data row3 col2\" >0.8169</td>\n",
              "      <td id=\"T_a639a_row3_col3\" class=\"data row3 col3\" >0.6651</td>\n",
              "      <td id=\"T_a639a_row3_col4\" class=\"data row3 col4\" >0.7332</td>\n",
              "      <td id=\"T_a639a_row3_col5\" class=\"data row3 col5\" >0.4055</td>\n",
              "      <td id=\"T_a639a_row3_col6\" class=\"data row3 col6\" >0.4165</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_a639a_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
              "      <td id=\"T_a639a_row4_col0\" class=\"data row4 col0\" >0.6927</td>\n",
              "      <td id=\"T_a639a_row4_col1\" class=\"data row4 col1\" >0.7515</td>\n",
              "      <td id=\"T_a639a_row4_col2\" class=\"data row4 col2\" >0.7977</td>\n",
              "      <td id=\"T_a639a_row4_col3\" class=\"data row4 col3\" >0.6593</td>\n",
              "      <td id=\"T_a639a_row4_col4\" class=\"data row4 col4\" >0.7219</td>\n",
              "      <td id=\"T_a639a_row4_col5\" class=\"data row4 col5\" >0.3855</td>\n",
              "      <td id=\"T_a639a_row4_col6\" class=\"data row4 col6\" >0.3942</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_a639a_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
              "      <td id=\"T_a639a_row5_col0\" class=\"data row5 col0\" >0.6969</td>\n",
              "      <td id=\"T_a639a_row5_col1\" class=\"data row5 col1\" >0.7591</td>\n",
              "      <td id=\"T_a639a_row5_col2\" class=\"data row5 col2\" >0.8127</td>\n",
              "      <td id=\"T_a639a_row5_col3\" class=\"data row5 col3\" >0.6599</td>\n",
              "      <td id=\"T_a639a_row5_col4\" class=\"data row5 col4\" >0.7284</td>\n",
              "      <td id=\"T_a639a_row5_col5\" class=\"data row5 col5\" >0.3938</td>\n",
              "      <td id=\"T_a639a_row5_col6\" class=\"data row5 col6\" >0.4048</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_a639a_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
              "      <td id=\"T_a639a_row6_col0\" class=\"data row6 col0\" >0.6972</td>\n",
              "      <td id=\"T_a639a_row6_col1\" class=\"data row6 col1\" >0.7594</td>\n",
              "      <td id=\"T_a639a_row6_col2\" class=\"data row6 col2\" >0.8186</td>\n",
              "      <td id=\"T_a639a_row6_col3\" class=\"data row6 col3\" >0.6588</td>\n",
              "      <td id=\"T_a639a_row6_col4\" class=\"data row6 col4\" >0.7301</td>\n",
              "      <td id=\"T_a639a_row6_col5\" class=\"data row6 col5\" >0.3943</td>\n",
              "      <td id=\"T_a639a_row6_col6\" class=\"data row6 col6\" >0.4065</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_a639a_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
              "      <td id=\"T_a639a_row7_col0\" class=\"data row7 col0\" >0.7051</td>\n",
              "      <td id=\"T_a639a_row7_col1\" class=\"data row7 col1\" >0.7636</td>\n",
              "      <td id=\"T_a639a_row7_col2\" class=\"data row7 col2\" >0.7567</td>\n",
              "      <td id=\"T_a639a_row7_col3\" class=\"data row7 col3\" >0.6861</td>\n",
              "      <td id=\"T_a639a_row7_col4\" class=\"data row7 col4\" >0.7197</td>\n",
              "      <td id=\"T_a639a_row7_col5\" class=\"data row7 col5\" >0.4103</td>\n",
              "      <td id=\"T_a639a_row7_col6\" class=\"data row7 col6\" >0.4125</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_a639a_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
              "      <td id=\"T_a639a_row8_col0\" class=\"data row8 col0\" >0.7160</td>\n",
              "      <td id=\"T_a639a_row8_col1\" class=\"data row8 col1\" >0.7776</td>\n",
              "      <td id=\"T_a639a_row8_col2\" class=\"data row8 col2\" >0.8251</td>\n",
              "      <td id=\"T_a639a_row8_col3\" class=\"data row8 col3\" >0.6772</td>\n",
              "      <td id=\"T_a639a_row8_col4\" class=\"data row8 col4\" >0.7439</td>\n",
              "      <td id=\"T_a639a_row8_col5\" class=\"data row8 col5\" >0.4321</td>\n",
              "      <td id=\"T_a639a_row8_col6\" class=\"data row8 col6\" >0.4428</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_a639a_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
              "      <td id=\"T_a639a_row9_col0\" class=\"data row9 col0\" >0.7198</td>\n",
              "      <td id=\"T_a639a_row9_col1\" class=\"data row9 col1\" >0.7813</td>\n",
              "      <td id=\"T_a639a_row9_col2\" class=\"data row9 col2\" >0.8243</td>\n",
              "      <td id=\"T_a639a_row9_col3\" class=\"data row9 col3\" >0.6817</td>\n",
              "      <td id=\"T_a639a_row9_col4\" class=\"data row9 col4\" >0.7462</td>\n",
              "      <td id=\"T_a639a_row9_col5\" class=\"data row9 col5\" >0.4396</td>\n",
              "      <td id=\"T_a639a_row9_col6\" class=\"data row9 col6\" >0.4496</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_a639a_level0_row10\" class=\"row_heading level0 row10\" >Mean</th>\n",
              "      <td id=\"T_a639a_row10_col0\" class=\"data row10 col0\" >0.7013</td>\n",
              "      <td id=\"T_a639a_row10_col1\" class=\"data row10 col1\" >0.7648</td>\n",
              "      <td id=\"T_a639a_row10_col2\" class=\"data row10 col2\" >0.8045</td>\n",
              "      <td id=\"T_a639a_row10_col3\" class=\"data row10 col3\" >0.6670</td>\n",
              "      <td id=\"T_a639a_row10_col4\" class=\"data row10 col4\" >0.7292</td>\n",
              "      <td id=\"T_a639a_row10_col5\" class=\"data row10 col5\" >0.4026</td>\n",
              "      <td id=\"T_a639a_row10_col6\" class=\"data row10 col6\" >0.4118</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_a639a_level0_row11\" class=\"row_heading level0 row11\" >Std</th>\n",
              "      <td id=\"T_a639a_row11_col0\" class=\"data row11 col0\" >0.0099</td>\n",
              "      <td id=\"T_a639a_row11_col1\" class=\"data row11 col1\" >0.0099</td>\n",
              "      <td id=\"T_a639a_row11_col2\" class=\"data row11 col2\" >0.0207</td>\n",
              "      <td id=\"T_a639a_row11_col3\" class=\"data row11 col3\" >0.0102</td>\n",
              "      <td id=\"T_a639a_row11_col4\" class=\"data row11 col4\" >0.0098</td>\n",
              "      <td id=\"T_a639a_row11_col5\" class=\"data row11 col5\" >0.0198</td>\n",
              "      <td id=\"T_a639a_row11_col6\" class=\"data row11 col6\" >0.0203</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Processing:   0%|          | 0/4 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "fa87afca38284991a24ac990c235b117"
            }
          },
          "metadata": {
            "application/vnd.jupyter.widget-view+json": {
              "colab": {
                "custom_widget_manager": {
                  "url": "https://ssl.gstatic.com/colaboratory-static/widgets/colab-cdn-widget-manager/b3e629b1971e1542/manager.min.js"
                }
              }
            }
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": []
          },
          "metadata": {}
        }
      ],
      "source": [
        "model = create_model('lr')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install scikit-optimize\n",
        "!pip install pycaret[tuners]"
      ],
      "metadata": {
        "id": "XDDDrSCXZD0O",
        "outputId": "ccc2bcf5-2900-49e9-ab4f-eb46dac21aa2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "id": "XDDDrSCXZD0O",
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: scikit-optimize in /usr/local/lib/python3.10/dist-packages (0.9.0)\n",
            "Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.10/dist-packages (from scikit-optimize) (1.2.0)\n",
            "Requirement already satisfied: pyaml>=16.9 in /usr/local/lib/python3.10/dist-packages (from scikit-optimize) (23.7.0)\n",
            "Requirement already satisfied: numpy>=1.13.3 in /usr/local/lib/python3.10/dist-packages (from scikit-optimize) (1.23.5)\n",
            "Requirement already satisfied: scipy>=0.19.1 in /usr/local/lib/python3.10/dist-packages (from scikit-optimize) (1.11.1)\n",
            "Requirement already satisfied: scikit-learn>=0.20.0 in /usr/local/lib/python3.10/dist-packages (from scikit-optimize) (1.2.2)\n",
            "Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from pyaml>=16.9->scikit-optimize) (6.0)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.20.0->scikit-optimize) (3.1.0)\n",
            "Requirement already satisfied: pycaret[tuners] in /usr/local/lib/python3.10/dist-packages (3.0.4)\n",
            "Requirement already satisfied: ipython>=5.5.0 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (7.34.0)\n",
            "Requirement already satisfied: ipywidgets>=7.6.5 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (7.7.1)\n",
            "Requirement already satisfied: tqdm>=4.62.0 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (4.65.0)\n",
            "Requirement already satisfied: numpy<1.24,>=1.21 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (1.23.5)\n",
            "Requirement already satisfied: pandas<2.0.0,>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (1.5.3)\n",
            "Requirement already satisfied: jinja2>=1.2 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (3.1.2)\n",
            "Requirement already satisfied: scipy<2.0.0 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (1.11.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (1.2.0)\n",
            "Requirement already satisfied: scikit-learn<1.3.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (1.2.2)\n",
            "Requirement already satisfied: pyod>=1.0.8 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (1.1.0)\n",
            "Requirement already satisfied: imbalanced-learn>=0.8.1 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (0.10.1)\n",
            "Requirement already satisfied: category-encoders>=2.4.0 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (2.6.1)\n",
            "Requirement already satisfied: lightgbm>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (3.3.5)\n",
            "Requirement already satisfied: numba>=0.55.0 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (0.56.4)\n",
            "Requirement already satisfied: requests>=2.27.1 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (2.27.1)\n",
            "Requirement already satisfied: psutil>=5.9.0 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (5.9.5)\n",
            "Requirement already satisfied: markupsafe>=2.0.1 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (2.1.3)\n",
            "Requirement already satisfied: importlib-metadata>=4.12.0 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (6.8.0)\n",
            "Requirement already satisfied: nbformat>=4.2.0 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (5.9.0)\n",
            "Requirement already satisfied: cloudpickle in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (2.2.1)\n",
            "Requirement already satisfied: deprecation>=2.1.0 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (2.1.0)\n",
            "Requirement already satisfied: xxhash in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (3.2.0)\n",
            "Requirement already satisfied: matplotlib>=3.3.0 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (3.7.1)\n",
            "Requirement already satisfied: scikit-plot>=0.3.7 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (0.3.7)\n",
            "Requirement already satisfied: yellowbrick>=1.4 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (1.5)\n",
            "Requirement already satisfied: plotly>=5.0.0 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (5.13.1)\n",
            "Requirement already satisfied: kaleido>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (0.2.1)\n",
            "Requirement already satisfied: schemdraw==0.15 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (0.15)\n",
            "Requirement already satisfied: plotly-resampler>=0.8.3.1 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (0.8.3.2)\n",
            "Requirement already satisfied: statsmodels>=0.12.1 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (0.13.5)\n",
            "Requirement already satisfied: sktime!=0.17.1,!=0.17.2,!=0.18.0,>=0.16.1 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (0.20.0)\n",
            "Requirement already satisfied: tbats>=1.1.3 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (1.1.3)\n",
            "Requirement already satisfied: pmdarima!=1.8.1,<3.0.0,>=1.8.0 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (2.0.3)\n",
            "Requirement already satisfied: wurlitzer in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (3.0.3)\n",
            "Requirement already satisfied: tune-sklearn>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (0.4.6)\n",
            "Requirement already satisfied: ray[tune]>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (2.5.1)\n",
            "Requirement already satisfied: hyperopt>=0.2.7 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (0.2.7)\n",
            "Requirement already satisfied: optuna>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (3.2.0)\n",
            "Requirement already satisfied: scikit-optimize>=0.9.0 in /usr/local/lib/python3.10/dist-packages (from pycaret[tuners]) (0.9.0)\n",
            "Requirement already satisfied: patsy>=0.5.1 in /usr/local/lib/python3.10/dist-packages (from category-encoders>=2.4.0->pycaret[tuners]) (0.5.3)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from deprecation>=2.1.0->pycaret[tuners]) (23.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from hyperopt>=0.2.7->pycaret[tuners]) (1.16.0)\n",
            "Requirement already satisfied: networkx>=2.2 in /usr/local/lib/python3.10/dist-packages (from hyperopt>=0.2.7->pycaret[tuners]) (3.1)\n",
            "Requirement already satisfied: future in /usr/local/lib/python3.10/dist-packages (from hyperopt>=0.2.7->pycaret[tuners]) (0.18.3)\n",
            "Requirement already satisfied: py4j in /usr/local/lib/python3.10/dist-packages (from hyperopt>=0.2.7->pycaret[tuners]) (0.10.9.7)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn>=0.8.1->pycaret[tuners]) (3.1.0)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.10/dist-packages (from importlib-metadata>=4.12.0->pycaret[tuners]) (3.15.0)\n",
            "Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret[tuners]) (67.7.2)\n",
            "Requirement already satisfied: jedi>=0.16 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret[tuners]) (0.18.2)\n",
            "Requirement already satisfied: decorator in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret[tuners]) (4.4.2)\n",
            "Requirement already satisfied: pickleshare in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret[tuners]) (0.7.5)\n",
            "Requirement already satisfied: traitlets>=4.2 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret[tuners]) (5.7.1)\n",
            "Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret[tuners]) (3.0.38)\n",
            "Requirement already satisfied: pygments in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret[tuners]) (2.14.0)\n",
            "Requirement already satisfied: backcall in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret[tuners]) (0.2.0)\n",
            "Requirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret[tuners]) (0.1.6)\n",
            "Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret[tuners]) (4.8.0)\n",
            "Requirement already satisfied: ipykernel>=4.5.1 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.6.5->pycaret[tuners]) (5.5.6)\n",
            "Requirement already satisfied: ipython-genutils~=0.2.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.6.5->pycaret[tuners]) (0.2.0)\n",
            "Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.6.5->pycaret[tuners]) (3.6.4)\n",
            "Requirement already satisfied: jupyterlab-widgets>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.6.5->pycaret[tuners]) (3.0.7)\n",
            "Requirement already satisfied: wheel in /usr/local/lib/python3.10/dist-packages (from lightgbm>=3.0.0->pycaret[tuners]) (0.40.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->pycaret[tuners]) (1.1.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->pycaret[tuners]) (0.11.0)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->pycaret[tuners]) (4.40.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->pycaret[tuners]) (1.4.4)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->pycaret[tuners]) (8.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->pycaret[tuners]) (3.1.0)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.0->pycaret[tuners]) (2.8.2)\n",
            "Requirement already satisfied: fastjsonschema in /usr/local/lib/python3.10/dist-packages (from nbformat>=4.2.0->pycaret[tuners]) (2.17.1)\n",
            "Requirement already satisfied: jsonschema>=2.6 in /usr/local/lib/python3.10/dist-packages (from nbformat>=4.2.0->pycaret[tuners]) (4.3.3)\n",
            "Requirement already satisfied: jupyter-core in /usr/local/lib/python3.10/dist-packages (from nbformat>=4.2.0->pycaret[tuners]) (5.3.1)\n",
            "Requirement already satisfied: llvmlite<0.40,>=0.39.0dev0 in /usr/local/lib/python3.10/dist-packages (from numba>=0.55.0->pycaret[tuners]) (0.39.1)\n",
            "Requirement already satisfied: alembic>=1.5.0 in /usr/local/lib/python3.10/dist-packages (from optuna>=3.0.0->pycaret[tuners]) (1.11.1)\n",
            "Requirement already satisfied: cmaes>=0.9.1 in /usr/local/lib/python3.10/dist-packages (from optuna>=3.0.0->pycaret[tuners]) (0.9.1)\n",
            "Requirement already satisfied: colorlog in /usr/local/lib/python3.10/dist-packages (from optuna>=3.0.0->pycaret[tuners]) (6.7.0)\n",
            "Requirement already satisfied: sqlalchemy>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from optuna>=3.0.0->pycaret[tuners]) (2.0.16)\n",
            "Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from optuna>=3.0.0->pycaret[tuners]) (6.0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas<2.0.0,>=1.3.0->pycaret[tuners]) (2022.7.1)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly>=5.0.0->pycaret[tuners]) (8.2.2)\n",
            "Requirement already satisfied: dash<3.0.0,>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly-resampler>=0.8.3.1->pycaret[tuners]) (2.11.1)\n",
            "Requirement already satisfied: jupyter-dash>=0.4.2 in /usr/local/lib/python3.10/dist-packages (from plotly-resampler>=0.8.3.1->pycaret[tuners]) (0.4.2)\n",
            "Requirement already satisfied: orjson<4.0.0,>=3.8.0 in /usr/local/lib/python3.10/dist-packages (from plotly-resampler>=0.8.3.1->pycaret[tuners]) (3.9.2)\n",
            "Requirement already satisfied: trace-updater>=0.0.8 in /usr/local/lib/python3.10/dist-packages (from plotly-resampler>=0.8.3.1->pycaret[tuners]) (0.0.9.1)\n",
            "Requirement already satisfied: Cython!=0.29.18,!=0.29.31,>=0.29 in /usr/local/lib/python3.10/dist-packages (from pmdarima!=1.8.1,<3.0.0,>=1.8.0->pycaret[tuners]) (0.29.35)\n",
            "Requirement already satisfied: urllib3 in /usr/local/lib/python3.10/dist-packages (from pmdarima!=1.8.1,<3.0.0,>=1.8.0->pycaret[tuners]) (1.26.16)\n",
            "Requirement already satisfied: attrs in /usr/local/lib/python3.10/dist-packages (from ray[tune]>=1.0.0->pycaret[tuners]) (23.1.0)\n",
            "Requirement already satisfied: click>=7.0 in /usr/local/lib/python3.10/dist-packages (from ray[tune]>=1.0.0->pycaret[tuners]) (8.1.3)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from ray[tune]>=1.0.0->pycaret[tuners]) (3.12.2)\n",
            "Requirement already satisfied: msgpack<2.0.0,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from ray[tune]>=1.0.0->pycaret[tuners]) (1.0.5)\n",
            "Requirement already satisfied: protobuf!=3.19.5,>=3.15.3 in /usr/local/lib/python3.10/dist-packages (from ray[tune]>=1.0.0->pycaret[tuners]) (4.23.4)\n",
            "Requirement already satisfied: aiosignal in /usr/local/lib/python3.10/dist-packages (from ray[tune]>=1.0.0->pycaret[tuners]) (1.3.1)\n",
            "Requirement already satisfied: frozenlist in /usr/local/lib/python3.10/dist-packages (from ray[tune]>=1.0.0->pycaret[tuners]) (1.3.3)\n",
            "Requirement already satisfied: grpcio<=1.51.3,>=1.42.0 in /usr/local/lib/python3.10/dist-packages (from ray[tune]>=1.0.0->pycaret[tuners]) (1.51.3)\n",
            "Requirement already satisfied: tensorboardX>=1.9 in /usr/local/lib/python3.10/dist-packages (from ray[tune]>=1.0.0->pycaret[tuners]) (2.6.1)\n",
            "Requirement already satisfied: pyarrow>=6.0.1 in /usr/local/lib/python3.10/dist-packages (from ray[tune]>=1.0.0->pycaret[tuners]) (9.0.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.27.1->pycaret[tuners]) (2023.5.7)\n",
            "Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.10/dist-packages (from requests>=2.27.1->pycaret[tuners]) (2.0.12)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.27.1->pycaret[tuners]) (3.4)\n",
            "Requirement already satisfied: pyaml>=16.9 in /usr/local/lib/python3.10/dist-packages (from scikit-optimize>=0.9.0->pycaret[tuners]) (23.7.0)\n",
            "Requirement already satisfied: deprecated>=1.2.13 in /usr/local/lib/python3.10/dist-packages (from sktime!=0.17.1,!=0.17.2,!=0.18.0,>=0.16.1->pycaret[tuners]) (1.2.14)\n",
            "Requirement already satisfied: scikit-base<0.6.0 in /usr/local/lib/python3.10/dist-packages (from sktime!=0.17.1,!=0.17.2,!=0.18.0,>=0.16.1->pycaret[tuners]) (0.5.0)\n",
            "Requirement already satisfied: Mako in /usr/local/lib/python3.10/dist-packages (from alembic>=1.5.0->optuna>=3.0.0->pycaret[tuners]) (1.2.4)\n",
            "Requirement already satisfied: typing-extensions>=4 in /usr/local/lib/python3.10/dist-packages (from alembic>=1.5.0->optuna>=3.0.0->pycaret[tuners]) (4.7.1)\n",
            "Requirement already satisfied: Flask<2.3.0,>=1.0.4 in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.2.0->plotly-resampler>=0.8.3.1->pycaret[tuners]) (2.2.5)\n",
            "Requirement already satisfied: Werkzeug<2.3.0 in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.2.0->plotly-resampler>=0.8.3.1->pycaret[tuners]) (2.2.3)\n",
            "Requirement already satisfied: dash-html-components==2.0.0 in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.2.0->plotly-resampler>=0.8.3.1->pycaret[tuners]) (2.0.0)\n",
            "Requirement already satisfied: dash-core-components==2.0.0 in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.2.0->plotly-resampler>=0.8.3.1->pycaret[tuners]) (2.0.0)\n",
            "Requirement already satisfied: dash-table==5.0.0 in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.2.0->plotly-resampler>=0.8.3.1->pycaret[tuners]) (5.0.0)\n",
            "Requirement already satisfied: retrying in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.2.0->plotly-resampler>=0.8.3.1->pycaret[tuners]) (1.3.4)\n",
            "Requirement already satisfied: ansi2html in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.2.0->plotly-resampler>=0.8.3.1->pycaret[tuners]) (1.8.0)\n",
            "Requirement already satisfied: nest-asyncio in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.2.0->plotly-resampler>=0.8.3.1->pycaret[tuners]) (1.5.6)\n",
            "Requirement already satisfied: wrapt<2,>=1.10 in /usr/local/lib/python3.10/dist-packages (from deprecated>=1.2.13->sktime!=0.17.1,!=0.17.2,!=0.18.0,>=0.16.1->pycaret[tuners]) (1.14.1)\n",
            "Requirement already satisfied: jupyter-client in /usr/local/lib/python3.10/dist-packages (from ipykernel>=4.5.1->ipywidgets>=7.6.5->pycaret[tuners]) (6.1.12)\n",
            "Requirement already satisfied: tornado>=4.2 in /usr/local/lib/python3.10/dist-packages (from ipykernel>=4.5.1->ipywidgets>=7.6.5->pycaret[tuners]) (6.3.1)\n",
            "Requirement already satisfied: parso<0.9.0,>=0.8.0 in /usr/local/lib/python3.10/dist-packages (from jedi>=0.16->ipython>=5.5.0->pycaret[tuners]) (0.8.3)\n",
            "Requirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat>=4.2.0->pycaret[tuners]) (0.19.3)\n",
            "Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.10/dist-packages (from pexpect>4.3->ipython>=5.5.0->pycaret[tuners]) (0.7.0)\n",
            "Requirement already satisfied: wcwidth in /usr/local/lib/python3.10/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=5.5.0->pycaret[tuners]) (0.2.6)\n",
            "Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy>=1.3.0->optuna>=3.0.0->pycaret[tuners]) (2.0.2)\n",
            "Requirement already satisfied: notebook>=4.4.1 in /usr/local/lib/python3.10/dist-packages (from widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret[tuners]) (6.4.8)\n",
            "Requirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.10/dist-packages (from jupyter-core->nbformat>=4.2.0->pycaret[tuners]) (3.7.0)\n",
            "Requirement already satisfied: itsdangerous>=2.0 in /usr/local/lib/python3.10/dist-packages (from Flask<2.3.0,>=1.0.4->dash<3.0.0,>=2.2.0->plotly-resampler>=0.8.3.1->pycaret[tuners]) (2.1.2)\n",
            "Requirement already satisfied: pyzmq>=17 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret[tuners]) (23.2.1)\n",
            "Requirement already satisfied: argon2-cffi in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret[tuners]) (21.3.0)\n",
            "Requirement already satisfied: nbconvert in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret[tuners]) (6.5.4)\n",
            "Requirement already satisfied: Send2Trash>=1.8.0 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret[tuners]) (1.8.2)\n",
            "Requirement already satisfied: terminado>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret[tuners]) (0.17.1)\n",
            "Requirement already satisfied: prometheus-client in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret[tuners]) (0.17.0)\n",
            "Requirement already satisfied: argon2-cffi-bindings in /usr/local/lib/python3.10/dist-packages (from argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret[tuners]) (21.2.0)\n",
            "Requirement already satisfied: lxml in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret[tuners]) (4.9.2)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret[tuners]) (4.11.2)\n",
            "Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret[tuners]) (6.0.0)\n",
            "Requirement already satisfied: defusedxml in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret[tuners]) (0.7.1)\n",
            "Requirement already satisfied: entrypoints>=0.2.2 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret[tuners]) (0.4)\n",
            "Requirement already satisfied: jupyterlab-pygments in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret[tuners]) (0.2.2)\n",
            "Requirement already satisfied: mistune<2,>=0.8.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret[tuners]) (0.8.4)\n",
            "Requirement already satisfied: nbclient>=0.5.0 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret[tuners]) (0.8.0)\n",
            "Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret[tuners]) (1.5.0)\n",
            "Requirement already satisfied: tinycss2 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret[tuners]) (1.2.1)\n",
            "Requirement already satisfied: cffi>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret[tuners]) (1.15.1)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4->nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret[tuners]) (2.4.1)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach->nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret[tuners]) (0.5.1)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret[tuners]) (2.21)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model_cat = create_model('lr', verbose = False)\n",
        "\n",
        "params = {'max_iter': np.arange(100, 1000, 100)}\n",
        "\n",
        "tuned_model = tune_model(model_cat, optimize = 'Accuracy', fold = 10,\n",
        "            custom_grid = params)\n"
      ],
      "metadata": {
        "id": "CE_foWkhYZ5r",
        "outputId": "94bee21e-1749-4e76-cec4-5a60449f4a49",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 511,
          "referenced_widgets": [
            "9c85b149da7b4c80bb92a72eb9db92b5",
            "969e29ad26d34ba1a1d2aa94163a0fa7",
            "6c5b0e752adc42bdb1deb3be3ca9e87b",
            "3b24cec99c444864811b9762c9f90a82",
            "32220f5f2ea848238f3d0e872a9c4dec",
            "65273b452e854fc1b7f4cdf1c649cd71",
            "be080b20d3a34768b15c69489a731269",
            "0857782a95cf487c834d56f985f34358",
            "62f1dde4da63416caf52339d1ef415d3",
            "cfe4f8bd809342e883c97037a70a3944",
            "3c9710d57a294ad4ad04f023361a752a"
          ]
        }
      },
      "id": "CE_foWkhYZ5r",
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": []
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7f34507db910>"
            ],
            "text/html": [
              "<style type=\"text/css\">\n",
              "#T_c4f25_row10_col0, #T_c4f25_row10_col1, #T_c4f25_row10_col2, #T_c4f25_row10_col3, #T_c4f25_row10_col4, #T_c4f25_row10_col5, #T_c4f25_row10_col6 {\n",
              "  background: yellow;\n",
              "}\n",
              "</style>\n",
              "<table id=\"T_c4f25\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th class=\"blank level0\" >&nbsp;</th>\n",
              "      <th id=\"T_c4f25_level0_col0\" class=\"col_heading level0 col0\" >Accuracy</th>\n",
              "      <th id=\"T_c4f25_level0_col1\" class=\"col_heading level0 col1\" >AUC</th>\n",
              "      <th id=\"T_c4f25_level0_col2\" class=\"col_heading level0 col2\" >Recall</th>\n",
              "      <th id=\"T_c4f25_level0_col3\" class=\"col_heading level0 col3\" >Prec.</th>\n",
              "      <th id=\"T_c4f25_level0_col4\" class=\"col_heading level0 col4\" >F1</th>\n",
              "      <th id=\"T_c4f25_level0_col5\" class=\"col_heading level0 col5\" >Kappa</th>\n",
              "      <th id=\"T_c4f25_level0_col6\" class=\"col_heading level0 col6\" >MCC</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th class=\"index_name level0\" >Fold</th>\n",
              "      <th class=\"blank col0\" >&nbsp;</th>\n",
              "      <th class=\"blank col1\" >&nbsp;</th>\n",
              "      <th class=\"blank col2\" >&nbsp;</th>\n",
              "      <th class=\"blank col3\" >&nbsp;</th>\n",
              "      <th class=\"blank col4\" >&nbsp;</th>\n",
              "      <th class=\"blank col5\" >&nbsp;</th>\n",
              "      <th class=\"blank col6\" >&nbsp;</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th id=\"T_c4f25_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
              "      <td id=\"T_c4f25_row0_col0\" class=\"data row0 col0\" >0.7036</td>\n",
              "      <td id=\"T_c4f25_row0_col1\" class=\"data row0 col1\" >0.7759</td>\n",
              "      <td id=\"T_c4f25_row0_col2\" class=\"data row0 col2\" >0.8135</td>\n",
              "      <td id=\"T_c4f25_row0_col3\" class=\"data row0 col3\" >0.6669</td>\n",
              "      <td id=\"T_c4f25_row0_col4\" class=\"data row0 col4\" >0.7330</td>\n",
              "      <td id=\"T_c4f25_row0_col5\" class=\"data row0 col5\" >0.4072</td>\n",
              "      <td id=\"T_c4f25_row0_col6\" class=\"data row0 col6\" >0.4174</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_c4f25_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
              "      <td id=\"T_c4f25_row1_col0\" class=\"data row1 col0\" >0.6906</td>\n",
              "      <td id=\"T_c4f25_row1_col1\" class=\"data row1 col1\" >0.7564</td>\n",
              "      <td id=\"T_c4f25_row1_col2\" class=\"data row1 col2\" >0.7993</td>\n",
              "      <td id=\"T_c4f25_row1_col3\" class=\"data row1 col3\" >0.6566</td>\n",
              "      <td id=\"T_c4f25_row1_col4\" class=\"data row1 col4\" >0.7210</td>\n",
              "      <td id=\"T_c4f25_row1_col5\" class=\"data row1 col5\" >0.3813</td>\n",
              "      <td id=\"T_c4f25_row1_col6\" class=\"data row1 col6\" >0.3906</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_c4f25_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
              "      <td id=\"T_c4f25_row2_col0\" class=\"data row2 col0\" >0.6881</td>\n",
              "      <td id=\"T_c4f25_row2_col1\" class=\"data row2 col1\" >0.7546</td>\n",
              "      <td id=\"T_c4f25_row2_col2\" class=\"data row2 col2\" >0.7801</td>\n",
              "      <td id=\"T_c4f25_row2_col3\" class=\"data row2 col3\" >0.6589</td>\n",
              "      <td id=\"T_c4f25_row2_col4\" class=\"data row2 col4\" >0.7144</td>\n",
              "      <td id=\"T_c4f25_row2_col5\" class=\"data row2 col5\" >0.3763</td>\n",
              "      <td id=\"T_c4f25_row2_col6\" class=\"data row2 col6\" >0.3828</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_c4f25_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
              "      <td id=\"T_c4f25_row3_col0\" class=\"data row3 col0\" >0.7028</td>\n",
              "      <td id=\"T_c4f25_row3_col1\" class=\"data row3 col1\" >0.7682</td>\n",
              "      <td id=\"T_c4f25_row3_col2\" class=\"data row3 col2\" >0.8169</td>\n",
              "      <td id=\"T_c4f25_row3_col3\" class=\"data row3 col3\" >0.6651</td>\n",
              "      <td id=\"T_c4f25_row3_col4\" class=\"data row3 col4\" >0.7332</td>\n",
              "      <td id=\"T_c4f25_row3_col5\" class=\"data row3 col5\" >0.4055</td>\n",
              "      <td id=\"T_c4f25_row3_col6\" class=\"data row3 col6\" >0.4165</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_c4f25_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
              "      <td id=\"T_c4f25_row4_col0\" class=\"data row4 col0\" >0.6927</td>\n",
              "      <td id=\"T_c4f25_row4_col1\" class=\"data row4 col1\" >0.7515</td>\n",
              "      <td id=\"T_c4f25_row4_col2\" class=\"data row4 col2\" >0.7977</td>\n",
              "      <td id=\"T_c4f25_row4_col3\" class=\"data row4 col3\" >0.6593</td>\n",
              "      <td id=\"T_c4f25_row4_col4\" class=\"data row4 col4\" >0.7219</td>\n",
              "      <td id=\"T_c4f25_row4_col5\" class=\"data row4 col5\" >0.3855</td>\n",
              "      <td id=\"T_c4f25_row4_col6\" class=\"data row4 col6\" >0.3942</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_c4f25_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
              "      <td id=\"T_c4f25_row5_col0\" class=\"data row5 col0\" >0.6969</td>\n",
              "      <td id=\"T_c4f25_row5_col1\" class=\"data row5 col1\" >0.7591</td>\n",
              "      <td id=\"T_c4f25_row5_col2\" class=\"data row5 col2\" >0.8127</td>\n",
              "      <td id=\"T_c4f25_row5_col3\" class=\"data row5 col3\" >0.6599</td>\n",
              "      <td id=\"T_c4f25_row5_col4\" class=\"data row5 col4\" >0.7284</td>\n",
              "      <td id=\"T_c4f25_row5_col5\" class=\"data row5 col5\" >0.3938</td>\n",
              "      <td id=\"T_c4f25_row5_col6\" class=\"data row5 col6\" >0.4048</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_c4f25_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
              "      <td id=\"T_c4f25_row6_col0\" class=\"data row6 col0\" >0.6972</td>\n",
              "      <td id=\"T_c4f25_row6_col1\" class=\"data row6 col1\" >0.7594</td>\n",
              "      <td id=\"T_c4f25_row6_col2\" class=\"data row6 col2\" >0.8186</td>\n",
              "      <td id=\"T_c4f25_row6_col3\" class=\"data row6 col3\" >0.6588</td>\n",
              "      <td id=\"T_c4f25_row6_col4\" class=\"data row6 col4\" >0.7301</td>\n",
              "      <td id=\"T_c4f25_row6_col5\" class=\"data row6 col5\" >0.3943</td>\n",
              "      <td id=\"T_c4f25_row6_col6\" class=\"data row6 col6\" >0.4065</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_c4f25_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
              "      <td id=\"T_c4f25_row7_col0\" class=\"data row7 col0\" >0.7051</td>\n",
              "      <td id=\"T_c4f25_row7_col1\" class=\"data row7 col1\" >0.7636</td>\n",
              "      <td id=\"T_c4f25_row7_col2\" class=\"data row7 col2\" >0.7567</td>\n",
              "      <td id=\"T_c4f25_row7_col3\" class=\"data row7 col3\" >0.6861</td>\n",
              "      <td id=\"T_c4f25_row7_col4\" class=\"data row7 col4\" >0.7197</td>\n",
              "      <td id=\"T_c4f25_row7_col5\" class=\"data row7 col5\" >0.4103</td>\n",
              "      <td id=\"T_c4f25_row7_col6\" class=\"data row7 col6\" >0.4125</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_c4f25_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
              "      <td id=\"T_c4f25_row8_col0\" class=\"data row8 col0\" >0.7160</td>\n",
              "      <td id=\"T_c4f25_row8_col1\" class=\"data row8 col1\" >0.7776</td>\n",
              "      <td id=\"T_c4f25_row8_col2\" class=\"data row8 col2\" >0.8251</td>\n",
              "      <td id=\"T_c4f25_row8_col3\" class=\"data row8 col3\" >0.6772</td>\n",
              "      <td id=\"T_c4f25_row8_col4\" class=\"data row8 col4\" >0.7439</td>\n",
              "      <td id=\"T_c4f25_row8_col5\" class=\"data row8 col5\" >0.4321</td>\n",
              "      <td id=\"T_c4f25_row8_col6\" class=\"data row8 col6\" >0.4428</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_c4f25_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
              "      <td id=\"T_c4f25_row9_col0\" class=\"data row9 col0\" >0.7198</td>\n",
              "      <td id=\"T_c4f25_row9_col1\" class=\"data row9 col1\" >0.7813</td>\n",
              "      <td id=\"T_c4f25_row9_col2\" class=\"data row9 col2\" >0.8243</td>\n",
              "      <td id=\"T_c4f25_row9_col3\" class=\"data row9 col3\" >0.6817</td>\n",
              "      <td id=\"T_c4f25_row9_col4\" class=\"data row9 col4\" >0.7462</td>\n",
              "      <td id=\"T_c4f25_row9_col5\" class=\"data row9 col5\" >0.4396</td>\n",
              "      <td id=\"T_c4f25_row9_col6\" class=\"data row9 col6\" >0.4496</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_c4f25_level0_row10\" class=\"row_heading level0 row10\" >Mean</th>\n",
              "      <td id=\"T_c4f25_row10_col0\" class=\"data row10 col0\" >0.7013</td>\n",
              "      <td id=\"T_c4f25_row10_col1\" class=\"data row10 col1\" >0.7648</td>\n",
              "      <td id=\"T_c4f25_row10_col2\" class=\"data row10 col2\" >0.8045</td>\n",
              "      <td id=\"T_c4f25_row10_col3\" class=\"data row10 col3\" >0.6670</td>\n",
              "      <td id=\"T_c4f25_row10_col4\" class=\"data row10 col4\" >0.7292</td>\n",
              "      <td id=\"T_c4f25_row10_col5\" class=\"data row10 col5\" >0.4026</td>\n",
              "      <td id=\"T_c4f25_row10_col6\" class=\"data row10 col6\" >0.4118</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_c4f25_level0_row11\" class=\"row_heading level0 row11\" >Std</th>\n",
              "      <td id=\"T_c4f25_row11_col0\" class=\"data row11 col0\" >0.0099</td>\n",
              "      <td id=\"T_c4f25_row11_col1\" class=\"data row11 col1\" >0.0099</td>\n",
              "      <td id=\"T_c4f25_row11_col2\" class=\"data row11 col2\" >0.0207</td>\n",
              "      <td id=\"T_c4f25_row11_col3\" class=\"data row11 col3\" >0.0102</td>\n",
              "      <td id=\"T_c4f25_row11_col4\" class=\"data row11 col4\" >0.0098</td>\n",
              "      <td id=\"T_c4f25_row11_col5\" class=\"data row11 col5\" >0.0198</td>\n",
              "      <td id=\"T_c4f25_row11_col6\" class=\"data row11 col6\" >0.0203</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Processing:   0%|          | 0/7 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "9c85b149da7b4c80bb92a72eb9db92b5"
            }
          },
          "metadata": {
            "application/vnd.jupyter.widget-view+json": {
              "colab": {
                "custom_widget_manager": {
                  "url": "https://ssl.gstatic.com/colaboratory-static/widgets/colab-cdn-widget-manager/b3e629b1971e1542/manager.min.js"
                }
              }
            }
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 10 folds for each of 9 candidates, totalling 90 fits\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": []
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4c4d0051",
      "metadata": {
        "id": "4c4d0051"
      },
      "source": [
        "### Tuning the Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "id": "d754c17c-1c2b-4874-b1ba-1bd5e3059b5f",
      "metadata": {
        "tags": [],
        "id": "d754c17c-1c2b-4874-b1ba-1bd5e3059b5f"
      },
      "outputs": [],
      "source": [
        "# model_cat = create_model('lr', verbose = False)\n",
        "\n",
        "# params = {'iterations': np.arange(100, 1000, 100),\n",
        "#          'max_depth': np.arange(1, 10),\n",
        "#          'learning_rate': np.arange(0.01, 1, 0.01),\n",
        "#          'random_strength': np.arange(0.1, 1.0, 0.1),\n",
        "#          'l2_leaf_reg': np.arange(1, 100),\n",
        "#          'border_count': np.arange(1, 256)}\n",
        "\n",
        "# tuned_model = tune_model(model_cat, optimize = 'Accuracy', fold = 10,\n",
        "#             tuner_verbose = False, search_library = 'scikit-optimize',\n",
        "#             custom_grid = params, n_iter = 50)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Fit the model and tune it\n",
        "model_cat = create_model('lr', verbose = False)\n",
        "tuned_model = tune_model(model_cat, optimize = 'Accuracy', fold = 10, custom_grid = params)\n",
        "\n",
        "# Print the intercept and coefficients\n",
        "print(\"Intercept: \" + str(tuned_model.intercept_))\n",
        "print(\"Coefficients: \" + str(tuned_model.coef_))\n"
      ],
      "metadata": {
        "id": "w6etiUNTalkk",
        "outputId": "a88d0923-2ba3-4f35-e0fc-9fb566373e46",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 720,
          "referenced_widgets": [
            "11b929d3a89b4b289116f2d53b49bb08",
            "611b93f0fa9d4565a9383f5e1be0efc0",
            "26803408c75449afac15d0f29435e40a",
            "8bb0a89c05e24789b82cdec6bc1465dc",
            "104dd19073204905b7018a67c39d9125",
            "2c1205b5e76d4afbb50a76e43f22dfe9",
            "a11f156d04094b538345df40b4ec4777",
            "96af1323cc7949f1aee28013ddf3b217",
            "06bc1b5c586842038e619549c9cad47f",
            "0d3f8decd72b447c99b3eb4063fc4195",
            "d170f09e14dd42f9aa9c1d93d0a459c8"
          ]
        }
      },
      "id": "w6etiUNTalkk",
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": []
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7f34508f82e0>"
            ],
            "text/html": [
              "<style type=\"text/css\">\n",
              "#T_843ce_row10_col0, #T_843ce_row10_col1, #T_843ce_row10_col2, #T_843ce_row10_col3, #T_843ce_row10_col4, #T_843ce_row10_col5, #T_843ce_row10_col6 {\n",
              "  background: yellow;\n",
              "}\n",
              "</style>\n",
              "<table id=\"T_843ce\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th class=\"blank level0\" >&nbsp;</th>\n",
              "      <th id=\"T_843ce_level0_col0\" class=\"col_heading level0 col0\" >Accuracy</th>\n",
              "      <th id=\"T_843ce_level0_col1\" class=\"col_heading level0 col1\" >AUC</th>\n",
              "      <th id=\"T_843ce_level0_col2\" class=\"col_heading level0 col2\" >Recall</th>\n",
              "      <th id=\"T_843ce_level0_col3\" class=\"col_heading level0 col3\" >Prec.</th>\n",
              "      <th id=\"T_843ce_level0_col4\" class=\"col_heading level0 col4\" >F1</th>\n",
              "      <th id=\"T_843ce_level0_col5\" class=\"col_heading level0 col5\" >Kappa</th>\n",
              "      <th id=\"T_843ce_level0_col6\" class=\"col_heading level0 col6\" >MCC</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th class=\"index_name level0\" >Fold</th>\n",
              "      <th class=\"blank col0\" >&nbsp;</th>\n",
              "      <th class=\"blank col1\" >&nbsp;</th>\n",
              "      <th class=\"blank col2\" >&nbsp;</th>\n",
              "      <th class=\"blank col3\" >&nbsp;</th>\n",
              "      <th class=\"blank col4\" >&nbsp;</th>\n",
              "      <th class=\"blank col5\" >&nbsp;</th>\n",
              "      <th class=\"blank col6\" >&nbsp;</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th id=\"T_843ce_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
              "      <td id=\"T_843ce_row0_col0\" class=\"data row0 col0\" >0.7036</td>\n",
              "      <td id=\"T_843ce_row0_col1\" class=\"data row0 col1\" >0.7759</td>\n",
              "      <td id=\"T_843ce_row0_col2\" class=\"data row0 col2\" >0.8135</td>\n",
              "      <td id=\"T_843ce_row0_col3\" class=\"data row0 col3\" >0.6669</td>\n",
              "      <td id=\"T_843ce_row0_col4\" class=\"data row0 col4\" >0.7330</td>\n",
              "      <td id=\"T_843ce_row0_col5\" class=\"data row0 col5\" >0.4072</td>\n",
              "      <td id=\"T_843ce_row0_col6\" class=\"data row0 col6\" >0.4174</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_843ce_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
              "      <td id=\"T_843ce_row1_col0\" class=\"data row1 col0\" >0.6906</td>\n",
              "      <td id=\"T_843ce_row1_col1\" class=\"data row1 col1\" >0.7564</td>\n",
              "      <td id=\"T_843ce_row1_col2\" class=\"data row1 col2\" >0.7993</td>\n",
              "      <td id=\"T_843ce_row1_col3\" class=\"data row1 col3\" >0.6566</td>\n",
              "      <td id=\"T_843ce_row1_col4\" class=\"data row1 col4\" >0.7210</td>\n",
              "      <td id=\"T_843ce_row1_col5\" class=\"data row1 col5\" >0.3813</td>\n",
              "      <td id=\"T_843ce_row1_col6\" class=\"data row1 col6\" >0.3906</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_843ce_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
              "      <td id=\"T_843ce_row2_col0\" class=\"data row2 col0\" >0.6881</td>\n",
              "      <td id=\"T_843ce_row2_col1\" class=\"data row2 col1\" >0.7546</td>\n",
              "      <td id=\"T_843ce_row2_col2\" class=\"data row2 col2\" >0.7801</td>\n",
              "      <td id=\"T_843ce_row2_col3\" class=\"data row2 col3\" >0.6589</td>\n",
              "      <td id=\"T_843ce_row2_col4\" class=\"data row2 col4\" >0.7144</td>\n",
              "      <td id=\"T_843ce_row2_col5\" class=\"data row2 col5\" >0.3763</td>\n",
              "      <td id=\"T_843ce_row2_col6\" class=\"data row2 col6\" >0.3828</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_843ce_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
              "      <td id=\"T_843ce_row3_col0\" class=\"data row3 col0\" >0.7028</td>\n",
              "      <td id=\"T_843ce_row3_col1\" class=\"data row3 col1\" >0.7682</td>\n",
              "      <td id=\"T_843ce_row3_col2\" class=\"data row3 col2\" >0.8169</td>\n",
              "      <td id=\"T_843ce_row3_col3\" class=\"data row3 col3\" >0.6651</td>\n",
              "      <td id=\"T_843ce_row3_col4\" class=\"data row3 col4\" >0.7332</td>\n",
              "      <td id=\"T_843ce_row3_col5\" class=\"data row3 col5\" >0.4055</td>\n",
              "      <td id=\"T_843ce_row3_col6\" class=\"data row3 col6\" >0.4165</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_843ce_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
              "      <td id=\"T_843ce_row4_col0\" class=\"data row4 col0\" >0.6927</td>\n",
              "      <td id=\"T_843ce_row4_col1\" class=\"data row4 col1\" >0.7515</td>\n",
              "      <td id=\"T_843ce_row4_col2\" class=\"data row4 col2\" >0.7977</td>\n",
              "      <td id=\"T_843ce_row4_col3\" class=\"data row4 col3\" >0.6593</td>\n",
              "      <td id=\"T_843ce_row4_col4\" class=\"data row4 col4\" >0.7219</td>\n",
              "      <td id=\"T_843ce_row4_col5\" class=\"data row4 col5\" >0.3855</td>\n",
              "      <td id=\"T_843ce_row4_col6\" class=\"data row4 col6\" >0.3942</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_843ce_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
              "      <td id=\"T_843ce_row5_col0\" class=\"data row5 col0\" >0.6969</td>\n",
              "      <td id=\"T_843ce_row5_col1\" class=\"data row5 col1\" >0.7591</td>\n",
              "      <td id=\"T_843ce_row5_col2\" class=\"data row5 col2\" >0.8127</td>\n",
              "      <td id=\"T_843ce_row5_col3\" class=\"data row5 col3\" >0.6599</td>\n",
              "      <td id=\"T_843ce_row5_col4\" class=\"data row5 col4\" >0.7284</td>\n",
              "      <td id=\"T_843ce_row5_col5\" class=\"data row5 col5\" >0.3938</td>\n",
              "      <td id=\"T_843ce_row5_col6\" class=\"data row5 col6\" >0.4048</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_843ce_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
              "      <td id=\"T_843ce_row6_col0\" class=\"data row6 col0\" >0.6972</td>\n",
              "      <td id=\"T_843ce_row6_col1\" class=\"data row6 col1\" >0.7594</td>\n",
              "      <td id=\"T_843ce_row6_col2\" class=\"data row6 col2\" >0.8186</td>\n",
              "      <td id=\"T_843ce_row6_col3\" class=\"data row6 col3\" >0.6588</td>\n",
              "      <td id=\"T_843ce_row6_col4\" class=\"data row6 col4\" >0.7301</td>\n",
              "      <td id=\"T_843ce_row6_col5\" class=\"data row6 col5\" >0.3943</td>\n",
              "      <td id=\"T_843ce_row6_col6\" class=\"data row6 col6\" >0.4065</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_843ce_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
              "      <td id=\"T_843ce_row7_col0\" class=\"data row7 col0\" >0.7051</td>\n",
              "      <td id=\"T_843ce_row7_col1\" class=\"data row7 col1\" >0.7636</td>\n",
              "      <td id=\"T_843ce_row7_col2\" class=\"data row7 col2\" >0.7567</td>\n",
              "      <td id=\"T_843ce_row7_col3\" class=\"data row7 col3\" >0.6861</td>\n",
              "      <td id=\"T_843ce_row7_col4\" class=\"data row7 col4\" >0.7197</td>\n",
              "      <td id=\"T_843ce_row7_col5\" class=\"data row7 col5\" >0.4103</td>\n",
              "      <td id=\"T_843ce_row7_col6\" class=\"data row7 col6\" >0.4125</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_843ce_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
              "      <td id=\"T_843ce_row8_col0\" class=\"data row8 col0\" >0.7160</td>\n",
              "      <td id=\"T_843ce_row8_col1\" class=\"data row8 col1\" >0.7776</td>\n",
              "      <td id=\"T_843ce_row8_col2\" class=\"data row8 col2\" >0.8251</td>\n",
              "      <td id=\"T_843ce_row8_col3\" class=\"data row8 col3\" >0.6772</td>\n",
              "      <td id=\"T_843ce_row8_col4\" class=\"data row8 col4\" >0.7439</td>\n",
              "      <td id=\"T_843ce_row8_col5\" class=\"data row8 col5\" >0.4321</td>\n",
              "      <td id=\"T_843ce_row8_col6\" class=\"data row8 col6\" >0.4428</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_843ce_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
              "      <td id=\"T_843ce_row9_col0\" class=\"data row9 col0\" >0.7198</td>\n",
              "      <td id=\"T_843ce_row9_col1\" class=\"data row9 col1\" >0.7813</td>\n",
              "      <td id=\"T_843ce_row9_col2\" class=\"data row9 col2\" >0.8243</td>\n",
              "      <td id=\"T_843ce_row9_col3\" class=\"data row9 col3\" >0.6817</td>\n",
              "      <td id=\"T_843ce_row9_col4\" class=\"data row9 col4\" >0.7462</td>\n",
              "      <td id=\"T_843ce_row9_col5\" class=\"data row9 col5\" >0.4396</td>\n",
              "      <td id=\"T_843ce_row9_col6\" class=\"data row9 col6\" >0.4496</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_843ce_level0_row10\" class=\"row_heading level0 row10\" >Mean</th>\n",
              "      <td id=\"T_843ce_row10_col0\" class=\"data row10 col0\" >0.7013</td>\n",
              "      <td id=\"T_843ce_row10_col1\" class=\"data row10 col1\" >0.7648</td>\n",
              "      <td id=\"T_843ce_row10_col2\" class=\"data row10 col2\" >0.8045</td>\n",
              "      <td id=\"T_843ce_row10_col3\" class=\"data row10 col3\" >0.6670</td>\n",
              "      <td id=\"T_843ce_row10_col4\" class=\"data row10 col4\" >0.7292</td>\n",
              "      <td id=\"T_843ce_row10_col5\" class=\"data row10 col5\" >0.4026</td>\n",
              "      <td id=\"T_843ce_row10_col6\" class=\"data row10 col6\" >0.4118</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_843ce_level0_row11\" class=\"row_heading level0 row11\" >Std</th>\n",
              "      <td id=\"T_843ce_row11_col0\" class=\"data row11 col0\" >0.0099</td>\n",
              "      <td id=\"T_843ce_row11_col1\" class=\"data row11 col1\" >0.0099</td>\n",
              "      <td id=\"T_843ce_row11_col2\" class=\"data row11 col2\" >0.0207</td>\n",
              "      <td id=\"T_843ce_row11_col3\" class=\"data row11 col3\" >0.0102</td>\n",
              "      <td id=\"T_843ce_row11_col4\" class=\"data row11 col4\" >0.0098</td>\n",
              "      <td id=\"T_843ce_row11_col5\" class=\"data row11 col5\" >0.0198</td>\n",
              "      <td id=\"T_843ce_row11_col6\" class=\"data row11 col6\" >0.0203</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Processing:   0%|          | 0/7 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "11b929d3a89b4b289116f2d53b49bb08"
            }
          },
          "metadata": {
            "application/vnd.jupyter.widget-view+json": {
              "colab": {
                "custom_widget_manager": {
                  "url": "https://ssl.gstatic.com/colaboratory-static/widgets/colab-cdn-widget-manager/b3e629b1971e1542/manager.min.js"
                }
              }
            }
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 10 folds for each of 9 candidates, totalling 90 fits\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": []
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).\n",
            "Intercept: [-0.25359762]\n",
            "Coefficients: [[-3.20516366e-02  2.46050876e-01 -2.08879201e-01 -1.14348876e-01\n",
            "  -5.81221306e-01 -3.56049917e-01 -2.45475451e-01 -2.43504112e-01\n",
            "  -2.47572039e-01 -5.50557166e-01 -7.41035972e-01 -5.63880412e-01\n",
            "  -3.56580435e-01 -2.33960444e-01  1.23418096e-01  3.62606602e-01\n",
            "  -4.18663914e-02 -5.68422941e-02 -1.07091691e-01 -4.94573225e-01\n",
            "   6.97655344e-02 -3.04277706e-01 -4.94593237e-02 -8.09216497e-02\n",
            "   9.67896678e-02 -2.68225965e-02  5.48209358e-01  8.70180255e-01\n",
            "  -5.18345770e-01  7.07252586e-02 -7.19281987e-04 -1.84163939e+00\n",
            "  -3.48203670e-02 -1.26873379e-02 -4.36019217e-01  4.95712868e-01\n",
            "  -1.55356982e-01  1.40812520e-01  4.69659107e-03  1.30935627e-02\n",
            "   7.48078464e-03]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plotting feature importance\n",
        "plot_model(tuned_model, plot='feature')\n"
      ],
      "metadata": {
        "id": "hPgaYYWlbnex",
        "outputId": "3bc0f0ba-3188-4eba-e6af-c78817f69bcb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485
        }
      },
      "id": "hPgaYYWlbnex",
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": []
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8837e4a2-9ab5-4c7a-87b0-b8447540363b",
      "metadata": {
        "id": "8837e4a2-9ab5-4c7a-87b0-b8447540363b"
      },
      "source": [
        "### Making Predictions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "id": "762c7f23-a8a7-40a9-92ca-7549e718cbee",
      "metadata": {
        "id": "762c7f23-a8a7-40a9-92ca-7549e718cbee",
        "outputId": "9156fc68-e4cf-40c3-a5e7-666219403ce1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 589
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7f34507a1780>"
            ],
            "text/html": [
              "<style type=\"text/css\">\n",
              "</style>\n",
              "<table id=\"T_0a58b\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th class=\"blank level0\" >&nbsp;</th>\n",
              "      <th id=\"T_0a58b_level0_col0\" class=\"col_heading level0 col0\" >Model</th>\n",
              "      <th id=\"T_0a58b_level0_col1\" class=\"col_heading level0 col1\" >Accuracy</th>\n",
              "      <th id=\"T_0a58b_level0_col2\" class=\"col_heading level0 col2\" >AUC</th>\n",
              "      <th id=\"T_0a58b_level0_col3\" class=\"col_heading level0 col3\" >Recall</th>\n",
              "      <th id=\"T_0a58b_level0_col4\" class=\"col_heading level0 col4\" >Prec.</th>\n",
              "      <th id=\"T_0a58b_level0_col5\" class=\"col_heading level0 col5\" >F1</th>\n",
              "      <th id=\"T_0a58b_level0_col6\" class=\"col_heading level0 col6\" >Kappa</th>\n",
              "      <th id=\"T_0a58b_level0_col7\" class=\"col_heading level0 col7\" >MCC</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th id=\"T_0a58b_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
              "      <td id=\"T_0a58b_row0_col0\" class=\"data row0 col0\" >Logistic Regression</td>\n",
              "      <td id=\"T_0a58b_row0_col1\" class=\"data row0 col1\" >0.6958</td>\n",
              "      <td id=\"T_0a58b_row0_col2\" class=\"data row0 col2\" >0.7603</td>\n",
              "      <td id=\"T_0a58b_row0_col3\" class=\"data row0 col3\" >0.7980</td>\n",
              "      <td id=\"T_0a58b_row0_col4\" class=\"data row0 col4\" >0.6626</td>\n",
              "      <td id=\"T_0a58b_row0_col5\" class=\"data row0 col5\" >0.7240</td>\n",
              "      <td id=\"T_0a58b_row0_col6\" class=\"data row0 col6\" >0.3916</td>\n",
              "      <td id=\"T_0a58b_row0_col7\" class=\"data row0 col7\" >0.4001</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Return on Assets %  Return on Capital %  Return on Equity %  \\\n",
              "3066            -0.864552            -1.015150           -8.815294   \n",
              "18789            0.035979             0.046731            0.069553   \n",
              "22411            0.058969             0.072542           -0.025634   \n",
              "25762           -0.033809            -0.048830           -2.191641   \n",
              "16659           -0.472274             0.000000            0.000000   \n",
              "7141            -2.422000             0.000000            0.000000   \n",
              "6593            -0.019000            -0.020000            0.635000   \n",
              "20986           -0.187823            -0.194118           -0.506648   \n",
              "14251           -0.009000            -0.014000           -0.282000   \n",
              "5968             0.040000             0.058000            0.089000   \n",
              "\n",
              "       Return on Common Equity %  Gross Margin %  SG&A Margin %  \\\n",
              "3066                   -8.815294        0.791531      10.335556   \n",
              "18789                   0.069553        0.101793       0.059376   \n",
              "22411                  -0.025634        0.341427       0.265989   \n",
              "25762                  -2.221697        0.249114       0.254602   \n",
              "16659                   0.000000        0.165409       1.547432   \n",
              "7141                    0.000000        0.692000      10.451000   \n",
              "6593                    0.574000        0.584000       0.298000   \n",
              "20986                  -0.506755        0.255752       1.960052   \n",
              "14251                  -0.276000        0.555000       0.584000   \n",
              "5968                    0.077000        0.153000       0.062000   \n",
              "\n",
              "       EBITDA Margin %  EBITA Margin %  EBIT Margin %  \\\n",
              "3066          0.000000        0.000000       0.000000   \n",
              "18789         0.053559        0.028460       0.028687   \n",
              "22411         0.120445        0.076748       0.075437   \n",
              "25762        -0.001467       -0.008473      -0.026100   \n",
              "16659        -1.559778       -1.610707      -1.610707   \n",
              "7141          0.000000        0.000000       0.000000   \n",
              "6593          0.286000       -0.133000      -0.133000   \n",
              "20986        -1.713229       -2.048954      -2.049344   \n",
              "14251        -0.016000       -0.030000      -0.030000   \n",
              "5968          0.112000        0.086000       0.084000   \n",
              "\n",
              "       Earnings from Cont. Ops Margin %  ...  Total Debt/EBITDA  \\\n",
              "3066                           0.000000  ...           0.000000   \n",
              "18789                          0.011744  ...           3.381551   \n",
              "22411                         -0.023808  ...           5.819322   \n",
              "25762                         -0.238901  ...           2.172133   \n",
              "16659                         -1.729942  ...           0.000000   \n",
              "7141                           0.000000  ...           0.000000   \n",
              "6593                           2.607000  ...           0.000000   \n",
              "20986                         -2.038983  ...           0.000000   \n",
              "14251                         -0.173000  ...           0.000000   \n",
              "5968                           0.070000  ...           1.300000   \n",
              "\n",
              "       Net Debt/EBITDA  Total Debt/(EBITDA-CAPE)  Net Debt/(EBITDA-CAPE)  \\\n",
              "3066          0.000000                  0.000000                0.000000   \n",
              "18789         3.179429                  6.716897                5.949550   \n",
              "22411         5.751708                  9.458703                9.348328   \n",
              "25762         1.982071                  4.235659                3.909839   \n",
              "16659         0.000000                  0.000000                0.000000   \n",
              "7141          0.000000                  0.000000                0.000000   \n",
              "6593          0.000000                  0.000000                0.000000   \n",
              "20986         0.000000                  0.000000                0.000000   \n",
              "14251         0.000000                  0.000000                0.000000   \n",
              "5968          0.000000                 28.700001                0.000000   \n",
              "\n",
              "       Altman Z Score  Cash flow to Net Debt  Total Debt to Total Assets  BR  \\\n",
              "3066        -5.830000               0.000000                    0.000000   1   \n",
              "18789        4.128180               0.044415                    0.120216   1   \n",
              "22411        0.235152              -0.046513                    0.339846   1   \n",
              "25762       -0.556629               0.018597                    0.019549   1   \n",
              "16659      -24.674486               0.000000                    0.000000   1   \n",
              "7141      -758.130005               0.000000                    0.000000   0   \n",
              "6593        38.040001               0.000000                    0.000000   0   \n",
              "20986       -1.389747               0.000000                    0.000000   1   \n",
              "14251       -0.370000               0.000000                    0.000000   0   \n",
              "5968         4.270000               0.000000                    0.052000   0   \n",
              "\n",
              "       prediction_label  prediction_score  \n",
              "3066                  1            0.5959  \n",
              "18789                 1            0.5964  \n",
              "22411                 1            0.5672  \n",
              "25762                 1            0.6181  \n",
              "16659                 1            0.6155  \n",
              "7141                  1            0.6542  \n",
              "6593                  0            0.8859  \n",
              "20986                 1            0.6412  \n",
              "14251                 1            0.5014  \n",
              "5968                  0            0.7681  \n",
              "\n",
              "[10 rows x 44 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-06ecf961-43e1-4089-b0d0-5ef1944ffe6e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Return on Assets %</th>\n",
              "      <th>Return on Capital %</th>\n",
              "      <th>Return on Equity %</th>\n",
              "      <th>Return on Common Equity %</th>\n",
              "      <th>Gross Margin %</th>\n",
              "      <th>SG&amp;A Margin %</th>\n",
              "      <th>EBITDA Margin %</th>\n",
              "      <th>EBITA Margin %</th>\n",
              "      <th>EBIT Margin %</th>\n",
              "      <th>Earnings from Cont. Ops Margin %</th>\n",
              "      <th>...</th>\n",
              "      <th>Total Debt/EBITDA</th>\n",
              "      <th>Net Debt/EBITDA</th>\n",
              "      <th>Total Debt/(EBITDA-CAPE)</th>\n",
              "      <th>Net Debt/(EBITDA-CAPE)</th>\n",
              "      <th>Altman Z Score</th>\n",
              "      <th>Cash flow to Net Debt</th>\n",
              "      <th>Total Debt to Total Assets</th>\n",
              "      <th>BR</th>\n",
              "      <th>prediction_label</th>\n",
              "      <th>prediction_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3066</th>\n",
              "      <td>-0.864552</td>\n",
              "      <td>-1.015150</td>\n",
              "      <td>-8.815294</td>\n",
              "      <td>-8.815294</td>\n",
              "      <td>0.791531</td>\n",
              "      <td>10.335556</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-5.830000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.5959</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18789</th>\n",
              "      <td>0.035979</td>\n",
              "      <td>0.046731</td>\n",
              "      <td>0.069553</td>\n",
              "      <td>0.069553</td>\n",
              "      <td>0.101793</td>\n",
              "      <td>0.059376</td>\n",
              "      <td>0.053559</td>\n",
              "      <td>0.028460</td>\n",
              "      <td>0.028687</td>\n",
              "      <td>0.011744</td>\n",
              "      <td>...</td>\n",
              "      <td>3.381551</td>\n",
              "      <td>3.179429</td>\n",
              "      <td>6.716897</td>\n",
              "      <td>5.949550</td>\n",
              "      <td>4.128180</td>\n",
              "      <td>0.044415</td>\n",
              "      <td>0.120216</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.5964</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22411</th>\n",
              "      <td>0.058969</td>\n",
              "      <td>0.072542</td>\n",
              "      <td>-0.025634</td>\n",
              "      <td>-0.025634</td>\n",
              "      <td>0.341427</td>\n",
              "      <td>0.265989</td>\n",
              "      <td>0.120445</td>\n",
              "      <td>0.076748</td>\n",
              "      <td>0.075437</td>\n",
              "      <td>-0.023808</td>\n",
              "      <td>...</td>\n",
              "      <td>5.819322</td>\n",
              "      <td>5.751708</td>\n",
              "      <td>9.458703</td>\n",
              "      <td>9.348328</td>\n",
              "      <td>0.235152</td>\n",
              "      <td>-0.046513</td>\n",
              "      <td>0.339846</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.5672</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25762</th>\n",
              "      <td>-0.033809</td>\n",
              "      <td>-0.048830</td>\n",
              "      <td>-2.191641</td>\n",
              "      <td>-2.221697</td>\n",
              "      <td>0.249114</td>\n",
              "      <td>0.254602</td>\n",
              "      <td>-0.001467</td>\n",
              "      <td>-0.008473</td>\n",
              "      <td>-0.026100</td>\n",
              "      <td>-0.238901</td>\n",
              "      <td>...</td>\n",
              "      <td>2.172133</td>\n",
              "      <td>1.982071</td>\n",
              "      <td>4.235659</td>\n",
              "      <td>3.909839</td>\n",
              "      <td>-0.556629</td>\n",
              "      <td>0.018597</td>\n",
              "      <td>0.019549</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.6181</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16659</th>\n",
              "      <td>-0.472274</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.165409</td>\n",
              "      <td>1.547432</td>\n",
              "      <td>-1.559778</td>\n",
              "      <td>-1.610707</td>\n",
              "      <td>-1.610707</td>\n",
              "      <td>-1.729942</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-24.674486</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.6155</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7141</th>\n",
              "      <td>-2.422000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.692000</td>\n",
              "      <td>10.451000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-758.130005</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.6542</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6593</th>\n",
              "      <td>-0.019000</td>\n",
              "      <td>-0.020000</td>\n",
              "      <td>0.635000</td>\n",
              "      <td>0.574000</td>\n",
              "      <td>0.584000</td>\n",
              "      <td>0.298000</td>\n",
              "      <td>0.286000</td>\n",
              "      <td>-0.133000</td>\n",
              "      <td>-0.133000</td>\n",
              "      <td>2.607000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>38.040001</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.8859</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20986</th>\n",
              "      <td>-0.187823</td>\n",
              "      <td>-0.194118</td>\n",
              "      <td>-0.506648</td>\n",
              "      <td>-0.506755</td>\n",
              "      <td>0.255752</td>\n",
              "      <td>1.960052</td>\n",
              "      <td>-1.713229</td>\n",
              "      <td>-2.048954</td>\n",
              "      <td>-2.049344</td>\n",
              "      <td>-2.038983</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-1.389747</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.6412</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14251</th>\n",
              "      <td>-0.009000</td>\n",
              "      <td>-0.014000</td>\n",
              "      <td>-0.282000</td>\n",
              "      <td>-0.276000</td>\n",
              "      <td>0.555000</td>\n",
              "      <td>0.584000</td>\n",
              "      <td>-0.016000</td>\n",
              "      <td>-0.030000</td>\n",
              "      <td>-0.030000</td>\n",
              "      <td>-0.173000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-0.370000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.5014</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5968</th>\n",
              "      <td>0.040000</td>\n",
              "      <td>0.058000</td>\n",
              "      <td>0.089000</td>\n",
              "      <td>0.077000</td>\n",
              "      <td>0.153000</td>\n",
              "      <td>0.062000</td>\n",
              "      <td>0.112000</td>\n",
              "      <td>0.086000</td>\n",
              "      <td>0.084000</td>\n",
              "      <td>0.070000</td>\n",
              "      <td>...</td>\n",
              "      <td>1.300000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>28.700001</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>4.270000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.052000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.7681</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10 rows × 44 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-06ecf961-43e1-4089-b0d0-5ef1944ffe6e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-06ecf961-43e1-4089-b0d0-5ef1944ffe6e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-06ecf961-43e1-4089-b0d0-5ef1944ffe6e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "predictions = predict_model(model)\n",
        "\n",
        "predictions.head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "6c906372",
      "metadata": {
        "id": "6c906372"
      },
      "source": [
        "### Plotting the Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "id": "38b36263",
      "metadata": {
        "id": "38b36263",
        "outputId": "b38963ce-d2d7-4a49-e04e-a0a148674267",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 775
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": []
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2400x1650 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAACTAAAAZCCAYAAAAJdV7yAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAC4jAAAuIwF4pT92AAEAAElEQVR4nOzdd3QVdfo/8Cch9N5BQRFXBVGkiRR7R0RFxV7Wtff6taxldW2rrn0ta1u7sopdUREBRREsCIqwKAgqID0gHZL8/vCQHzc3gSQkGZDX65w9Z+e5M595cnNnEpl3Pp+MvLy8vAAAAAAAAAAAAEhAZtINAAAAAAAAAAAAmy4BJgAAAAAAAAAAIDECTAAAAAAAAAAAQGIEmAAAAAAAAAAAgMQIMAEAAAAAAAAAAIkRYAIAAAAAAAAAABIjwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAAACAxAkwAAAAAAAAAAEBiBJgAAAAAAAAAAIDECDABAAAAAAAAAACJEWACAAAAAAAAAAASI8AEAAAAAAAAAAAkRoAJAAAAAAAAAABIjAATAAAAAAAAAACQGAEmAAAAAAAAAAAgMQJMAAAAAAAAAABAYgSYAAAAAAAAAACAxAgwAQAAAAAAAAAAiRFgAgAAAAAAAAAAEiPABAAAAAAAAAAAJEaACQAAAAAAAAAASIwAEwAAAAAAAAAAkBgBJgAAAAAAAAAAIDECTAAAAAAAAAAAQGIEmAAAAAAAAAAAgMQIMAEAAAAAAAAAAInJSroBAAAA/hi22267lO1bb701Dj/88IS6Kb0/ytcBG5O99947pk2blr993nnnxfnnn59gR39sv/76a/zwww8xffr0+O2332L58uVRtWrVqFGjRjRo0CBat24dW265ZVSpUiXpVjd4eXl5MXDgwHj77bfj22+/jezs7MjJyYmaNWvG5ptvHo888kg0atQo6TbLzYknnhijRo3K3+7bt2/84x//SLAjKL1ffvkl9tlnn5Ta008/HbvssktCHQEAwKZFgAkAANikFXxo3r1793jyySeTawgKKOxhWklVqVIl6tSpE3Xq1Iltttkm2rdvH7vuumu0adOmjLoENnSjRo2Kt956K4YNGxa//vrrOvevXLlydO7cOfbaa6845JBDokGDBhXQ5cZl6dKlcd5558Xw4cPTXsvOzo7s7OxYtmxZAp2xMXnllVfiqquuSqs3b948Pvzww8jMLLtFFGbPnh177rlnrFq1Ku21wYMHR4sWLcrsXAAAACUlwAQAAAB/cCtWrIg5c+bEnDlzYvLkyfHee+/FHXfcEe3bt48zzjgj9ttvv6RbBMrJsGHD4u67747x48eX6LiVK1fGZ599Fp999lncc889ccQRR8T5558f9erVK59GN0J33nlnoeElKAszZsyITz75JHbbbbcyG/P1118vNLwEAACwIRBgAgAA4A9r8uTJ0atXr4iI2HzzzePDDz9MuKMNy9ixY+O8886LAw88MG655ZaoWbNm0i0BZWTRokVxzTXXxMCBA4vcp3bt2tG8efOoXr16LF26NLKzs2PWrFlp+y1dujSeffbZeO+99+KWW26J3XffvTxb3ygsXbo0Xn755ZRapUqV4uijj47u3btH1apVY/78+QJfrJcBAwaUaYDp1VdfLbOxKsKuu+4as2fPjggzRAEAwKZAgAkAAIAy8b///S/pFtKMHTu2xMdsiF9HQYcffnj06dOnWPvm5eXF4sWLY+7cuTF+/PhCl4969913Y968efHoo49GtWrVyqNlWCvhwrI1Y8aM+POf/xxTpkxJe61t27bRr1+/2H333aNly5Zpr8+dOzdGjRoVr776anz88ceRm5ub/9rs2bPjrLPOiltuuSUOO+ywcvwKNnzjx4+PpUuXptTOOeecOO+88xLqKBnPPPNM0i38oQ0ePDiys7PLJAg3duzY+OGHH9a/qQoyffr0/PBSRWnRosVG8XsgAAD8UQkwAQAA8Ic1ZsyYpFsoFy1btowePXqU6tjc3Nx4++2345Zbbol58+bl10eNGhV33HFHXHvttWXVJpCAuXPnxgknnBC//PJLSr1BgwZx6aWXxhFHHBEZGRlFHt+wYcPo1atX9OrVK8aNGxfXXXddfPvtt/mv5+TkxJVXXhn16tWLPffcs7y+jA1ewSBoRGzyoS7KRqNGjWLOnDkR8fsSsG+88UacdNJJ6z3uK6+8Uug5NlR/1N/hAACAomUm3QAAAACUl9LMwPRHl5mZGX369IkXXnghGjdunPLaiy++GJMmTUqoM2B95eTkxPnnn58WXtp6663j9ddfjyOPPHKt4aWC2rVrFy+88EL07t07pZ6XlxdXXHFFzJw5s0z63hgtX748rdakSZMEOuGPZuedd06ZDXHN4FFprVixIt5+++387Z49e673mOXN73AAALDpEWACAADgD2n58uWWAVmLVq1apc22tGrVqnjttdeSaQhYb0899VR8+eWXKbXWrVvHM888U+pwTZUqVeL222+Pbt26pdSzs7Pj3nvvLXWvG7u8vLy0WpUqVRLohD+aatWqpVxv48ePj3Hjxq3XmB988EEsXLgwf3u33XZbr/EqggATAABsegSYAAAA+EP67rvvYuXKlUm3sUE74IADolmzZim1oUOHJtMMsF6ys7PjgQceSKlVqlQpbr/99mjYsOF6jZ2VlRW33XZb1KxZM6U+bNiw+O2339ZrbCDdXnvtlbI9YMCA9RpvzVmcsrKyNvgAU05OznqHtgAAgI1PVtINAAAAbMrmzJkTH330UYwYMSImTJgQ2dnZkZ2dHVlZWVG/fv2oX79+tG/fPrp16xY9e/aMWrVqlfpckyZNioEDB8bw4cNj1qxZMWfOnMjMzIymTZvGjjvuGL17944999wzZXmhLl26pDycvvXWW+Pwww8vdPztttsuZXtt+65p0aJF8cEHH8TIkSPj+++/j19//TUWL14cy5cvj+rVq0fdunVjyy23jLZt28Yee+wRO++8c2RmFv73OPfff3/861//KvS1adOmpfW4+eabx4cfflgmX8dqU6dOjYEDB8bnn38ekydPjnnz5kVOTk7Uq1cvmjVrFl26dIl99tkndt5552KPWZ522WWXeP311/O3p0yZUuIxfvvttxg0aFB8/vnn8e2338a8efNiwYIFUalSpahdu3a0bNkyOnToEPvss0906dKl1L3m5eXF559/HgMHDoyvv/46Zs+eHdnZ2VG1atVo2bJldOnSJfr27Rvt2rXLP2b8+PFx2GGHpYwzePDgaNGiRdr4I0eOjJNOOil/u0aNGjF69Oj8c7/yyivx6quvxsSJE2PJkiXRsGHDGDZs2Dr7XrVqVQwbNixGjhwZo0ePjlmzZsX8+fMjNzc3atasGZtvvnm0bds2dtttt9h7771LPYtLWV5LFX2OvffeO6ZNm5a/fd5558X5559f7L7K81661157xfTp0/O377333jjwwAPztydPnhyvv/56/jW/aNGiqFy5ctSpUyf+9Kc/RdeuXePII49c7xDRujz77LOxaNGilNpJJ50UO+64Y5mM36xZszjxxBPjmWeeiX333Td69+4dPXv2jKys4v/z4rfffhuffPJJjBw5MqZNmxbZ2dmxePHiqFmzZtSrVy+aN28eXbt2jR49ekSHDh2KPe5nn30WJ598cv72mtduRERubm4MHTo03n///fjmm2/i119/jWXLlkXNmjWjQYMG0b59+9hzzz3jgAMOiEqVKhV6jl9++SX22WeftfZR8OdHROr95sorr4xXX301/7WuXbvGM888U+yvs7BzFPdaWb58eQwbNiyGDx8eEydOjF9++SX/2q1atWrUrl07ttxyy9h2221j9913jx49ekTlypXXOe6JJ54Yo0aNyt/u27dv/OMf/yj217Nw4cIYPnx4fPrppzFu3LiYN29eZGdnR0ZGRtSrVy/q1asX22+/fXTr1i122223qF+/frHHPuGEE+Lzzz/P37788svj1FNPzd+eMWNGvPHGG/Hpp5/GpEmTYsGCBZGZmRl16tSJVq1aRefOneOII46Ili1bFvucZWXvvfeO66+/Pn+mr7feeiuuuOKKqFq1aonHmjlzZnzyySf52506dYp69eqtd49TpkyJ999/P7799tv4/vvv86/n3NzcqF27djRo0CDatm0bnTp1ioMPPjjq1Kmz1vEK/gwuqLDrr+DP84KfxzW/5z///HM8+uij8emnn8asWbOiUqVKcemll8YJJ5yQv39h1/nTTz8du+yyS/72zJkzo0+fPrFgwYL8Wvv27aN///4l+pl6zjnnxODBg/O3s7Ky4sUXXyyzezYAAGyMBJgAAAASMG/evHjkkUfi+eefj+XLl6e9vmLFiliyZElMmzYtvv3223j++eejXr16ccYZZ8QJJ5xQogdYixYtittuuy3++9//Fvr6lClTYsqUKfHmm29Gu3bt4vbbb48//elPERGxePHi0n2BxbBs2bL497//HU888UQsW7asyN4XLVoU06ZNi08//TQef/zxaN26dVx66aWx7777lltvpTFt2rS47bbb4v333y90aaHZs2fH7Nmz45tvvon//Oc/sf3228d1110XHTt2TKDb/69x48Yp2ytWrIgFCxZE3bp113nsokWL4oEHHoj+/fsX+llZuXJlLFu2LGbPnh1fffVVPPHEE9G+ffu4/vrrU0JGxTF16tS46qqr0pbHWn2e8ePHx/jx4+OZZ56J3r17x9/+9reoW7dumXyGc3Jy4oILLogPPvggpf7rr7+u9bi8vLx44YUX4rHHHksJ56xpddBm3Lhx8fLLL0eTJk3iqquuioMOOqjY/VXEtbShXq8VcS9dM9S5piVLlsStt94aL7/8cuTm5qa8tnLlyliyZEn8+uuvMXz48HjggQfikksuiT//+c+l+jrXJTc3N15++eWUWlZWVvzlL38p0/OceeaZcc4555Q4RPHVV1/F3XffnRIsWNPq62DKlCkxYsSIuPfee6NDhw5x0UUXRffu3dc5flHfo4jfZ+O74oorYuLEiWmvLViwIBYsWBA//vhjvP7669GqVau47777Cg0ibaxycnLi2WefjQceeCAlcLGmJUuWxJIlS2LmzJkxatSoePbZZ6N58+Zx7rnnRr9+/cqlr8WLF8eTTz4Z//nPf4qcxWvp0qUxY8aMGD9+fAwYMCBq1KgRJ510Upx22mlRu3btdZ6jqM/FqlWr4v7774/HH3+80Jkaly1bFrNmzYpRo0bFI488EqecckpceumlJQ58ro8mTZpEhw4d8oN4CxYsiEGDBsXBBx9c4rFef/31lHvU+t6PJ0yYELfffntKKKqgefPmxbx58+KHH36IN998M2677bY46aST4vzzz09kqcWRI0fG2WefnfY7wfz580s8VtOmTePaa6+Nyy67LL82duzYeP7551PCUGvzwQcfpISXIiLOOuss4SUAADZ5lpADAACoYN9//30cfvjh8Z///KfQB+5Fyc7Ojttvvz1OPvnkyM7OLtYxv/32Wxx77LFFhpcKGjduXBx11FH5IZGCD+XLyoIFC+LPf/5zPPjgg0WGIYoyefLkOPfcc+O+++4rl95KY8SIEdG3b9947733Cg0vFea7776L4447Lp588snybW4dSvs9njRpUvTr1y+eeOKJEoWExo4dG0ceeWQ89thjxT7mu+++i759+xYaXirM22+/Hccee2zMmTMncnJyin2eojz44INp4aV1WbRoUZx77rlxww03FBleKsysWbPi4osvjgsuuKBYSyBWxLW0oV6vFXkvLWjRokVx8sknx3//+99iXUPLly+PW2+9tUSf+5L45ptvYsaMGSm13XffPZo0aVKm56lRo0aJw0tPPvlkHH/88UWGl4ry9ddfx5///Of497//XaLj1vTZZ5/FscceW2h4qTBTpkyJ4447Ln766adSn3NDsmLFijj//PPjlltuKTK8VJQZM2bENddcE1dddVWxf64V18yZM+OYY46J++67r0RLEC5ZsiQefvjh6NevX4nuq2tauXJlnHfeefHwww8X6x6bk5MTjz32WNx4442lOt/6WHOmt4jSLyO35vJxmZmZaeOWxMCBA6Nfv35rDS8VZtmyZfHII4/ECSecEEuWLCn1+Utj/vz5ccEFF5RpKL9Pnz5xwAEHpNTuvvvumDlz5jqPXbx4cdx0000ptXbt2sXZZ59dZv0BAMDGygxMAAAAFWjSpElx3HHHxcKFC1PqjRo1in322Sd22mmnaNCgQeTk5OTPWjNo0KBYunRp/r6jR4+OE088MV566aWoVq1akefKy8uL8847L+3BbWZmZuyxxx6x2267RbNmzWLFihUxYcKEePPNN2PatGmxePHiOO+88+K1114r0699Tddee23K8j4Rvy/ntu+++8a2224bDRo0iEqVKsW8efNi+vTpMWTIkPjmm29S9n/ggQeidevWKbMRHHbYYdG5c+eIiHjttddSlkZr1KhR3HHHHSljlGYploJGjx4dZ511Vkqwo1KlStGjR4/Yfffdo1mzZlGlSpWYNWtWjBgxIgYNGpT/0DQ3NzduvfXWqFmzZrnNcrEuBWcRWr301dpMnz49jj/++LSZC5o3bx4HHnhgbL/99lGvXr1YvHhx/PzzzzF8+PAYOXJk/n65ublxxx13RFZW1jpnpJk9e3acccYZaQ8ea9asGQcccEB06dIlGjZsGAsWLIgvvvgi3nnnnVi0aFFMmjQpLrroojj33HOL8S4Ubd68eSUOnaxcuTJOP/30+OqrrwrtuWPHjtG0adNYsWJFzJo1Kz7//PMYPHhwrFixIn/f1WG4e+65p8glrSLK71qq6HOUVEXeSwtz/fXXx9ixYyPi96XVevXqlf+5X7JkSUyePDkGDhyYdv+95557Yr/99ostt9yylF954T7++OO0Wklm8SovjzzySNx5551p9Z122il233332GqrraJWrVqxePHimDp1anz88cdpQcW77rorcnJy4pxzzinRuWfPnh0XXnhh/r159fKdLVq0iKpVq8b8+fNjzJgx8cYbb6Qsvbdo0aK45ppr4umnn04Zr3HjxvGf//wnf3v48OHx+OOPp+yz5utrHpeUu+++O22Wl0aNGsW+++4b22+/fTRq1CgqV64c8+fPj5kzZ+a//2sGP1955ZVo1apVnHnmmWXS09y5c+Poo49OC9zVrl079t133+jYsWM0bNgwMjMzY+7cuTFmzJgYNGhQStjwxx9/jGOOOSZeffXVaNSoUYnO/69//SuGDBkSERH169fPvyfXr18/li9fHlOnTo3Bgwen3fOef/756NWrV3Tt2rV0X3gpHHzwwXHHHXfEqlWrIuL3QN60adNi8803L/YYo0ePjh9//DF/u0uXLtG0adNS9fPtt9/G//3f/6UFv1Zfz82bN4/69etHRkZGzJs3L8aMGRMDBw5MuU+PGTMmrrzyykJDrW3atMm/hiZMmBC33XZbyut33HFH2ve7ONfXo48+Wuqw6tpcf/318eWXX8acOXMi4vd7x4033ljkUsar3XvvvSmf/6pVq+b/TgQAAJs6vxUDAABUkFWrVsXll1+e9sD9lFNOiQsvvDCqV6+edsyxxx4bs2fPjssvvzw+/fTT/PrEiRPjnnvuiSuvvLLI8w0cODA+++yzlFqjRo3ivvvuyw/5rNarV68499xz41//+lf8+9//jnnz5sXtt99emi9zncaOHRvvvfdeSu2ss86KCy64oMigxrnnnhsTJkyISy+9NH744Yf8+p133hn7779//nIkLVu2jJYtW0ZEpD0Er1q1avTo0aMsv5RYvHhxXHzxxSnhpaZNm8Y999wTnTp1Stv/qKOOigkTJsRZZ52V8vDqlltuiW7duuX3XlFyc3Pj888/T6ltt912a12OafWMHmuGl7KysvKXxyrse3jGGWfEmDFj4uKLL06ZNeO2226LXXbZJdq2bVvk+f71r3/F7NmzU2odO3aMe+65J5o1a5ZSP/TQQ+OCCy6Iq6++OoYNGxaff/552rJaJTVgwIBYtmxZZGZmxgknnBD9+vWLLbbYIvLy8mL69OmFHnPbbbelhZcOPfTQuOaaawoNhx1//PExc+bMuPLKK1Ou8/fffz+ef/75OPHEEws9T3leSxV5jpKq6HtpQe+991688847EfH7e1HUkmpnn3123HDDDfHCCy/k11auXBkvvfRSytJDZaFgYCzi91BBkr799tu49957U2p169aNO+64I/bYY49Cjzn77LPjk08+iYsuuijl+/vAAw/EnnvuGdtvv32xzp2XlxfXXnttZGdnR6NGjeKf//xnoUvRHXbYYXHWWWfFiSeeGFOnTs2vjxw5MiZNmhRbb711fq3gz5DClpAs658x62P27Nnx1FNPpdT69u0bN9xwQ5Hh3TPOOCN++eWXuPzyy1N+hq6e9ahBgwbr3dd1112XFl46+OCD49prr4169eql7d+vX7+44oor4oYbbog333wzvz5r1qy44YYb4v777y/2uceMGZM/m96RRx4ZV155ZaFL0Z1++umFhu9eeOGFCg0wNWrUKHbbbbf8wFVubm688sorcf755xd7jDVnX4r4/TNQWrfccktKeCkzMzNuvfXWOOywwwrd/4gjjoiLLroozj///Pjiiy/y6++99158/vnnsfPOO6fsX7du3fxrqLCfL506dYoWLVqUqOcVK1bk/x6wzTbbxLnnnhtdunSJ+vXrx8KFC4s1C1dRGjRoEDfeeGPKzEmDBg2KwYMHxz777FPoMePGjYtnn302pXbJJZek3GsAAGBTZgk5AACACtK/f//49ttvU2qnnHJKXHnllYU+cF+tcePG8fDDD0e7du1S6k899VRMmTKlyOMKPtSrVKlS/Otf/0oLL61WpUqVuOSSS/IfjL311ltr+3JKbdCgQSnb7du3j4svvnits8xE/P+/zK9bt25+bfr06WkhrYr0yCOPpDyIrVKlSjz44IOFhpdWa9OmTTz00EMpf2m/ZMmSePTRR8u118IMGjQoLRzUs2fPtR7z0ksvpX2Ob7vttjj11FPX+j3caaed4oUXXkh5AJ6bm7vWZXlmzJiRtmRO8+bN46GHHkoLL63WuHHjeOCBB2LXXXeNiPX7HOfl5cUbb7wRGRkZcdddd8XVV18d2267bVSrVi2qV69e6APH77//Pu3h5NFHHx233377Wme2atq0aTz66KNpD3Tvu+++mDdvXqHHVMS1tCFerxV9Ly1odXjp0ksvjYsvvrjIMEhGRkb89a9/TQsmfvjhh8U+V3F9//33Kdv16tWLLbbYoszPUxLXX399/swxEb/P7vbEE08UGV5arWfPnvHYY4+lfMZWrVoVN998c7HPvXTp0hgyZEjUqlUrnn322ULDS6s1bdo0brjhhrR6eXyfKtLgwYNTZlJq1qxZ3HjjjeucebBFixbx2GOPpXx+lixZkhZkLI2hQ4emLcd5wAEHxD//+c9Cw0ur1a5dO26//fbYa6+9Uurvv/9+jBgxotjnf++99yInJyeOPfbYuPnmmwsNL612xhlnpP2+NHTo0HJbWrcoBQNHr776arGX9Fu2bFkMHDgwf7tGjRppy54V16RJk9KC4ccee2yR4aXVGjRoEPfff3/avfmll14qVR8lNXTo0FiwYEF07NgxXnzxxejVq1c0btw4srKyokGDBqWejWq1vffeOw4//PCU2o033ljocnW5ublx3XXXpVyXXbt2jZNPPnm9egAAgD8SASYAAIAKsuYsHBG/L8F00UUXFevYqlWrxt/+9reUWm5ubrz66quF7j9hwoSYPHlySq1Xr17RsWPHdZ7rnHPOiQ4dOhSrr9JYc5aLiEgLbKxNkyZN4qSTTooOHTrEwQcfHGeeeeZaH3qWp2XLlsWLL76YUuvbt2/ssMMO6zy2bdu20atXr5Tam2++mbKEWHmbO3du3HLLLSm1zMzMOPLII4s8ZtWqVWlLJh1yyCHFXhasadOmccUVV6TUvvzyy5gwYUKh+6+53N5q55xzTtSvX3+t56lcuXLceuuta304XRxLly6NiRMnxlFHHZX2/SrKww8/nPJwecstt4xrrrmmWMdmZWXFrbfemhJuW7hwYcqsI2uqiGtpQ7xeK/JeWpSOHTvG6aefvs79qlSpEr17906pTZkyJWXWtvWVm5sbs2bNSqlV9GxuBX3zzTdps0KdfPLJxbo/RvweeCy4rOYXX3xRoqBZRMT//d//xVZbbbXO/bp3754WiizqvrSxKHjtdujQISpXrlysY2vUqBFnnHFG7LDDDnHggQfGqaeeWibLHha8dmvVqhXXXXfdWmf9Wy0zMzOuu+66tBncCoZc16VFixbFnnGtYHhoyZIlae9redtrr71S7pvTpk0rdmhr0KBB8dtvv+Vv77ffflGzZs1S9TF79uzo2rVrtG7dOj+YWvDeVpQGDRrE3nvvnVIrSfBsfXz99ddRpUqVuOOOO6JWrVrlco6rr746Nttss/ztGTNmxD333JO237PPPpsSvq1Zs2bceuutxfr8AwDApkKACQAAoAKMHTs2bYaMfv36RbVq1Yo9xk477RTbbbddSq2oYMOwYcPSasccc0yxzpOZmVnsMEBpFPyr9CVLlpTo+PPOOy/69+8fd955Z1xyySXRvn37smyv2IYPHx7Z2dkptWOPPbbYx++7775RqVKlqF+/fmy11VbRpk2b+OWXX8q4y8JNnDgxjjvuuLQlkI4//vi1ztoydOjQlCXgIiJl6ZTiOPjgg6Nx48YptTVniFhTwc9xtWrV4tBDDy3WeZo0aVLk0mslkZGREaeddlqx9p0/f37a1/KXv/ylREumtWzZMm3pmaLen4q4lja067Wi76VF+ctf/lLsh8477rhjynZOTk7aElrro7BlkNac+SoJBUMlGRkZJb4ejz766LRaSb5PDRo0SJsZZW0KzsxV8F63sVnfa7dfv34xYMCAuPfee+Pyyy9f7+XxZs2aFR999FFKrVevXtGoUaNij7HZZpvlz6632gcffBBLly4t9hgnnHBCse8XhQXuKvpzUaVKlejTp09KrbihrbJcPq5bt27xzDPPxMCBA2PUqFHxzTffFCsUv1rB5R9nzZpVYaHtXr16lWuos1atWnHLLbek/Ex47rnnUkKcM2fOTAs1XXXVVSVeEg8AAP7oBJgAAAAqwBdffJFWO/DAA0s8zn777ZeyPW3atLQlwCIixowZk7Jdo0aNEs2q1K1bt3J72NOkSZOU7ffffz/mz59fLucqTx9//HHKdv369aNNmzbFPn7//fePcePGxWeffRbvvvtuvPDCC9G6deuybjMiIhYtWhQ///xzvP3223HxxRfHoYcemjaTSfv27eOSSy5Z6zgFHz63bt26xD1nZWXFbrvtllIbPnx4ofsW/Bx36dJlncsfremII45Y75kN2rRpU+yluD755JOUpWEifg+qlVTBmSq+/vrrQpejqYhraUO7Xiv6XlqYypUrx5577lnsc605M8dqixYtKvbx67J8+fK02vrOPra+Ci411aFDhyKXfSzK9ttvH5tvvnlK7euvvy728XvssUeJwoMFv09l+T1KQsFr97PPPqvw2YPWNHr06LTl18ri2l26dGn873//K/Xxa1Pe125xFQweDRo0KBYsWLDWY2bMmJGyZGfz5s1jl112KbOeqlSpEpmZxX+0UFiosqJ+luy///7lfo7u3bvHCSeckL+dk5OTslzcTTfdlPJzfK+99kqbZQ4AABBgAgAAqBBrLhkR8fuyEcVZ1qagwmYvGT9+fFqt4EPKbbfdtthLx0T8PlvG+s62UJTu3bunbM+dOzeOO+64QoMJG7Jx48albG+77bYlCstkZmaWOlxz7733xnbbbVfs/3Xu3Dn23XffuOSSS+Kdd95Je4jctWvXePTRR6NGjRprPW/BJaFKu6RQwc/xpEmTUpZdi4iYN29eytI3EekzOKxLixYtolWrVqXqcbUuXboUe9+C70+NGjVKNLvIagVn7MnLy4sffvghbb+KuJY2tOu1ou+lhWnTpk2JgjHVq1dPq5Vkxph1KXjtRERUqlSpzMYvqaVLl8akSZNSagVnNyqugtdCSZZ1K3jsuhS8/5V0xqINTcFrd8WKFXHCCSfEhx9+mEg/Ba/diNJ9Ltbn2m3QoEGJZrwp72u3uNq1a5cya9zy5cvjrbfeWusxr776asrP+kMOOaREgaOyVtg9qeDMceWlJD/H18dll12W8vPou+++i6effjqGDBkS77//fn69fv36cdNNN1VITwAAsLHJSroBAACATUHBJY/+9Kc/lWqcwmZFmjx5cuy+++4ptZ9//jlluzRLVOy4447Rv3//Eh+3LgceeGA88MADKTMATZ48OY4//vho165dHHjggdGzZ89o27Ztog/b1qXgDEYFZwrZGDRo0CBOPfXU+Mtf/lKs97rg17xy5cr49NNPS3zegsGkpUuXxi+//JLy+f7pp5/Sjivt5/jHH38s8XGrlSSkVfD9qVGjRqnen8Ie6v7www+x0047pdQq4lra0K7Xir6XFqbgEojrUlh4tLDQUWkVFqZa1+ws5Wny5MlpM5GV9vtUcPazOXPmxMKFC6NOnTrrPLbgDETrUpKQ78agc+fO0bVr1xg1alR+bdasWXH22WfHVlttFb169Yrddtstdtxxxwr52gteu40aNYr69euXeJyirt3iKOm1W9i1VZbXbkkcfvjhceutt+ZvDxgwII4//vgi93/ttddStg877LAy7WfhwoXxySefxIgRI+LHH3+MX375JRYuXBhLly5Nu/6TVK9evahXr16FnKtatWpx2223xbHHHpv/Htx3331p96vrr7++VOFmAADYFAgwAQAAVICFCxembDdo0KBU4xR2XMEwyPLly9OWFGrYsGGJz1Xa2XXWpUqVKvHggw/GSSedFHPmzEl5bdy4cTFu3Li48847o06dOtGlS5fo1q1bdO/ePbbddtty6ac0li1blva+V9QDsvVVrVq16N27d/To0SP23XffqFatWrGOW7RoUdqMJMOHDy9y+beSmj9/fsqD6YLXTEQyn+OSLHs1a9aslO05c+bEKaecsl7nX62wpXYq4lra0K7XiryXFiXp5dkKqlOnTmRmZqbMtpJkgKmwa7csv0/FDTDVqlWrVOf8I7nrrrvihBNOSAtX/vjjj/Hggw/Ggw8+GDVq1IhOnTrFLrvsEt27d48ddthhvZfeLExZXbtVq1aNmjVrpizHtbFeuyXRp0+fuOOOO2LVqlUR8fv9d8KECYUuXfvFF1+kzMS50047ldkStb/99ls89NBD8cILL2wUs5Q1bdq0Qs+30047xemnnx4PP/xwRPw+k9ua71OfPn1KtXQiAABsKgSYAAAAKsCiRYtStte1VFdRatasuc6xC3ugVNyQyprK80Hf1ltvHS+//HJcffXV8cknnxS6z8KFC+PDDz/MX+5miy22iF69esUxxxwTm222Wbn1VhyFvcdVq1atsPMffvjh0adPn2Lt279//3j33Xfzt5cvXx5HHHFEdO7cuUTnXPNhcXkoOH5hy/SU5nO8viGGwpYQKkp5Pswt6v2viGtpQ7peK/JeWpQNbWa4rKysaNiwYcyePTu/NmPGjMT6Kex99H1KRuPGjeO///1v3HDDDfH2228Xus+SJUtSwqhNmjSJAw44II455phSz5xVmLK6diMiLcC0KXwmGjZsGLvvvnvKEoAvv/xyXHPNNWn7vvLKKynbZTX70uTJk+Pss89OC8RtyNbnc1Za5513XgwbNixtacOmTZvGddddV+H9AADAxkSACQAAoAIUDGOUJogR8fuD6nWNvWzZsrR9ClsGZV3K+6FP8+bN44knnogRI0bECy+8EEOHDk2bOWpNP/30U/z73/+OJ554Io466qi46KKLijULR3lYsWJFWq2w7015admyZfTo0aNY+7Zp0yZGjBiRPyNLXl5eXHvttfHaa6+V6HNR3svmFAz/FBZgKk1IrLAAREmUZGmlNWfAKWtrC0dVxLW0oVyvFXkv3Zi0bt06JcA0e/bsmDZtWiJLWxb2WS1JEHBNlSpVSqsV9jOOotWtWzfuuuuuOOWUU+K5556L999/f62B1FmzZsUzzzwTzz33XBx00EFx+eWXl8ksNmV17UakX78b87VbEkcccURKgOnNN9+Myy+/POVn+dKlS1NCy5UrV47evXuv97kXLlwYp512WkybNi3ttXbt2kXXrl2jefPmUbdu3ahfv37az87hw4fH448/vt59lFQSS0NWrlw5tthii7QAU926ddfrcw8AAJsCASYAAIAKUKNGjZQlTnJycko1zsqVK9NqBQMahT2sWb3kSElU1APB7t27R/fu3WPZsmXx2WefxUcffRTDhw9PWf5kTStXroznnnsuhg4dGk899VTKsmMVpbAHUIWFmjYEDRo0iIsuuihuuOGG/NqkSZPi4YcfjgsuuKDY4xQ2k9E555wTF154YZn0WVBh4aoN+XMckf4edenSJZ577rkKO39FXEtJX68VeS/dmGy//fYxcuTIlNro0aMTCTAV9j6W5tot6rgkZlT5I9hxxx3jH//4R9x4443x5ZdfxrBhw2L48OExceLEQvfPzc2Nt956K4YPHx6PPfZY7Ljjjut1/oLft9JeuxHp1+/GfO2WxB577BENGjSIefPmRUREdnZ2fPDBB3HQQQfl7/Pee++lBNT23nvvqFu37nqf+9Zbb00LL7Vq1Sr+8Y9/RMeOHdd5/K+//rrePWws3nnnnXjvvffS6hMnToz77rsvLrvssgS6AgCAjcPGO28uAADARqTgzCPFXe6koMKOK7jUW2HhmtLMWLFmSKAiVKtWLfbcc8+47rrr4v3334/BgwfH3//+99h///0LfWA9bdq0OOuss9Y6C0x5KSzMU57Lh62vY445Jtq1a5dSe+SRR+KHH34o9hg1a9ZMW36nPJeVK+xzXJow0sKFC8uinWIp+Lko72X3ilIR11JS12tF3ks3Jt26dUurDR48OIFOCn8fy/L7lNTMexuCspjlrXLlytGtW7e44oor4s0334zhw4fHbbfdFoccckihQZfs7Ow466yzYu7cuet13rK6diPS760b87VbEpUrV46DDz44pTZgwICU7fJYPm7hwoXx1ltvpdSaN28eL774YrHCSxHrF1jbmMyZMyclMF7Q448/Hl999VUFdgQAABsXASYAAIAKUPCh4Jw5c0o1TmEPEAuOXaNGjcjIyEiprV4+rCSmT59e4mPKUosWLeLoo4+O+++/Pz755JO4+uqr0x6A/vDDD9G/f/8K7y0rKyvq1auXUtuQZxfIzMyM66+/PiWAtHLlyrjmmmuK/UA8IyMj7bM2a9asMu1zTYWFYEoTRpoxY0ZZtFMs9evXT9kuz/enJCriWqqo67Ui76Ubk1122SXtmhk0aFCp35+1+eCDD+Kdd94pclnJwt7H0vZR2HGbSlilMOURLG7cuHEcdthhcccdd+SHmQouGTdnzpx45JFH1us8ZXXtLlmyJC0wvCmF2o444oiU7REjRuTfz2bMmBGjRo3Kf61hw4ax++67r/c5hwwZkjbL5EUXXZT2M29tVs8a9Ud37bXXRnZ2dv72XnvtFaecckr+dm5ublxxxRUbdOgdAACSJMAEAABQAbbddtuU7R9//LFU40yZMiWtts0226RsZ2ZmRpMmTVJqBZf9KI6xY8eW+JjyUqNGjTjppJPi5ZdfjgYNGqS89s477yTSU8H3/aeffkqkj+Jq3759HHXUUSm10aNHxwsvvFDsMdq2bZuyXZIZnEqqefPmabVffvmlxONU5Oe44Pszd+7cDe6hbUVcS+V5joq8l25MqlevHgceeGBKbeXKlfH888+X6XmWLl0af//73+Piiy+Oww47LD788MO0fVq3bp22lOnkyZNLdb6C36fNN998o14urGC4uLClDNdm9uzZZdlOmipVqsRhhx0Wr732WrRq1SrltYEDB67X2AWv3dmzZ5cqkFXYtVtw7D+yNm3apPysycnJiSFDhkTE78vHrRks7N27d2RlZa33OQv72bvvvvuWaIwxY8asdx8buldeeSXlnlizZs24/vrr48ILL4wWLVrk13/66ae4/fbbk2gRAAA2eAJMAAAAFaB9+/Yp2wsWLIjvv/++xOOMHj06ZTszMzNtabCIiC233DJluzQPjz/99NMSH1Pettxyy5S/ZI8o3xDN2my33XZpfZTkYWxeXl4MHTo0hgwZkv+/0gTNSuKSSy5JC5TceeedxZ49ascdd0zZnjRpUrnNMrT55punPXgt6ed45syZFfr5KPj+RER89tlnFXb+kqiIa6k8zlHR99KNycknn5wWkHnsscdKHfIqzJ133hkzZ86MiIgJEybE2WefnRZKq1KlSrRp0yal9uWXX5b4XLm5uWkBxMKusY1JwaUxS7osZkUFMhs0aBAXXnhhSm3mzJnrtSTnTjvtlFYrzeei4LUbsfF/Lkqqb9++KdtDhw6NiIj3339/rfuVVsHgXL169QpdSrcoixYtihEjRpRJLxuqX3/9NW655ZaU2mWXXRbNmjWL6tWrx9///veU11544YUYPnx4RbYIAAAbBQEmAACACtC1a9e02ltvvVWiMfLy8uLdd99NqbVt27bQ2SgKziQye/bsEj3k/+KLL0o9Y0ZxLFu2LMaMGVPih7cR6cGh5cuXl1VbJVJwWZacnJz8h4jFMXny5DjzzDPjrLPOyv9feb7nEb8v4XPZZZel1BYvXhw33HBDsY7v1q1bynZubm6pZtSZOnVqjBkzpsglqCJ+X6Zvq622Sql99tlnaz2moJdffrnYS+SVhQ4dOkT16tVTam+++WaJx1m6dGkMGzasWJ/tiriWNqTrtaLvpRuTNm3aRK9evVJqy5cvj7/+9a9pyz+VxgcffBDPPvtsSm277baLAw44IG3fgt+nb7/9NqZOnVqi840aNSptmbEuXbqUaIwNTcHPWEmXuBw8eHCJ9l+xYkV89913MX/+/BIdF5F+7Uas3/XboUOHtJm5SnrtRqTPBFW/fv1o3bp1qfvaGPXp0yflvfzss89i7ty5KeGubbfdNrbffvsyOV/BYGTB7+O6PP/883/4JdOuvvrqlBB7ly5d4thjj83f7tmzZxx22GEpx/z1r39dr1AgAAD8EQkwAQAAVIBtttkmOnbsmFIbMGBALFq0qNhjFDZDz5FHHlnovrvttltarbhBiry8vLjrrruK3VdJPPLII3HwwQdHp06d4qijjkoLERTHggULUrYbN25crONycnJKfK616dGjR9SrVy+l9tRTTxX7+EGDBqVsV6tWLe0zUh4OP/zw6NSpU0rtww8/LNbyQN27d48tttgipfbYY4+V+MHkbbfdFkcddVT07NkzrrrqqiKXlin4OZ47d2588sknxTrHnDlz4umnny5RX+urVq1aaQGSIUOGxDfffFOicfr37x9nnHFG7LLLLnHWWWcVGhKriGspyeu1KBV9L93YXHXVVVG3bt2U2ldffRUXXHDBeoWYRo0aFZdeemlKgLBKlSpxyy23RKVKldL279evX1rooST3x4iI5557LmW7atWq0adPnxKNsaEpuDTmggUL4ueffy7WsZMmTcpfKmxdXnnllejbt2906tQp+vbtm/ZeFkd2dnbKdqVKldJm8CuJunXrpoXdBg0aFNOnTy/2GBMmTIgvvvgipXbEEUdEZuam9U/cDRo0iD333DN/+7fffouHH344JbBbVrMvRfweElvTvHnzYvHixcU6dvLkyfHAAw8U+lpJQ7EVGUguiYKzKVWtWjVuuummtHvgVVddFQ0bNszfnjlzZtrMTAAAsKnbtP7rDgAAIEEnnnhiyvbs2bPjn//8Z7GOXbBgQdx8880ptVq1asUhhxxS6P7du3ePGjVqpNSee+65/KV/1ubhhx+OL7/8slweCFapUiW+//77/DDRvffeG/PmzSvRGG+88UbKdocOHQrdr2rVqinb2dnZZfrwq3LlynHcccel1L755ptiPaSfPXt2/Oc//0mpHXjggSVakqW0MjIy4m9/+1ta6ODmm29OC5sUduzxxx+fUps9e3ZcffXVxZ4ZqX///vmziMydOzdeeeWVIoMV++yzT1rtvvvui1WrVq31HCtXroy//vWvkZ2dXeEPtk844YSUh5Z5eXlx+eWXp4UBijJu3Li49957I+L3h7tDhgwpdGauiriWKvJ6LYmKvJdubJo0aRJ33HFH2ud+yJAhcdppp5VqmcpXXnklTj311Fi2bFlK/eqrr44ddtih0GO22mqr6NmzZ0rtxRdfjK+++qpY5/zggw/SlsPq3bt3Wmh0Y1Nwab2IiNdee22dxy1dujSuvPLKYgdx69SpE999912sXLkyIiKeeOKJEs+A9frrr6ds77jjjoWG1Uqi4LW7bNmyuOGGG4r1s3n58uVx3XXXpfysqVSpUhxzzDHr1dPGqmBA6aWXXsr//5UqVSrTsF/BmZxycnLSrs/C/PTTT3HaaafFsmXLCp09b21L0Bb8HS7i998ZNjQ///xz3H777Sm1c889N20GyYjfl967+uqrU2pvvvlmvPfee+XaIwAAbEwEmAAAACrIQQcdFD169EipvfDCC3HTTTelPRhe06RJk+KEE06IX375JaV+9dVXFxl4qVatWpxwwgkptUWLFsXpp5+eNs5qK1asiDvvvDPuueeeiCifGUkOPfTQlNlBZsyYESeeeGKxZqhZvnx53HzzzfHxxx+n1IuaZaDgTBHLli2LkSNHlqLrop155pmx2WabpdRuv/32eOaZZ4o8ZvLkyXHKKaekBFqqVasW5513Xpn2tjZt2rRJ+3zMnj077SFcYU444YRo3759Su2dd96J888/f63hlmXLlsXdd98df/vb31Lqe+21V+y8886FHtOlS5e02XbGjBkTV1xxRZGzPs2ePTvOOeecGDZsWET8PjtHRWrXrl2cfPLJKbXJkyfHiSeeGBMmTFjrsW+++WacdNJJKV9bkyZN4pRTTknbtyKupYq8XkuiIu+lG6M99tgjbrzxxrTZP0aOHBm9e/eOhx9+uFjLFo0ZMyZOPfXUuOqqq9JChpdccsk6gyPXXHNNypKKOTk5cfrpp+dfm4XJy8uLV199NS666KKUesOGDdOWv9wY7bTTTikzsEREPP7442mzCq3p559/jlNOOSXGjh0bzZo1K9ZMfbvvvntsueWW+duLFy+OE088MWWWmKLk5OTEo48+Gv3790+pl8W126FDh7TfLYYOHRqXXHLJWgO0v/76a5x++ulps/WdffbZ0bJly/Xua2O0xx57pHyW1pzNqGfPnus9292adtlll7RQ/O23317ksrd5eXkxYMCA6NevX0ybNi1atWqV9rM/4vfZH4tS8DqJiLXeO5KQl5cXV111VcrP7LZt28app55a5DG9e/dOmT0rIuJvf/tb2nKZAACwqcpKugEAAIANyYIFC+LTTz9d73F22mmnqFmzZkotIyMj/vGPf8Thhx+e8qDimWeeiffeey8OPPDA2GGHHaJevXqxbNmymD59eowcOTKGDRuWNjvBwQcfHIcffvhaezjttNNiwIABKX+x/r///S8OPvjgOPDAA6Nz587RuHHjWLJkSYwfPz7efvvt/Nk5dthhhzj11FPjv//97/q+FSnq168f//d//xfXXHNNfu2HH36II488Mnbaaafo3r17bLXVVlG3bt3IzMyM7OzsmD9/fkycODE+/PDDmD9/fsp4Bx54YKHL5a3+Ggq64IIL4rTTTottttkmVq5cGVOnTo39998/WrVqVaqvp1q1anHnnXfGqaeemv8Aa9WqVXHTTTdF//79o0+fPtGyZcuoWbNmzJw5Mz799NP44IMP8mfFWO3qq6+u8IewF1xwQbzzzjsxe/bs/NqAAQPikEMOiV122aXI47KysuKOO+6IY445JuX7MWjQoPjkk09i3333jS5dukTjxo0jIyMj5syZE998800MGjQoLeDUrFmzuOmmm9ba52WXXRYnnnhiyjXw1ltvxeeffx69evWKdu3aRd26dWP+/PnxxRdfxMCBA/OXEzvppJOibdu2KTNTVIRLL700vvrqqxg7dmx+beLEiXH44YdH9+7dY/fdd49mzZpFtWrVYsGCBTFx4sQYPHhw2sPgypUrx5133pl2L4momGupIq/Xkqjoe+nG6Mgjj4y6devGFVdckbLU09KlS+Puu++Ohx56KHbZZZfo2LFjbLnlllGrVq1YsWJFZGdnx4QJE2LkyJExceLEtHGrVKkSf/3rX+PYY49dZw9bbbVVXH311Smfn0WLFsUZZ5wRnTt3jj333DO23HLLlOtgyJAh8cMPP6SMk5WVFbfeemuhgYaNTVZWVhx99NHx4IMP5teWLl0aJ510Uuy3337RrVu3aNq0aWRmZsbMmTNjxIgRMXjw4FixYkVkZGTErbfeWqxZ/qpUqRLXXnttnHnmmfmzNs2cOTNOPfXU2HbbbWPXXXeNrbfeOho0aBBZWVmxcOHCmD9/fkyaNCmGDh0aM2bMSBmvQ4cO0a9fvzJ5D/7617/GV199lXK/GzhwYHz66adx4IEHRocOHaJhw4axYsWKmDlzZnzxxRf578Gadt555zj77LPLpKeNUVZWVhxyyCFpszlGlO3ycRERtWvXjiOPPDJlWdZ58+bFEUccEUcccUR07tw5atSoEXPmzIkffvgh3n333fylAbOysuKWW26J1q1bR40aNVLCPs8991xUrVo1OnfuHEuXLo1evXrlz/LVokWLqFevXkrY+9///nf89ttvsfPOO0flypXj119/jS222KJMfq6UxlNPPRWff/55/nalSpXi5ptvjqystT9yuf7666N379759+b58+fHtddeGw899FC59gsAABsDASYAAIA1fPfdd4XOdlJSr732WrRt2zat3rRp03jxxRfjtNNOiylTpuTXZ82alfJgaG1OPPHE+Otf/7rO/erWrRsPP/xwnHzyySkPjJYuXRqvvvpqvPrqq4Uet9VWW8XDDz8cy5cvL1Y/JdWvX7+YNWtW3H///SlLwYwZMyZtdoW12WuvveK2224r8vU2bdpEu3btYty4cfm1hQsXxl133ZWy30477VTqAFNERKdOneKhhx6Kc889Nz84ExHx/fffp52roEqVKsXll18eRx11VKnPX1q1atWKq666Ki655JL8Wl5eXlx33XXxxhtvFLp8y2qtWrWK/v37x2mnnRY//fRTfn3JkiXxxhtvpC0bVpitttoqHnnkkWjUqNFa9+vSpUtcc8018fe//z2lPnPmzHjyySeLPG7//fePK664oli9lLUqVarEU089FRdddFHKjBE5OTkxfPjwYs2CUrNmzbj77rsLXXZntYq4lirqei2piryXbqz222+/aNOmTVx//fVpn7lly5bFsGHDSjSjSfv27ePvf/97oT/bitKvX7/IzMyM6667LmXpxy+//DK+/PLLdR5fu3btuO+++9Jm3NqYnX322fHBBx+kBMRycnLi3XffjXfffbfI4y6++OLo0aNHsQJMERG77bZb3HjjjfG3v/0tJTQ7ceLEQsNpRWnfvn089NBD67183Go1a9aM5557Ls4+++z4+uuv8+sLFiyI/v37p838VJgDDjgg7rjjjnUGRf7o+vbtmxZgql27dqHLr66viy66KIYPH54SPFuyZEk888wzRc46Wbly5bj11lujc+fOEfH7srBvvvlm/ut5eXnx+OOPx+OPPx4Rv9+zVn/OMjIy0r6+3NzcePbZZ+PZZ5/Nr5133nmJBJgmT54cd999d0rtlFNOiXbt2q3z2ObNm8ell16a8nvNhx9+GAMGDKjwWSMBAGBDYwk5AACACtayZct46aWX4tRTT01ZXmdd2rRpEw8++GBcc801kZlZvP+ca9++fTz77LPRpk2bde6bkZERhx12WLz00ktFLj1ScEmi0jr33HPjiSeeiO23377ExzZt2jRuuummePDBB6NatWpr3feWW25JWQKrvHTr1i3eeeedOOCAA4p9TLt27eLpp5+OP//5z+XX2Dr07t07unXrllKbMmVKPPDAA+s8dsstt4xXXnklzjrrrLSlZdamZs2acdZZZ8Wrr74aW2yxRbGOOf744+POO+9MWxawMDVq1IhLL7007r333iIfbpfV53hdfTz00ENx0003pS0zuDaVKlWK3r17x9tvvx177LHHOveviGupoq7XkqrIe+nGqmXLlvH444/Hk08+GbvuumuJQygZGRnRpUuXuP/+++Oll14qUXhptSOOOCJefPHFEoWQKlWqFH379o3XXnvtDxVeivg94PjMM8/ErrvuWqz969WrF7fffnuceeaZJT7XEUccEf37919rEHJt573sssviueeeK9a9tyQaNGgQTz/9dFxyySVRr169Yh/XsmXL+Mc//hH33nvvWkO2m4rtttsuLTBz0EEHlct7U7NmzXj22WeLXPK1oG233TaeeeaZ6NOnT37twgsvLNH3+7zzzivW768VLScnJ6688sqUJUtbtWoVF1xwQbHHOO6449KWg7zlllvyZ64CAIBN1ab9ZyoAAAAJqVOnTlx++eVx2mmnxZAhQ+LTTz+N//3vfzFv3rxYuHBhVK1aNerXrx9NmzaNnXfeOXr06BE777xzqYIX7dq1iwEDBsSQIUNi0KBB8e2338bcuXNj0aJFUatWrdhyyy1j5513jsMPPzy23nrr/OMKLnMWESUKqqxLjx494tVXX40xY8bExx9/HN9++2389NNPMWfOnFiyZEnk5uZGjRo1ok6dOtGqVato06ZN7L777tG1a9dihw7atGkTAwYMiEceeSQ++eSTmDVrVuTl5UWtWrVi8803j3bt2pXZ0m1NmzaN++67LyZOnBjvvPNOfPnllzFlypTIzs6OvLy8qFu3bjRt2jQ6d+4ce++9d3Tv3r1Mzru+rrvuujj00ENTvt+PP/54HHTQQet8cFi7du24+OKL489//nN8/PHH8emnn8Z3330X8+bNi+zs7KhUqVLUqlUrGjduHNtvv3107do19t9//1J9jg4++ODYbbfd4t13343BgwfHjz/+GHPmzIlVq1ZF3bp1Y9ttt42ePXtG3759Ux62l/fneG0qVaoU/fr1i0MPPTRGjBgRn3zySYwePTrmzJkT8+fPj1WrVkWtWrWiXr16sd1220XHjh2jV69e0bRp0xKdpyKupYo4R2lU5L10Y9a9e/fo3r17zJ49Oz766KMYPXp0/PDDDzFt2rRYtGhRLFu2LKpVqxa1a9eOhg0bRps2bWKHHXaIPffcMzbffPP1Pv+OO+4Y//nPf2LcuHHx0UcfxciRI2PatGkxf/78WLZsWdSpUyfq1asXW2+9dXTr1i322GOPaNGiRRl85RumevXqxeOPPx6jRo2Kt99+O77++uuYOXNm/Pbbb5GVlRUNGjSI7bbbLvbYY4/o06dP1KpVq8ix1pwZrTDt2rWLZ555JiZOnBgfffRRfP311zF16tSYNWtWLF26NFatWhXVq1ePWrVqxRZbbBHbbbdd9OzZM3r27BlVqlQp6y89X9WqVePMM8+M448/PoYOHRojRozI//0kOzs7KleuHPXr14/GjRtHp06donv37tGjR49Nftalgg4//PCUmSYPPfTQcjtXw4YN49lnn41hw4bFwIED83+eLV26NGrUqBHNmzePHXbYIX+50IL3/tWh0/vvvz9GjBgR8+fPj6pVq0bjxo1ju+22SwtY1qpVK5577rn4z3/+E++//3789NNPsWLFiqhevXo0bdo02rZtW6pw3vp67LHHUmYgzMjIiBtvvLFEwbGMjIy4+eabU37/WrRoUVx55ZXx1FNPbXI/owAAYLWMvHX9Vy4AAACbpLFjx0a/fv1Sak8++eQGE7yB4nj00Ufjn//8Z/52RkZGjBs3rsyWQwIAAAAA1t8fe55sAAAASu3nn39OqxW1tBxsqAp+juvXry+8BAAAAAAbGAEmAAAACvXVV1+lbNeqVStat26dUDdQOqNHj07Zbt++fUKdAAAAAABFsWg4AADAH9RTTz0VkyZNiqlTp8ZPP/0UXbt2jdtuu61Yxy5fvjzeeuutlFrHjh0jM9PfwVBx5s+fH88991z89NNP8dNPP8XUqVPjkksuSVvasCjffPNNTJw4MaXWuXPn8mgVAAAAAFgPAkwAAAB/UJ9++mkMHTo0f/vtt9+O008/Pf70pz+t89h77rknsrOzU2pHHXVUGXcIa1erVq146qmnYuHChfm1xx57LA4++OCoXr36Wo9dtWpV3HzzzSm1ypUrR9++fculVwAAAACg9PzpLAAAwB/UySefnLK9cuXKOOOMM2LMmDFFHrNy5cq477774oknnkipt27dOvbdd99y6ROKUrly5TjuuONSalOmTImzzjorZs6cWeRx2dnZcd5556UtH3f44YdH48aNy6VXAAAAAKD0MvLy8vKSbgIAAIDy8X//93/xxhtvpNU7deoUe+21VzRr1izq1q0bCxcujO+++y7ee++9mDZtWsq+1apVi/79+0ebNm0qqm3It3jx4ujXr19MmjQppZ6VlRX77rtvdOzYMZo1axbVqlWL2bNnx9dffx0DBw6MxYsXp+y/1VZbxcsvvxy1atWqyPYBAAAAgGIQYAIAAPgDW758eVx44YUxZMiQUh1fp06d+Oc//xl77LFHGXcGxffzzz/HaaedFlOmTCnV8dtss008+OCDscUWW5RtYwAAAABAmRBgAgAA+IPLzc2NZ599Nh566KGYN29esY7JzMyMvffeOy6//PLYcssty7lDWLeFCxfGfffdFy+++GKsXLmyWMfUqFEj+vXrFxdeeGHUrFmznDsEAAAAAEpLgAkAAGATsXz58vjoo4/i448/jvHjx8f06dNj0aJFkZOTE7Vr1446derENttsE506dYq99947WrVqlXTLkGbevHkxaNCgGDVqVEycODFmzZoVixcvjszMzKhTp07Ur18/2rVrF507d4799tsv6tWrl3TLAAAAAMA6CDABAAAAAAAAAACJyUy6AQAAAAAAAAAAYNMlwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAAACAxAkwAAAAAAAAAAEBiBJgAAAAAAAAAAIDECDABAAAAAAAAAACJEWACAAAAAAAAAAASI8AEAAAAAAAAAAAkRoAJAAAAAAAAAABITFbSDfDHlpubG0uXLk2rZ2VlRUZGRgIdAQAAAAAAAACwWl5eXqxatSqtXr169cjMrJi5kQSYKFdLly6NCRMmJN0GAAAAAAAAAAAl0KZNm6hZs2aFnMsScgAAAAAAAAAAQGIEmAAAAAAAAAAAgMQIMAEAAAAAAAAAAIkRYAIAAAAAAAAAABKTlXQD/LFlZRX+Ebvy8/sje8WiCu4GAAAAoGx8ctbzERFx0+e3JNwJAAAAwPqpFtXigGr7pdWLynyUBwEmylVGRkah9ewVi2L+ioUV3A0AAABA2ahSpUpERCyNpQl3AgAAAFA+isp8lAdLyAEAAAAAAAAAAIkRYAIAAAAAAAAAABIjwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAAACAxAkwAAAAAAAAAAEBiBJgAAAAAAAAAAIDECDABAAAAAAAAAACJEWACAAAAAAAAAAASI8AEAAAAAAAAAAAkRoAJAAAAAAAAAABIjAATAAAAAAAAAACQGAEmAAAAAAAAAAAgMQJMAAAAAAAAAABAYgSYAAAAAAAAAACAxAgwAQAAAAAAAAAAiRFgAgAAAAAAAAAAEiPABAAAAAAAAAAAJEaACQAAAAAAAAAASIwAEwAAAAAAAAAAkBgBJgAAAAAAAAAAIDECTAAAAAAAAAAAQGIEmAAAAAAAAAAAgMQIMAEAAAAAAAAAAIkRYAIAAAAAAAAAABIjwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAAACAxAkwAAAAAAAAAAEBiBJgAAAAAAAAAAIDECDABAAAAAAAAAACJEWACAAAAAAAAAAASI8AEAAAAAAAAAAAkRoAJAAAAAAAAAABIjAATAAAAAAAAAACQGAEmAAAAAAAAAAAgMQJMAAAAAAAAAABAYgSYAAAAAAAAAACAxAgwAQAAAAAAAAAAiRFgAgAAAAAAAAAAEiPABAAAAAAAAAAAJEaACQAAAAAAAAAASIwAEwAAAAAAAAAAkBgBJgAAAAAAAAAAIDECTAAAAAAAAAAAQGIEmAAAAAAAAAAAgMQIMAEAAAAAAAAAAIkRYAIAAAAAAAAAABIjwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAAACAxAkwAAAAAAAAAAEBiBJgAAAAAAAAAAIDECDABAAAAAAAAAACJEWACAAAAAAAAAAASI8AEAAAAAAAAAAAkRoAJAAAAAAAAAABIjAATAAAAAAAAAACQGAEmAAAAAAAAAAAgMQJMAAAAAAAAAABAYgSYAAAAAAAAAACAxAgwAQAAAAAAAAAAiRFgAgAAAAAAAAAAEiPABAAAAAAAAAAAJEaACQAAAAAAAAAASIwAEwAAAAAAAAAAkBgBJgAAAAAAAAAAIDECTAAAAAAAAAAAQGIEmAAAAAAAAAAAgMQIMAEAAAAAAAAAAIkRYAIAAAAAAAAAABIjwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAAACAxAkwAAAAAAAAAAEBiBJgAAAAAAAAAAIDECDABAAAAAAAAAACJEWACAAAAAAAAAAASI8AEAAAAAAAAAAAkRoAJAAAAAAAAAABIjAATAAAAAAAAAACQGAEmAAAAAAAAAAAgMQJMAAAAAAAAAABAYgSYAAAAAAAAAACAxAgwAQAAAAAAAAAAiRFgAgAAAAAAAAAAEiPABAAAAAAAAAAAJEaACQAAAAAAAAAASIwAEwAAAAAAAAAAkBgBJgAAAAAAAAAAIDECTAAAAAAAAAAAQGIEmAAAAAAAAAAAgMQIMAEAAAAAAAAAAIkRYAIAAAAAAAAAABIjwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAAACAxAkwAAAAAAAAAAEBiBJgAAAAAAAAAAIDECDABAAAAAAAAAACJEWACAAAAAAAAAAASI8AEAAAAAAAAAAAkRoAJAAAAAAAAAABIjAATAAAAAAAAAACQGAEmAAAAAAAAAAAgMQJMAAAAAAAAAABAYgSYAAAAAAAAAACAxAgwAQAAAAAAAAAAiRFgAgAAAAAAAAAAEiPABAAAAAAAAAAAJEaACQAAAAAAAAAASIwAEwAAAAAAAAAAkBgBJgAAAAAAAAAAIDECTAAAAAAAAAAAQGIEmAAAAAAAAAAAgMQIMAEAAAAAAAAAAIkRYAIAAAAAAAAAABIjwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAAACAxAkwAAAAAAAAAAEBiBJgAAAAAAAAAAIDECDABAAAAAAAAAACJEWACAAAAAAAAAAASI8AEAAAAAAAAAAAkRoAJAAAAAAAAAABIjAATAAAAAAAAAACQGAEmAAAAAAAAAAAgMQJMAAAAAAAAAABAYgSYAAAAAAAAAACAxAgwAQAAAAAAAAAAiRFgAgAAAAAAAAAAEiPABAAAAAAAAAAAJEaACQAAAAAAAAAASIwAEwAAAAAAAAAAkBgBJgAAAAAAAAAAIDECTAAAAAAAAAAAQGIEmAAAAAAAAAAAgMQIMAEAAAAAAAAAAIkRYAIAAAAAAAAAABIjwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAAACAxAkwAAAAAAAAAAEBiBJgAAAAAAAAAAIDECDABAAAAAAAAAACJEWACAAAAAAAAAAASI8AEAAAAAAAAAAAkRoAJAAAAAAAAAABIjAATAAAAAAAAAACQGAEmAAAAAAAAAAAgMQJMAAAAAAAAAABAYgSYAAAAAAAAAACAxAgwAQAAAAAAAAAAiRFgAgAAAAAAAAAAEiPABAAAAAAAAAAAJEaACQAAAAAAAAAASIwAEwAAAAAAAAAAkBgBJgAAAAAAAAAAIDECTAAAAAAAAAAAQGIEmAAAAAAAAAAAgMQIMAEAAAAAAAAAAIkRYAIAAAAAAAAAABIjwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAAACAxAkwAAAAAAAAAAEBiBJgAAAAAAAAAAIDECDABAAAAAAAAAACJEWACAAAAAAAAAAASI8AEAAAAAAAAAAAkRoAJAAAAAAAAAABIjAATAAAAAAAAAACQGAEmAAAAAAAAAAAgMQJMAAAAAAAAAABAYgSYAAAAAAAAAACAxAgwAQAAAAAAAAAAiRFgAgAAAAAAAAAAEiPABAAAAAAAAAAAJEaACQAAAAAAAAAASIwAEwAAAAAAAAAAkBgBJgAAAAAAAAAAIDECTAAAAAAAAAAAQGIEmAAAAAAAAAAAgMQIMAEAAAAAAAAAAIkRYAIAAAAAAAAAABIjwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAAACAxAkwAAAAAAAAAAEBiBJgAAAAAAAAAAIDECDABAAAAAAAAAACJEWACAAAAAAAAAAASI8AEAAAAAAAAAAAkRoAJAAAAAAAAAABIjAATAAAAAAAAAACQGAEmAAAAAAAAAAAgMQJMAAAAAAAAAABAYgSYAAAAAAAAAACAxAgwAQAAAAAAAAAAiRFgAgAAAAAAAAAAEiPABAAAAAAAAAAAJEaACQAAAAAAAAAASIwAEwAAAAAAAAAAkBgBJgAAAAAAAAAAIDECTAAAAAAAAAAAQGIEmAAAAAAAAAAAgMQIMAEAAAAAAAAAAIkRYAIAAAAAAAAAABIjwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAAACAxAkwAAAAAAAAAAEBiBJgAAAAAAAAAAIDECDABAAAAAAAAAACJEWACAAAAAAAAAAASI8AEAAAAAAAAAAAkRoAJAAAAAAAAAABIjAATAAAAAAAAAACQGAEmAAAAAAAAAAAgMQJMAAAAAAAAAABAYgSYAAAAAAAAAACAxAgwAQAAAAAAAAAAiRFgAgAAAAAAAAAAEiPABAAAAAAAAAAAJEaACQAAAAAAAAAASIwAEwAAAAAAAAAAkBgBJgAAAAAAAAAAIDECTAAAAAAAAAAAQGIEmAAAAAAAAAAAgMQIMAEAAAAAAAAAAIkRYAIAAAAAAAAAABIjwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAAACAxAkwAAAAAAAAAAEBiBJgAAAAAAAAAAIDECDABAAAAAAAAAACJEWACAAAAAAAAAAASI8AEAAAAAAAAAAAkRoAJAAAAAAAAAABIjAATAAAAAAAAAACQGAEmAAAAAAAAAAAgMQJMAAAAAAAAAABAYgSYAAAAAAAAAACAxAgwAQAAAAAAAAAAiRFgAgAAAAAAAAAAEiPABAAAAAAAAAAAJEaACQAAAAAAAAAASIwAEwAAAAAAAAAAkBgBJgAAAAAAAAAAIDECTAAAAAAAAAAAQGIEmAAAAAAAAAAAgMQIMAEAAAAAAAAAAIkRYAIAAAAAAAAAABIjwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAAACAxAkwAAAAAAAAAAEBiBJgAAAAAAAAAAIDECDABAAAAAAAAAACJEWAC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jClxxMiPxBEjD4oxg3aIqk5d3vOzsxa+EdNmPRKTn/pNzF3a/K3ZAQAA4P1i6G5DY9LDZya7fvVW1Umv35xPXzkx9QgtquxaGWM/tUuM/dQusaZhTbzzyjtR89biWLVsVaxctjIa6xujorIiulRXRfWgntF/+wFRVV2VemwAILEsz/M89RBbsoULF8ahhx4aNTU1660PHDgwrr322thhhx3ec4877rgjvvnNb8aaNWvWWx8zZkzceuutSQOm+vr6ePbZZ5usn/rnC2NxfW2CiQAASld5VhY79t82hvXaOnp27h49unSPyvJOsaqhPmpW1sbsJfNj5jsvR83KpalHBYAt3qxJ90VExBl//kbiSQAAAADapiqq4sguhzdZHzNmTFRWtv7xsJvCHZgS69u3b3z729+O008/fb31efPmxbHHHhsnnXRSHHXUUTF48OAmn50xY0bceOONce+99zZ5r2vXrnHxxRe7+xIAwGakMV8Tz89/OZ6f/3LqUQAAAAAAADqMgKkEHHrooTFr1qy46qqr1luvq6uLK6+8Mq666qoYMWJEbL311tGjR49YsGBBvPbaazFnzpxm9+vUqVNcfvnlsd1223XE+AAAAAAAAAAA0GoCphLx5S9/uRAe/fNT/fI8jxdeeCFeeOGF99ynW7ducfnll8f+++/fXqMCAAAAAAAAAEDReL5YCfniF78Y1113XQwdOrRVn993333jzjvvFC8BAAAAAAAAALDZcAemErP33nvHvffeG/fcc09MmTIlnnjiiVi9enWL5/fs2TMOOuigOO6442L33XfvwEkBAAAAAAAAAKDtBEwlqKKiIo444og44ogjoq6uLv7+97/Ha6+9FosXL476+vro2rVrDBgwID7wgQ/EiBEjoqzMjbQAAAAAAAAAANg8CZhKXFVVVeyxxx6xxx57pB4FAAAAAAAAAACKzq17AAAAAAAAAACAZARMAAAAAAAAAABAMgImAAAAAAAAAAAgGQETAAAAAAAAAACQjIAJAAAAAAAAAABIRsAEAAAAAAAAAAAkI2ACAAAAAAAAAACSETABAAAAAAAAAADJCJgAAAAAAAAAAIBkBEwAAAAAAAAAAEAyAiYAAAAAAAAAACAZARMAAAAAAAAAAJCMgAkAAAAAAAAAAEhGwAQAAAAAAAAAACQjYAIAAAAAAAAAAJIRMAEAAAAAAAAAAMkImAAAAAAAAAAAgGQETAAAAAAAAAAAQDICJgAAAAAAAAAAIBkBEwAAAAAAAAAAkIyACQAAAAAAAAAASEbABAAAAAAAAAAAJCNgAgAAAAAAAAAAkhEwAQAAAAAAAAAAyQiYAAAAAAAAAACAZARMAAAAAAAAAABAMgImAAAAAAAAAAAgGQETAAAAAAAAAACQjIAJAAAAAAAAAABIRsAEAAAAAAAAAAAkI2ACAAAAAAAAAACSETABAAAAAAAAAADJCJgAAAAAAAAAAIBkBEwAAAAAAAAAAEAyAiYAAAAAAAAAACAZARMAAAAAAAAAAJCMgAkAAAAAAAAAAEhGwAQAAAAAAAAAACQjYAIAAAAAAAAAAJIRMAEAAAAAAAAAAMkImAAAAAAAAAAAgGQETAAAAAAAAAAAQDICJgAAAAAAAAAAIBkBEwAAAAAAAAAAkIyACQAAAAAAAAAASEbABAAAAAAAAAAAJCNgAgAAAAAAAAAAkhEwAQAAAAAAAAAAyQiYAAAAAAAAAACAZARMAAAAAAAAAABAMgImAAAAAAAAAAAgGQETAAAAAAAAAACQjIAJAAAAAAAAAABIRsAEAAAAAAAAAAAkI2ACAAAAAAAAAACSETABAAAAAAAAAADJCJgAAAAAAAAAAIBkBEwAAAAAAAAAAEAyAiYAAAAAAAAAACAZARMAAAAAAAAAAJCMgAkAAAAAAAAAAEhGwAQAAAAAAAAAACQjYAIAAAAAAAAAAJIRMAEAAAAAAAAAAMkImAAAAAAAAAAAgGQETAAAAAAAAAAAQDICJgAAAAAAAAAAIBkBEwAAAAAAAAAAkIyACQAAAAAAAAAASEbABAAAAAAAAAAAJCNgAgAAAAAAAAAAkhEwAQAAAAAAAAAAyQiYAAAAAAAAAACAZARMAAAAAAAAAABAMgImAAAAAAAAAAAgGQETAAAAAAAAAACQjIAJAAAAAAAAAABIRsAEAAAAAAAAAAAkI2ACAAAAAAAAAACSETABAAAAAAAAAADJCJgAAAAAAAAAAIBkBEwAAAAAAAAAAEAyAiYAAAAAAAAAACAZARMAAAAAAAAAAJCMgAkAAAAAAAAAAEhGwAQAAAAAAAAAACQjYAIAAAAAAAAAAJIRMAEAAAAAAAAAAMkImAAAAAAAAAAAgGQETAAAAAAAAAAAQDICJgAAAAAAAAAAIBkBEwAAAAAAAAAAkIyACQAAAAAAAAAASEbABAAAAAAAAAAAJCNgAgAAAAAAAAAAkhEwAQAAAAAAAAAAyQiYAAAAAAAAAACAZARMAAAAAAAAAABAMgImAAAAAAAAAAAgGQETAAAAAAAAAACQjIAJAAAAAAAAAABIRsAEAAAAAAAAAAAkI2ACAAAAAAAAAACSETABAAAAAAAAAADJCJgAAAAAAAAAAIBkBEwAAAAAAAAAAEAyAiYAAAAAAAAAACAZARMAAAAAAAAAAJCMgAkAAAAAAAAAAEhGwAQAAAAAAAAAACQjYAIAAAAAAAAAAJIRMAEAAAAAAAAAAMkImAAAAAAAAAAAgGQETAAAAAAAAAAAQDICJgAAAAAAAAAAIBkBEwAAAAAAAAAAkIyACQAAAAAAAAAASEbABAAAAAAAAAAAJCNgAgAAAAAAAAAAkhEwAQAAAAAAAAAAyQiYAAAAAAAAAACAZARMAAAAAAAAAABAMgImAAAAAAAAAAAgGQETAAAAAAAAAACQjIAJAAAAAAAAAABIRsAEAAAAAAAAAAAkI2ACAAAAAAAAAACSETABAAAAAAAAAADJCJgAAAAAAAAAAIBkBEwAAAAAAAAAAEAyAiYAAAAAAAAAACAZARMAAAAAAAAAAJCMgAkAAAAAAAAAAEhGwAQAAAAAAAAAACQjYAIAAAAAAAAAAJIRMAEAAAAAAAAAAMkImAAAAAAAAAAAgGQETAAAAAAAAAAAQDICJgAAAAAAAAAAIBkBEwAAAAAAAAAAkIyACQAAAAAAAAAASEbABAAAAAAAAAAAJCNgAgAAAAAAAAAAkhEwAQAAAAAAAAAAyQiYAAAAAAAAAACAZARMAAAAAAAAAABAMgImAAAAAAAAAAAgGQETAAAAAAAAAACQjIAJAAAAAAAAAABIRsAEAAAAAAAAAAAkI2ACAAAAAAAAAACSETABAAAAAAAAAADJCJgAAAAAAAAAAIBkBEwAAAAAAAAAAEAyAiYAAAAAAAAAACAZARMAAAAAAAAAAJCMgAkAAAAAAAAAAEhGwAQAAAAAAAAAACQjYAIAAAAAAAAAAJIRMAEAAAAAAAAAAMkImAAAAAAAAAAAgGQETAAAAAAAAAAAQDICJgAAAAAAAAAAIBkBEwAAAAAAAAAAkIyACQAAAAAAAAAASEbABAAAAAAAAAAAJCNgAgAAAAAAAAAAkhEwAQAA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mDRpUrPn7L777jFlypQ48cQTo2fPnoW7Lq37NXjw4Dj99NPjtttui4EDB3bwNwAAAAAAAAAAAJpTkXqATdW9e/cW3+vfv3+ce+65cc4558Q777wT8+bNi7KyshgwYEAMGDCgA6cEAAAAAAAAAAA2xmYXMG2MsrKyGDhwoDstAQAAAAAAAABAidssHiEHAAAAAAAAAAC8PwmYAAAAAAAAAACAZARMAAAAAAAAAABAMhUpLnr22WenuOx6siyL//7v/049BgAAAAAAAAAAbNGSBExTpkyJLMtSXDoiIvI8FzABAAAAAAAAAEAJ8Ag5AAAAAAAAAAAgmSR3YIpYexckAAAAAAAAAABgy5YkYLrwwgtTXBYAAAAAAAAAACgxSQKmCRMmpLgsAAAAAAAAAABQYspSDwAAAAAAAAAAAGy5BEwAAAAAAAAAAEAyAiYAAAAAAAAAACCZkgyY6uvr45VXXmnTHjU1NXH99ddHY2NjkaYCAAAAAAAAAACKreQCpt/+9rfx0Y9+NC644II27XPttdfGRRddFEceeWS89NJLRZoOAAAAAAAAAAAoppIJmPI8j/POOy8mTZoU8+bNi8cffzwWLVrUqr0WLVoUN998c0REzJo1K4477riYNm1aMccFAAAAAAAAAACKoGQCpm9+85tx6623Rp7nERHR2NgY9913X6v2mjx5ctTV1UVERJZlUVdXF1/96ldj+vTpRZsXAAAAAAAAAABou5IImCZPnhx33HFHZFkWWZZFxNo7Ms2cObNV+51yyinxta99LSorKyNibcTU0NAQkyZNijfffLNocwMAAAAAAAAAAG2TPGCaN29eXHrppeuFS4MGDYprrrkmzj///FbtWVlZGV/4whfi1ltvjW222SbyPI8sy2L58uVx5plnFnF6AAAAAAAAAACgLZIHTNdff33hcW8REaNHj47bb789xo8f3+a9d9xxx/jVr34VO+ywQ2HtqaeeimnTprV5bwAAAAAAAAAAoO2SBkz19fVx2223RZZlked59O/fP37yk59E3759i3aNvn37xk9+8pPo3bt34To///nPi7Y/AAAAAAAAAADQekkDpieeeCKWLVtWeMTb2WefHf369Sv6dbbeeus488wzI8/ziIh4+umn44033ij6dQAAAAAAAAAAgE2TNGB65JFHIiIiy7IYOnRoHHLIIe12rU996lMx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AACAZARMAAAAAAAAAABAMgImAAAAAAAAAAAgGQETAAAAAAAAAACQjIAJAAAAAAAAAABIRsAEAAAAAAAAAAAkI2ACAAAAAAAAAACSETABAAAAAAAAAADJCJgAAAAAAAAAAIBkBEwAAAAAAAAAAEAyAiYAAAAAAAAAACAZARMAAAAAAAAAAJCMgAkAAAAAAAAAAEhGwAQAAAAAAAAAACQjYAIAAAAAAAAAAJIRMAEAAAAAAAAAAMkImAAAAAAAAAAAgGQETAAAAAAAAAAAQDICJgAAAAAAAAAAIBkBEwAAAAAAAAAAkIyACQAAAAAAAAAASEbABAAAAAAAAAAAJCNgAgAAAAAAAAAAkhEwAQAAAAAAAAAAyQiYAAAAAAAAAACAZARMAAAAAAAAAABAMgImAAAAAAAAAAAgGQETAAAAAAAAAACQjIAJAAAAAAAAAABIRsAEAAAAAAAAAAAkI2ACAAAAAAAAAACSETABAAAAAAAAAADJCJgAAAAAAAAAAIBkBEwAAAAAAAAAAEAyAiYAAAAAAAAAACAZARMAAAAAAAAAAJCMgAkAAAAAAAAAAEhGwAQAAAAAAAAAACQjYAIAAAAAAAAAAJIRMAEAAAAAAAAAAMkImAAAAAAAAAAAgGQETAAAAAAAAAAAQDICJgAAAAAAAAAAIBkBEwAAAAAAAAAAkIyACQAAAAAAAAAASEbABAAAAAAAAAAAJCNgAgAAAAAAAAAAkhEwAQAAAAAAAAAAyQiYAAAAAAAAAACAZARMAAAAAAAAAABAMgImAAAAAAAAAAAgGQETAAAAAAAAAACQjIAJAAAAAAAAAABIRsAEAAAAAAAAAAAkI2ACAAAAAAAAAACSETABAAAAAAAAAADJCJgAAAAAAAAAAIBkBEwAAAAAAAAAAEAyAiYAAAAAAAAAACAZARMAAAAAAAAAAJCMgAkAAAAAAAAAAEhGwAQAAAAAAAAAACQjYAIAAAAAAAAAAJIRMAEAAAAAAAAAAMkImAAAAAAAAAAAgGQETAAAAAAAAAAAQDICJgAAAAAAAAAAIBkBEwAAAAAAAAAAkIyACQAAAAAAAAAASEbABAAAAAAAAAAAJCNgAgAAAAAAAAAAkhEwAQAAAAAAAAAAyQiYAAAAAAAAAACAZARMAAAAAAAAAABAMgImAAAAAAAAAAAgGQETAAAAAAAAAACQjIAJAAAAAAAAAABIRsAEAAAAAAAAAAAkI2ACAAAAAAAAAACSETABAAAAAAAAAADJCJgAAAAAAAAAAIBkBEwAAAAAAAAAAEAyAiYAAAAAAAAAACAZARMAAAAAAAAAAJCMgAkAAAAAAAAAAEhGwAQAAAAAAAAAACQjYAIAAAAAAAAAAJIRMAEAAAAAAAAAAMkImAAAAAAAAAAAgGQETAAAAAAAAAAAQDICJgAAAAAAAAAAIBkBEwAAAAAAAAAAkIyACQAAAAAAAAAASEbABAAAAAAAAAAAJCNgAgAAAAAAAAAAkhEwAQAAAAAAAAAAyQiYAAAAAAAAAACAZARMAAAAAAAAAABAMgImAAAAAAAAAAAgGQETAAAAAAAAAACQjIAJAAAAAAAAAABIRsAEAAAAAAAAAAAkI2ACAAAAAAAAAACSETABAAAAAAAAAADJCJgAAAAAAAAAAIBkBEwAAAAAAAAAAEAyAiYAAAAAAAAAACAZARMAAAAAAAAAAJCMgAkAAAAAAAAAAEhGwAQAAAAAAAAAACQjYAIAAAAAAAAAAJIRMAEAAAAAAAAAAMkImAAAAAAAAAAAgGQETAAAAAAAAAAAQDICJgAAAAAAAAAAIBkBEwAAAAAAAAAAkIyACQAAAAAAAAAASEbABAAAAAAAAAAAJCNgAgAAAAAAAAAAkhEwAQAAAAAAAAAAyQiYAAAAAAAAAACAZARMAAAAAAAAAABAMgImAAAAAAAAAAAgGQETAAAAAAAAAACQjIAJAAAAAAAAAABIRsAEAAAAAAAAAAAkI2ACAAAAAAAAAACSETABAAAAAAAAAADJCJgAAAAAAAAAAIBkBEwAAAAAAAAAAEAyAiYAAAAAAAAAACAZARMAAAAAAAAAAJCMgAkAAAAAAAAAAEhGwAQAAAAAAAAAACQjYAIAAAAAAAAAAJIRMAEAAAAAAAAAAMkImAAAAAAAAAAAgGQETAAAAAAAAAAAQDICJgAAAAAAAAAAIBkBEwAAAAAAAAAAkIyACQAAAAAAAAAASEbABAAAAAAAAAAAJCNgAgAAAAAAAAAAkhEwAQAAAAAAAAAAyQiYAAAAAAAAAACAZARMAAAAAAAAAABAMgImAAAAAAAAAAAgGQETAAAAAAAAAACQjIAJAAAAAAAAAABIRsAEAAAAAAAAAAAkI2ACAAAAAAAAAACSETABAAAAAAAAAADJCJgA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mAAAAAAAAAAAgMQIMAEAAAAAAAAAAIkRYAIAAAAAAAAAABIjwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAAACAxAkwAAAAAAAAAAEBiBJgAAAAAAAAAAIDECDABAAAAAAAAAACJEWACAAAAAAAAAAASI8AEAAAAAAAAAAAkRoAJAAAAAAAAAABIjAATAAAAAAAAAACQGAEmAAAAAAAAAAAgMQJMAAAAAAAAAABAYgSYAAAAAAAAAACAxAgwAQAAAAAAAAAAiRFgAgAAAAAAAAAAEiPABAAAAAAAAAAAJEaACQAAAAAAAAAASIwAEwAAAAAAAAAAkBgBJgAAAAAAAAAAIDECTAAAAAAAAAAAQGIEmAAAAAAAAAAAgMQIMAEAAAAAAAAAAIkRYAIAAAAAAAAAABIjwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAAACAxAkwAAAAAAAAAAEBiBJgAAAAAAAAAAIDECDABAAAAAAAAAACJEWACAAAAAAAAAAASI8AEAAAAAAAAAAAkRoAJAAAAAAAAAABIjAATAAAAAAAAAACQGAEmAAAAAAAAAAAgMQJMAAAAAAAAAABAYgSYAAAAAAAAAACAxAgwAQAAAAAAAAAAiRFgAgAAAAAAAAAAEiPABAAAAAAAAAAAJEaACQAAAAAAAAAASIwAEwAAAAAAAAAAkBgBJgAAAAAAAAAAIDECTAAAAAAAAAAAQGIEmAAAAAAAAAAAgMQIMAEAAAAAAAAAAIkRYAIAAAAAAAAAABIjwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAAACAxAkwAAAAAAAAAAEBiBJgAAAAAAAAAAIDECDABAAAAAAAAAACJEWACAAAAAAAAAAASI8AEAAAAAAAAAAAkRoAJAAAAAAAAAABIjAATAAAAAAAAAACQGAEmAAAAAAAAAAAgMQJMAAAAAAAAAABAYgSYAAAAAAAAAACAxAgwAQAAAAAAAAAAiRFgAgAAAAAAAAAAEiPABAAAAAAAAAAAJEaACQAAAAAAAAAASIwAEwAAAAAAAAAAkBgBJgAAAAAAAAAAIDECTAAAAAAAAAAAQGIEmAAAAAAAAAAAgMQIMAEAAAAAAAAAAIkRYAIAAAAAAAAAABIjwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAAACAxAkwAAAAAAAAAAEBiBJgAAAAAAAAAAIDECDABAAAAAAAAAACJEWACAAAAAAAAAAASI8AEAAAAAAAAAAAkRoAJAAAAAAAAAABIjAATAAAAAAAAAACQGAEmAAAAAAAAAAAgMQJMAAAAAAAAAABAYgSYAAAAAAAAAACAxAgwAQAAAAAAAAAAiRFgAgAAAAAAAAAAEiPABAAAAAAAAAAAJEaACQAAAAAAAAAASIwAEwAAAAAAAAAAkBgBJgAAAAAAAAAAIDECTAAAAAAAAAAAQGIEmAAAAAAAAAAAgMQIMAEAAAAAAAAAAIkRYAIAAAAAAAAAABIjwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAAACAxAkwAAAAAAAAAAEBiBJgAAAAAAAAAAIDECDABAAAAAAAAAACJEWACAAAAAAAAAAASI8AEAAAAAAAAAAAkRoAJAAAAAAAAAABIjAATAAAAAAAAAACQGAEmAAAAAAAAAAAgMQJMAAAAAAAAAABAYgSYAAAAAAAAAACAxAgwAQAAAAAAAAAAiRFgAgAAAAAAAAAAEiPABAAAAAAAAAAAJEaACQAAAAAAAAAASIwAEwAAAAAAAAAAkBgBJgAAAAAAAAAAIDECTAAAAAAAAAAAQGIEmAAAAAAAAAAAgMQIMAEAAAAAAAAAAIkRYAIAAAAAAAAAABIjwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAAACAxAkwAAAAAAAAAAEBiBJgAAAAAAAAAAIDECDABAAAAAAAAAACJEWACAAAAAAAAAAASI8AEAAAAAAAAAAAkRoAJAAAAAAAAAABIjAATAAAAAAAAAACQGAEmAAAAAAAAAAAgMQJMAAAAAAAAAABAYgSYAAAAAAAAAACAxAgwAQAAAAAAAAAAiRFgAgAAAAAAAAAAEiPABAAAAAAAAAAAJEaACQAAAAAAAAAASIwAEwAAAAAAAAAAkBgBJgAAAAAAAAAAIDECTAAAAAAAAAAAQGIEmAAAAAAAAAAAgMQIMAEAAAAAAAAAAIkRYAIAAAAAAAAAABIjwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAAACAxAkwAAAAAAAAAAEBiBJgAAAAAAAAAAIDECDABAAAAAAAAAACJEWACAAAAAAAAAAASI8AEAAAAAAAAAAAkRoAJAAAAAAAAAABIjAATAAAAAAAAAACQGAEmAAAAAAAAAAAgMQJMAAAAAAAAAABAYgSYAAAAAAAAAACAxAgwAQAAAAAAAAAAiRFgAgAAAAAAAAAAEiPABAAAAAAAAAAAJEaACQAAAAAAAAAASIwAEwAAAAAAAAAAkBgBJgAAAAAAAAAAIDECTAAAAAAAAAAAQGIEmAAAAAAAAAAAgMQIMAEAAAAAAAAAAIkRYAIAAAAAAAAAABIjwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAAACAxAkwAAAAAAAAAAEBiBJgAAAAAAAAAAIDECDABAAAAAAAAAACJEWACAAAAAAAAAAASI8AEAAAAAAAAAAAkRoAJAAAAAAAAAABIjAATAAAAAAAAAACQGAEmAAAAAAAAAAAgMQJMAAAAAAAAAABAYgSYAAAAAAAAAACAxAgwAQAAAAAAAAAAiRFgAgAAAAAAAAAAEiPABAAAAAAAAAAAJEaACQAAAAAAAAAASIwAEwAAAAAAAAAAkBgBJgAAAAAAAAAAIDECTAAAAAAAAAAAQGIEmAAAAAAAAAAAgMQIMAEAAAAAAAAAAIkRYAIAAAAAAAAAABIjwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAAACAxAkwAAAAAAAAAAEBiBJgAAAAAAAAAAIDECDABAAAAAAAAAACJEWACAAAAAAAAAAASI8AEAAAAAAAAAAAkRoAJAAAAAAAAAABIjAATAAAAAAAAAACQGAEmAAAAAAAAAAAgMQJMAAAAAAAAAABAYgSYAAAAAAAAAACAxAgwAQAAAAAAAAAAiRFgAgAAAAAAAAAAEiPABAAAAAAAAAAAJEaACQAAAAAAAAAASIwAEwAAAAAAAAAAkBgBJgAAAAAAAAAAIDECTAAAAAAAAAAAQGIEmAAAAAAAAAAAgMQIMAEAAAAAAAAAAIkRYAIAAAAAAAAAABIjwAQAAAAAAAAAACRGgAkAAAAAAAAAAEiMABMAAAAAAAAAAJAYASYAAAAAAAAA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b948OnbsGBdddFEMGDAgbr755pg2bVrxNX379o2cnJy44YYbVvtrAAAAANZN6e86AAAAAKzH9thjj7j//vtTtrz6+eef47XXXktwKkpr0aJF8eOPPyY9xjrnww8/jAcffDClttlmm8Vrr70WJ5xwQsbwUiaHHHJI9O3bN7baaquUep8+ffx3CAAAACiRABMAAADACnbaaac46KCDUmpvvfVWQtNQFt9++20sWbIk6THWKTNmzIi//vWvxVsnRkS0a9cunnnmmWjcuHGZ+zVt2jQeeeSRaN68eUq9V69ekZeXV+F5AQAAgD8eW8gBAAAAZHDggQfGm2++WXz82WefZbyub9++cdVVVxUfX3zxxXHBBRdERMSQIUPiiSeeiJEjR8aCBQti6623jhdffHGlz83Pz4+33norPv300xg5cmRMnz495s2bF7Vr145GjRrFRhttFPvss0/st99+5QqXLF26NN59991466234ptvvolp06ZFfn5+1KtXL9q2bRudOnWKY489Nho2bFimvkOHDo1TTz21+HiXXXaJZ555plT3zps3L/r37x8ff/xxjBkzJqZNmxaFhYVRt27d2GCDDWKnnXaKww8/PG1Vn2VW/Bks77777ov77ruv+Lhly5bx3nvvrXSe+fPnx4ABA2Lo0KHx7bffxqxZs2LBggVRr169aNiwYbRp0yb222+/2GeffaJu3bqleo3Ly8/PjwEDBsT//ve/lNe7bCvDffbZJ4488sioXbt2mXuXx1NPPVW8ZWJERJUqVeLWW2+N+vXrl7tn48aN47rrrovzzjuvuGfbtm1jwoQJ0bZt2wpO/H++/vrrePvtt+Pbb7+NX375JebNmxeLFi2KGjVqRL169WKzzTaLHXbYIY488sho1qxZmftPnTo13nrrrfjiiy9izJgxxX8XsrKyolatWtGyZcvYbLPNYq+99op99903qlWrVure48ePjzfffDOGDRsWP/74Y8yePTsWLlwYOTk5Ubt27dhoo42iffv2sffee8eee+5pC0sAAAD+0ASYAAAAADLYZJNNUo4XLFgQCxYsiFq1apXq/ueeey5uuOGGlFVtpk6dutJ7nnnmmXj44Ydj2rRpaedmzZoVs2bNih9//DHef//9uOGGG+LMM8+M888/P6pXxxJFHQAAH9BJREFUr16qmX766ae46qqrYsSIEWnnpk+fHtOnT4+hQ4fGgw8+GFdffXUcd9xxpepbXkuXLo3HH388HnjggVi4cGHa+RkzZsSMGTNi5MiR8eSTT8Zee+0VN954Y7mCKKWxZMmSePDBB+Ppp5+OefPmpZ1f9j0aM2ZMDBw4MGrWrBkXX3xxnHLKKaUOlwwfPjyuvPLK+OWXX9LOTZkyJaZMmRKDBw+O++67L2666abYd999K/y6Vmb+/Plpobo//elPsc0221S49z777BMnnHBCtG/fPrp06RKNGjWqcM9lRo0aFdddd10MHz484/n58+fH/PnzY8KECfH+++/HPffcEyeeeGJcfvnlpfrvy6JFi+Kuu+6K559/vsQVvfLz82PWrFnxzTffRN++faNJkyZx2WWXxdFHH73S3jNnzoxbb701+vfvn/LPh2WWLFkSeXl5MX369Bg2bFi88MIL0apVq7j22mujc+fOq5wdAAAA1kUCTAAAAAAZZAoqlTbA9MMPP8TNN9+cMZyQSV5eXvz1r3+NgQMHlnq+goKCeOihh+KDDz6I3r17R7169VZ6/bhx4+LUU0+N6dOnr7L3woUL49prr40FCxZEgwYNSj1TWeTn58dFF10UH3zwQanvGTRoUBx11FHx1FNPxeabb16p88ycOTO6d+8en3/+eanvWbhwYdxyyy3x4YcfxsMPPxy5ubkrvX7EiBFx+umnZwxrZZrnwgsvjLvvvrvU85RH//79Y+7cuSm1k046qdL6X3/99ZXWa5lBgwbFRRddVKbt6JYsWRLPPPNMfPPNN/H000+vdKWkhQsXxhlnnBHDhg0r01zTpk2LK6+8MsaOHRs9evQo8ZpTTjklY4BtZcaNGxfnnntuXH/99XH88ceX6V4AAABYFwgwAQAAAGSQaQWe0m6p9eCDD5a4aksmf//739PCS/vvv38cffTRsc0220S9evVi/vz5MWbMmHjrrbeib9++UVBQEBER33//fZx55pnx/PPPlxigWbp0aVx44YUp4aWsrKw49thj4+ijj45NNtkkcnNzY9q0afH5559H7969Y8yYMdGrV69KDbMs76qrrkoJL+Xm5sYpp5wSBx10UGy44YZRo0aNmDx5cgwePDgeeeSR4lWpZs6cGWeddVa8/vrrxaGto48+Oo444oiIiLj//vvjgQceKO57wQUXxF/+8peU172iwsLCuPjii1PCS1WqVInDDz88DjvssNhiiy2idu3aMWfOnPjuu+/itddeizfffDOWLl0aEb9vFXjJJZekPHdFCxYsiL/85S8p4aWqVavGKaecEoceemi0atUqsrOzY/LkyfHJJ5/Ek08+GRMmTIgrr7wyDj/88LJ8a8vk/fffTznefvvtK3WLt8o2efLkuPTSS1PCS82aNYszzzwzdt1112jUqFHUqVMn5s2bF9999128+OKLKVsGDhs2LG677bb4xz/+UeIz7r333pTwUu3ateOkk06Kzp07R+vWraN27dqxcOHCmDFjRnz++efx+uuvxxdffFF8/UMPPRQ777xzdOrUKa339ddfnxJeaty4cZx66qmx++67x0YbbRS1atWKefPmxbRp0+KTTz6JV199NUaNGhUREUVFRdGzZ8/YYYcdol27duX7BgIAAMBaSoAJAAAAIIPRo0enHDdt2nSVK+xE/B58evvttyMiokuXLnHWWWfFpptuGllZWRlXP+rXr1/079+/+Lhq1arxr3/9K/bff/+U66pXrx6NGzeOjh07xvHHHx/nnHNOzJgxIyKieIu1c889N+NMffv2TXs9vXr1Kg79LFOrVq1o3bp1HHPMMXHttddG37594/nnn1/lay6rt99+O15//fWU5z7zzDOx1VZbpVzXpk2baNOmTRx00EFxzDHHFIeYpk6dGnfeeWfx6j5ZWVmRk/P721zZ2dkpPbKzs4vPleTBBx+Mzz77rPi4bt268fDDD8cOO+yQcl316tWjWbNmsc8++8TRRx8dF110USxatCgiIt599914/fXX47DDDsv4jMceeyxla8CqVavGY489FrvttlvKde3atYt27drF8ccfHxdccEF89NFH8d///nel85dXUVFR2ipDu+6662p5VmV55JFHUsKFLVu2jP/85z9p29NVr149OnfuHJ07d44777wzHnnkkeJzffr0ibPPPjtatGiR1j8vLy9eeuml4uOaNWvGSy+9lBYYqlatWjRo0CDatWsXJ554Yjz66KNxxx13FJ+///770wJMEyZMKP5nQ8Tv/0z573//G02bNk25rlGjRtGoUaNo3759dOvWLW666aZ49tlnI+L3laQeeuihlGcBAADAH0H2qi8BAAAAWP/873//SzneY489SnXfu+++GwUFBXHaaafFvffeGx06dIgaNWpE9erVY8MNN0y5trCwMO67776UWs+ePdPCSyvaeuut0wIMDz30UNpWYMs899xzKcdHHHFEWnhpeVWqVImbbroptthiizKtJFVa9957b8rx3//+97Tw0vKaNm0at956a0qtX79+MXPmzArPMnfu3HjyySfT5lsxvLSiPffcM6655pqU2p133lm8KtPyCgsL44UXXkipnXXWWWnhpeVVq1Yt7r333mjSpMlq+RlE/B6oWXGlsQ4dOqyWZ1WGoqKieOONN1JqF154YVp4aUUXX3xxNGvWrPi4oKAgbeWpZUaMGJGySlaXLl1KtdrR2WefnRL+GjlyZMyePTvlmqFDh6YcH3/88WnhpRVlZ2fHVVddFa1bty6uDRkyJOPfMwAAAFiXCTABAAAArOCLL75I2XYqIuLII48s1b2//vprtG7dOi6//PJVXjtw4MD47bffio87dOgQXbt2LdVzOnbsGLvvvnvx8cKFC9NmjogYP358fPfddym1s846a5X9s7Ozo3v37qWapSy++OKL+OGHH4qPW7RoUaot0jp16pSyYk5+fn58+OGHFZ7nxRdfjPnz5xcfH3TQQSnf15Xp2rVrSrBk4sSJ8eWXX6Zd9/nnn8esWbOKj6tWrRrdunVbZf9atWqVuKpWZZg4cWJarU2bNqvteRU1f/786NKlS+y3336x7bbbRsuWLUsVLMzJyYm99947pTZy5MiM1664Slrjxo1LPd8///nPeOaZZ+K9996LESNGpG05Wd7eOTk5ceedd8bzzz8fgwYNio8//jhtpTEAAABY19lCDgAAAGA5X3zxRVx00UVRVFRUXNt1111LHWqJiDjxxBOjatWqq7zurbfeSjle2apImRx66KHxySefFB+/8847cdRRR6Vcs+KqLy1btozNN9+8VP07deoUderUSVulpyJWDB3ttddeq9zibZmePXvGrFmzokGDBtGgQYO0Fa3KY+DAgSnHpQ2qRfwe8jr44IPjwQcfLK698847sfPOO6dct+LPYLvttosGDRqU6hkHHXRQ3HzzzatlxZ3lQ1XL1KtXr9KfU1nq1KlTvG1gWW2yySYpxyWt3lWrVq2U4xW32FuZtm3bRtu2bUs8n6n3iSeeWKreW2+9dannAAAAgHWRj+oAAAAA67UFCxbE+PHjY8CAAXHRRRfFqaeemhJuaNKkSfTq1atMPffcc89SXffVV1+lHG+33XZles7yW1ZFRNpKSxERP/74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b7/94o477ohZs2aVq8+0adPSto478cQTS33/6vi5LtOqVat4+OGHY+edd06pf/jhhxXuvcUWW0Tv3r2jdevWxbWCgoIYMmRIhXsDAADA2kSACQAAACAhK66sUhmBhxW1a9cu5XjkyJGlvnf+/Pllur40VnzNn332Wanvffvtt6N79+7FXy+99FKFZsnOzo6tttoqpba2/Qx++eWXmDJlSmWPVKxq1apx8sknp9SGDRsWzz77bIV7jx49Ou67776IiFi0aFE8+uij8corr5Sr19SpU1OO69evHw0bNizVvXl5efH++++X67mlVaVKlTjhhBNSapMmTaqU3jVr1oyjjz56tfQGAACAtYUAEwAAAEBCunTpknL83nvvxbRp00p9/5QpU+LMM8+Mp59+OsaNG5fxmh122CHl+Keffip1+OGdd96JgoKCUs9TGgceeGDK8aeffpoWTilJ//79Y+DAgcVfS5YsqfA8Bx10UMrxq6++Gnl5eaW+/+uvv47zzz8/+vTpU2LQaMWfwZdffhmLFi0qVf833nij1LOU10knnRQbbrhhSu3OO++MYcOGlbvnjBkz4sILL4zFixcX15Ztu1YeWVlZKcdVqlQp9b1PP/10zJw5M6VWWFiYdt2iRYvi008/jSeeeCIuu+yy+PTTT8s0Y926dVOOq1WrVvznuXPnxqBBg+Khhx6K7t27l3lVrZX1BgAAgD8CASYAAACAhOy1116xwQYbFB8vWrQoevXqVer7e/XqFR999FHcfPPNccABB2RckWjLLbeMli1bptSefvrpVfZevHhx8eo5lWnrrbdOWZGooKAg7r///lXe99tvv8UHH3xQfJyTkxMHHHBA2nXZ2alvd60qKHTEEUdEjRo1io+nTJkSDz744CrniYhYsmRJ3HbbbfHee+/F3//+99hrr71i8ODBadd16tQpqlevXny8YMGCePnll1fZf+bMmfHUU0+VapaKqF27dtx5552Rk5NTXFu0aFGcccYZ8cknn5S538SJE+O0005LCdVVr1497r777qhatWq5Zlxxm7sZM2aUamWqzz77LP7973+n/b2YO3du2rWTJ0+Obt26xW233Ravv/56PPDAA2Wa8bvvvks5btWqVfGfv/766zj77LPj7rvvjoEDB8Zjjz1Wab0BAADgj0CACQAAACAh2dnZcemll6bU+vfvH7fffnvGFWKWKSwsjJtvvjlef/314lrDhg3jkEMOyXj9cccdl3Lcu3fvGDRoUIn98/Pz49JLL43x48enBG8qyxVXXJFy/OKLL0afPn1KvH7u3LnRo0ePlNWgDj/88LRQS8TvYZzljR49eqWz1KlTJ84777yU2kMPPRTPPPPMSu9btGhRXH755fHFF18U19q1axcdO3ZMu7ZGjRpx+OGHp9TuuuuuGDVqVIn9582bF+eff37MmzdvtfwMVrTddtvFVVddlbLS0cKFC+OMM86I6667LubMmbPKHkVFRfHKK69E165dY8yYMcX1nJycuP3226N9+/blnq9Zs2Zpq0StLPhWVFQU//3vf+Oss86KgoKC6NGjR8r5sWPHxvz581Nqbdq0iW233bb4eOjQoXHj/2vvbkOzLvs+gH9nbgt1luHKDCMJUpIse+EiEvMBdTkta4ZlmQaRhApSKRlS5APFIrA0wmZRoiGSVIT6Qg1DEXuTrMxVFvZgEOrQuS2dmdeLuMc9H2d13ed9XXw+744/x3H+j//B/3xxnnz5/RYu7FClr2+//bZd2KyoqCgjR45sG99222256qqr2sbr1q3rcIhp586d+fDDD9vGXbt2Pet7BgAAAP/JBJgAAAAACmjcuHGprKxsd622tjb3339/3n///fz4449paWlJU1NTvvnmm6xatSrjxo07o4rS888/n7KysrPeY+rUqe3CPidPnsz06dOzcOHC1NXV5ciRI2lqasr333+f1atXp6qqKps2bUpRUVEef/zxf/yZ77zzzlRVVbW7Nn/+/MyaNSs7duzIgQMHcuzYsezbty/vvvtuqqqqUldX1za3vLz8jBDU/7j++uvbjbdv35533nknBw8eTFNTU+rr689oWffYY49l0KBB7a4tXLgwU6dOzfr167N///4cO3YsjY2N2b17d958881UVlZmw4YNbfOLi4uzaNGic7Y2mzlzZrtKTy0tLZk0aVKWLFmS+vr6NDU15ejRo/n666+zYsWKVFZWZteuXSktLc20adPOc5r/nIceeigvv/xySkpK2q798ccfee+99zJs2LDMnj0769evT319fQ4dOpRjx47l119/zc6dO7N06dKMGjUqc+fObdeurUuXLlmyZMkZrQP/itODeGvWrMmTTz6Zurq6NDc3p7GxMd99911WrVqV6urqzJs3L8ePH8+kSZNSXV3d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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plot_model(model, 'confusion_matrix')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "id": "1809cba4-4197-470f-8cfd-30f072acb794",
      "metadata": {
        "id": "1809cba4-4197-470f-8cfd-30f072acb794",
        "outputId": "bd8a3b85-272f-49a5-e21e-833dcfaa7441",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 798
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": []
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 4800x3300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plot_model(model, 'boundary', scale = 2)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "900f12b9-dcef-4704-9fc3-97108bd45f4f",
      "metadata": {
        "id": "900f12b9-dcef-4704-9fc3-97108bd45f4f"
      },
      "source": [
        "### Finalizing and Saving the Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "id": "1b9774af-27ee-45fa-8f15-1b0726745254",
      "metadata": {
        "id": "1b9774af-27ee-45fa-8f15-1b0726745254",
        "outputId": "41b3ef3c-115f-4803-96e5-2e6222a390ad",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Transformation Pipeline and Model Successfully Saved\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(Pipeline(memory=FastMemory(location=/tmp/joblib),\n",
              "          steps=[('numerical_imputer',\n",
              "                  TransformerWrapper(exclude=None,\n",
              "                                     include=['Return on Assets %',\n",
              "                                              'Return on Capital %',\n",
              "                                              'Return on Equity %',\n",
              "                                              'Return on Common Equity %',\n",
              "                                              'Gross Margin %', 'SG&A Margin %',\n",
              "                                              'EBITDA Margin %',\n",
              "                                              'EBITA Margin %', 'EBIT Margin %',\n",
              "                                              'Earnings from Cont. Ops Margin %',\n",
              "                                              'Net Income Margin %',\n",
              "                                              'Net Income Avail. for Common '\n",
              "                                              'Mar...\n",
              "                  TransformerWrapper(exclude=None, include=None,\n",
              "                                     transformer=CleanColumnNames(match='[\\\\]\\\\[\\\\,\\\\{\\\\}\\\\\"\\\\:]+'))),\n",
              "                 ('actual_estimator',\n",
              "                  LogisticRegression(C=1.0, class_weight=None, dual=False,\n",
              "                                     fit_intercept=True, intercept_scaling=1,\n",
              "                                     l1_ratio=None, max_iter=1000,\n",
              "                                     multi_class='auto', n_jobs=None,\n",
              "                                     penalty='l2', random_state=1234,\n",
              "                                     solver='lbfgs', tol=0.0001, verbose=0,\n",
              "                                     warm_start=False))],\n",
              "          verbose=False),\n",
              " 'classification_model.pkl')"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ],
      "source": [
        "final_model = finalize_model(model)\n",
        "\n",
        "save_model(final_model, 'classification_model')"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "evoM7cD3aMYP"
      },
      "id": "evoM7cD3aMYP",
      "execution_count": 19,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.11"
    },
    "colab": {
      "provenance": [],
      "machine_shape": "hm"
    },
    "accelerator": "TPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "9ab3aeda749046dc973ffa5c2947eac6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_fd546bf054ea440da4b0a91910cafca4",
              "IPY_MODEL_4feaa63e0a1b4a79bd01078918eebd86",
              "IPY_MODEL_4cb7a3db95fa417fb1328f765a5d3548"
            ],
            "layout": "IPY_MODEL_65b9a8cf3f5549f6bb1848994dc2b228"
          }
        },
        "fd546bf054ea440da4b0a91910cafca4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1b1716eda31349c7bd7ad4fd86902e19",
            "placeholder": "​",
            "style": "IPY_MODEL_6f220b9166a344deb2f1085518f38a53",
            "value": "Processing: 100%"
          }
        },
        "4feaa63e0a1b4a79bd01078918eebd86": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7c33a76c0a9c46b58a9a68bc1815798e",
            "max": 65,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_8234009defc44aecb1f304ff4ad54b67",
            "value": 65
          }
        },
        "4cb7a3db95fa417fb1328f765a5d3548": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_36ebf55abc874b93bb099cb8c843636b",
            "placeholder": "​",
            "style": "IPY_MODEL_97ca2682174549c9a936fd5aa198d5a8",
            "value": " 65/65 [01:09&lt;00:00,  1.65it/s]"
          }
        },
        "65b9a8cf3f5549f6bb1848994dc2b228": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": "hidden",
            "width": null
          }
        },
        "1b1716eda31349c7bd7ad4fd86902e19": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6f220b9166a344deb2f1085518f38a53": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "7c33a76c0a9c46b58a9a68bc1815798e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8234009defc44aecb1f304ff4ad54b67": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "36ebf55abc874b93bb099cb8c843636b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "97ca2682174549c9a936fd5aa198d5a8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "fa87afca38284991a24ac990c235b117": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_638ffc85e8e34e27befd8a2038a7fc3e",
              "IPY_MODEL_66a7462d34a34037b7b6a5cfcc69ac6e",
              "IPY_MODEL_312fff379bb04776a2583f92a052e666"
            ],
            "layout": "IPY_MODEL_f15d7ae5b71f4361969bca8ac53c2268"
          }
        },
        "638ffc85e8e34e27befd8a2038a7fc3e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ab70253193824142bfcd4111133be0c9",
            "placeholder": "​",
            "style": "IPY_MODEL_320030d27abe4ab8b44a127e9260c88e",
            "value": "Processing: 100%"
          }
        },
        "66a7462d34a34037b7b6a5cfcc69ac6e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c73853d15132486eb8ca3969f2d96b8f",
            "max": 4,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_18508394b49d4cb585e6185771db353a",
            "value": 4
          }
        },
        "312fff379bb04776a2583f92a052e666": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8152b6d91d5840a5bff80836b2048870",
            "placeholder": "​",
            "style": "IPY_MODEL_86b03347a93342b28e58aaf8c36aec4e",
            "value": " 4/4 [00:01&lt;00:00,  3.12it/s]"
          }
        },
        "f15d7ae5b71f4361969bca8ac53c2268": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": "hidden",
            "width": null
          }
        },
        "ab70253193824142bfcd4111133be0c9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "320030d27abe4ab8b44a127e9260c88e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c73853d15132486eb8ca3969f2d96b8f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "18508394b49d4cb585e6185771db353a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "8152b6d91d5840a5bff80836b2048870": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "86b03347a93342b28e58aaf8c36aec4e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "9c85b149da7b4c80bb92a72eb9db92b5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_969e29ad26d34ba1a1d2aa94163a0fa7",
              "IPY_MODEL_6c5b0e752adc42bdb1deb3be3ca9e87b",
              "IPY_MODEL_3b24cec99c444864811b9762c9f90a82"
            ],
            "layout": "IPY_MODEL_32220f5f2ea848238f3d0e872a9c4dec"
          }
        },
        "969e29ad26d34ba1a1d2aa94163a0fa7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_65273b452e854fc1b7f4cdf1c649cd71",
            "placeholder": "​",
            "style": "IPY_MODEL_be080b20d3a34768b15c69489a731269",
            "value": "Processing: 100%"
          }
        },
        "6c5b0e752adc42bdb1deb3be3ca9e87b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0857782a95cf487c834d56f985f34358",
            "max": 7,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_62f1dde4da63416caf52339d1ef415d3",
            "value": 7
          }
        },
        "3b24cec99c444864811b9762c9f90a82": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_cfe4f8bd809342e883c97037a70a3944",
            "placeholder": "​",
            "style": "IPY_MODEL_3c9710d57a294ad4ad04f023361a752a",
            "value": " 7/7 [00:08&lt;00:00,  1.09s/it]"
          }
        },
        "32220f5f2ea848238f3d0e872a9c4dec": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": "hidden",
            "width": null
          }
        },
        "65273b452e854fc1b7f4cdf1c649cd71": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "be080b20d3a34768b15c69489a731269": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "0857782a95cf487c834d56f985f34358": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "62f1dde4da63416caf52339d1ef415d3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "cfe4f8bd809342e883c97037a70a3944": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3c9710d57a294ad4ad04f023361a752a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "11b929d3a89b4b289116f2d53b49bb08": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_611b93f0fa9d4565a9383f5e1be0efc0",
              "IPY_MODEL_26803408c75449afac15d0f29435e40a",
              "IPY_MODEL_8bb0a89c05e24789b82cdec6bc1465dc"
            ],
            "layout": "IPY_MODEL_104dd19073204905b7018a67c39d9125"
          }
        },
        "611b93f0fa9d4565a9383f5e1be0efc0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2c1205b5e76d4afbb50a76e43f22dfe9",
            "placeholder": "​",
            "style": "IPY_MODEL_a11f156d04094b538345df40b4ec4777",
            "value": "Processing: 100%"
          }
        },
        "26803408c75449afac15d0f29435e40a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_96af1323cc7949f1aee28013ddf3b217",
            "max": 7,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_06bc1b5c586842038e619549c9cad47f",
            "value": 7
          }
        },
        "8bb0a89c05e24789b82cdec6bc1465dc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0d3f8decd72b447c99b3eb4063fc4195",
            "placeholder": "​",
            "style": "IPY_MODEL_d170f09e14dd42f9aa9c1d93d0a459c8",
            "value": " 7/7 [00:04&lt;00:00,  1.76it/s]"
          }
        },
        "104dd19073204905b7018a67c39d9125": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": "hidden",
            "width": null
          }
        },
        "2c1205b5e76d4afbb50a76e43f22dfe9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a11f156d04094b538345df40b4ec4777": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "96af1323cc7949f1aee28013ddf3b217": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "06bc1b5c586842038e619549c9cad47f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "0d3f8decd72b447c99b3eb4063fc4195": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d170f09e14dd42f9aa9c1d93d0a459c8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}